

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue May 14 21:02:18 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=3
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22     0000                     
    23                           ; Generated 12/10/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0000                     	;# 
    58     0001                     	;# 
    59     0002                     	;# 
    60     0003                     	;# 
    61     0004                     	;# 
    62     0005                     	;# 
    63     0006                     	;# 
    64     0007                     	;# 
    65     0008                     	;# 
    66     0009                     	;# 
    67     000A                     	;# 
    68     000B                     	;# 
    69     000C                     	;# 
    70     000D                     	;# 
    71     000E                     	;# 
    72     000E                     	;# 
    73     000F                     	;# 
    74     0010                     	;# 
    75     0011                     	;# 
    76     0012                     	;# 
    77     0013                     	;# 
    78     0014                     	;# 
    79     0015                     	;# 
    80     0015                     	;# 
    81     0016                     	;# 
    82     0017                     	;# 
    83     0018                     	;# 
    84     0019                     	;# 
    85     001A                     	;# 
    86     001B                     	;# 
    87     001B                     	;# 
    88     001C                     	;# 
    89     001D                     	;# 
    90     001E                     	;# 
    91     001F                     	;# 
    92     0081                     	;# 
    93     0085                     	;# 
    94     0086                     	;# 
    95     0087                     	;# 
    96     0088                     	;# 
    97     0089                     	;# 
    98     008C                     	;# 
    99     008D                     	;# 
   100     008E                     	;# 
   101     0091                     	;# 
   102     0092                     	;# 
   103     0093                     	;# 
   104     0094                     	;# 
   105     0098                     	;# 
   106     0099                     	;# 
   107     009C                     	;# 
   108     009D                     	;# 
   109     009E                     	;# 
   110     009F                     	;# 
   111     010C                     	;# 
   112     010D                     	;# 
   113     010E                     	;# 
   114     010F                     	;# 
   115     018C                     	;# 
   116     018D                     	;# 
   117     0000                     	;# 
   118     0001                     	;# 
   119     0002                     	;# 
   120     0003                     	;# 
   121     0004                     	;# 
   122     0005                     	;# 
   123     0006                     	;# 
   124     0007                     	;# 
   125     0008                     	;# 
   126     0009                     	;# 
   127     000A                     	;# 
   128     000B                     	;# 
   129     000C                     	;# 
   130     000D                     	;# 
   131     000E                     	;# 
   132     000E                     	;# 
   133     000F                     	;# 
   134     0010                     	;# 
   135     0011                     	;# 
   136     0012                     	;# 
   137     0013                     	;# 
   138     0014                     	;# 
   139     0015                     	;# 
   140     0015                     	;# 
   141     0016                     	;# 
   142     0017                     	;# 
   143     0018                     	;# 
   144     0019                     	;# 
   145     001A                     	;# 
   146     001B                     	;# 
   147     001B                     	;# 
   148     001C                     	;# 
   149     001D                     	;# 
   150     001E                     	;# 
   151     001F                     	;# 
   152     0081                     	;# 
   153     0085                     	;# 
   154     0086                     	;# 
   155     0087                     	;# 
   156     0088                     	;# 
   157     0089                     	;# 
   158     008C                     	;# 
   159     008D                     	;# 
   160     008E                     	;# 
   161     0091                     	;# 
   162     0092                     	;# 
   163     0093                     	;# 
   164     0094                     	;# 
   165     0098                     	;# 
   166     0099                     	;# 
   167     009C                     	;# 
   168     009D                     	;# 
   169     009E                     	;# 
   170     009F                     	;# 
   171     010C                     	;# 
   172     010D                     	;# 
   173     010E                     	;# 
   174     010F                     	;# 
   175     018C                     	;# 
   176     018D                     	;# 
   177     0013                     _SSPBUF	set	19
   178     0006                     _PORTB	set	6
   179     00A4                     _CKP	set	164
   180     00A5                     _SSPEN	set	165
   181     00A0                     _SSPM0	set	160
   182     00A1                     _SSPM1	set	161
   183     00A2                     _SSPM2	set	162
   184     00A3                     _SSPM3	set	163
   185     0032                     _RB2	set	50
   186     0031                     _RB1	set	49
   187     0030                     _RB0	set	48
   188     0086                     _TRISB	set	134
   189     043D                     _TRISC5	set	1085
   190     043C                     _TRISC4	set	1084
   191     043B                     _TRISC3	set	1083
   192     04A7                     _SMP	set	1191
   193     04A6                     _CKE	set	1190
   194                           
   195                           	psect	strings
   196     0003                     __pstrings:
   197     0003                     stringtab:
   198     0003                     __stringtab:
   199     0003                     stringcode:	
   200                           ;	String table - string pointers are 1 byte each
   201                           
   202     0003                     stringdir:
   203     0003  3000               	movlw	high stringdir
   204     0004  008A               	movwf	10
   205     0005  0804               	movf	4,w
   206     0006  0A84               	incf	4,f
   207     0007  0782               	addwf	2,f
   208     0008                     __stringbase:
   209     0008  3400               	retlw	0
   210     0009                     __end_of__stringtab:
   211     0009                     STR_2:
   212     0009  3446               	retlw	70	;'F'
   213     000A  3452               	retlw	82	;'R'
   214     000B  3449               	retlw	73	;'I'
   215     000C  3445               	retlw	69	;'E'
   216     000D  344E               	retlw	78	;'N'
   217     000E  3444               	retlw	68	;'D'
   218     000F  3400               	retlw	0
   219     0010                     STR_1:
   220     0010  3448               	retlw	72	;'H'
   221     0011  3445               	retlw	69	;'E'
   222     0012  344C               	retlw	76	;'L'
   223     0013  344C               	retlw	76	;'L'
   224     0014  344F               	retlw	79	;'O'
   225     0015  3400               	retlw	0
   226                           
   227                           	psect	cinit
   228     07F3                     start_initialization:	
   229                           ; #config settings
   230                           
   231     07F3                     __initialization:
   232                           
   233                           ; Clear objects allocated to BANK0
   234     07F3  1383               	bcf	3,7	;select IRP bank0
   235     07F4  3020               	movlw	low __pbssBANK0
   236     07F5  0084               	movwf	4
   237     07F6  3059               	movlw	low (__pbssBANK0+57)
   238     07F7  120A  118A  2671  120A  118A  	fcall	clear_ram0
   239     07FC                     end_of_initialization:	
   240                           ;End of C runtime variable initialization code
   241                           
   242     07FC                     __end_of__initialization:
   243     07FC  0183               	clrf	3
   244     07FD  120A  118A  2F90   	ljmp	_main	;jump to C main() function
   245                           
   246                           	psect	bssBANK0
   247     0020                     __pbssBANK0:
   248     0020                     _dbuf:
   249     0020                     	ds	32
   250     0040                     _width:
   251     0040                     	ds	2
   252     0042                     _prec:
   253     0042                     	ds	2
   254     0044                     _flags:
   255     0044                     	ds	1
   256     0045                     _string:
   257     0045                     	ds	20
   258                           
   259                           	psect	clrtext
   260     0671                     clear_ram0:	
   261                           ;	Called with FSR containing the base address, and
   262                           ;	W with the last address+1
   263                           
   264     0671  0064               	clrwdt	;clear the watchdog before getting into this loop
   265     0672                     clrloop0:
   266     0672  0180               	clrf	0	;clear RAM location pointed to by FSR
   267     0673  0A84               	incf	4,f	;increment pointer
   268     0674  0604               	xorwf	4,w	;XOR with final address
   269     0675  1903               	btfsc	3,2	;have we reached the end yet?
   270     0676  3400               	retlw	0	;all done for this memory range, return
   271     0677  0604               	xorwf	4,w	;XOR again to restore value
   272     0678  2E72               	goto	clrloop0	;do the next byte
   273                           
   274                           	psect	cstackCOMMON
   275     0070                     __pcstackCOMMON:
   276     0070                     ?_SPI_Master_init:
   277     0070                     ??_SPI_Master_init:	
   278                           ; 1 bytes @ 0x0
   279                           
   280     0070                     ?_SPI_Write_String:	
   281                           ; 1 bytes @ 0x0
   282                           
   283     0070                     ?_putch:	
   284                           ; 1 bytes @ 0x0
   285                           
   286     0070                     ??_putch:	
   287                           ; 1 bytes @ 0x0
   288                           
   289     0070                     ?_Port_Init:	
   290                           ; 1 bytes @ 0x0
   291                           
   292     0070                     ??_Port_Init:	
   293                           ; 1 bytes @ 0x0
   294                           
   295     0070                     ?_main:	
   296                           ; 1 bytes @ 0x0
   297                           
   298     0070                     ?_Write_data:	
   299                           ; 1 bytes @ 0x0
   300                           
   301     0070                     ??_Write_data:	
   302                           ; 1 bytes @ 0x0
   303                           
   304     0070                     ?_fputc:	
   305                           ; 1 bytes @ 0x0
   306                           
   307     0070                     Write_data@data:	
   308                           ; 2 bytes @ 0x0
   309                           
   310     0070                     putch@c:	
   311                           ; 1 bytes @ 0x0
   312                           
   313     0070                     fputc@c:	
   314                           ; 1 bytes @ 0x0
   315                           
   316                           
   317                           ; 2 bytes @ 0x0
   318     0070                     	ds	1
   319     0071                     ??_SPI_Write_String:
   320                           
   321                           ; 1 bytes @ 0x1
   322     0071                     	ds	1
   323     0072                     fputc@fp:
   324     0072                     SPI_Write_String@i:	
   325                           ; 1 bytes @ 0x2
   326                           
   327                           
   328                           ; 2 bytes @ 0x2
   329     0072                     	ds	1
   330     0073                     ??_fputc:
   331                           
   332                           ; 1 bytes @ 0x3
   333     0073                     	ds	1
   334     0074                     SPI_Write_String@text:
   335                           
   336                           ; 1 bytes @ 0x4
   337     0074                     	ds	4
   338     0078                     ?_vfpfcnvrt:
   339     0078                     vfpfcnvrt@fmt:	
   340                           ; 1 bytes @ 0x8
   341                           
   342                           
   343                           ; 1 bytes @ 0x8
   344     0078                     	ds	1
   345     0079                     vfpfcnvrt@ap:
   346                           
   347                           ; 1 bytes @ 0x9
   348     0079                     	ds	1
   349     007A                     ??_vfpfcnvrt:
   350                           
   351                           ; 1 bytes @ 0xA
   352     007A                     	ds	2
   353     007C                     vfpfcnvrt@fp:
   354                           
   355                           ; 1 bytes @ 0xC
   356     007C                     	ds	1
   357     007D                     ??_vfprintf:
   358     007D                     ?_sprintf:	
   359                           ; 1 bytes @ 0xD
   360                           
   361     007D                     sprintf@fmt:	
   362                           ; 2 bytes @ 0xD
   363                           
   364                           
   365                           ; 1 bytes @ 0xD
   366     007D                     	ds	1
   367                           
   368                           	psect	cstackBANK0
   369     0059                     __pcstackBANK0:
   370     0059                     ?_vfprintf:
   371     0059                     vfprintf@fmt:	
   372                           ; 2 bytes @ 0x0
   373                           
   374                           
   375                           ; 1 bytes @ 0x0
   376     0059                     	ds	1
   377     005A                     vfprintf@ap:
   378                           
   379                           ; 1 bytes @ 0x1
   380     005A                     	ds	1
   381     005B                     vfprintf@fp:
   382                           
   383                           ; 1 bytes @ 0x2
   384     005B                     	ds	1
   385     005C                     vfprintf@cfmt:
   386                           
   387                           ; 1 bytes @ 0x3
   388     005C                     	ds	1
   389     005D                     ??_sprintf:
   390                           
   391                           ; 1 bytes @ 0x4
   392     005D                     	ds	1
   393     005E                     sprintf@ap:
   394                           
   395                           ; 1 bytes @ 0x5
   396     005E                     	ds	1
   397     005F                     sprintf@s:
   398                           
   399                           ; 1 bytes @ 0x6
   400     005F                     	ds	1
   401     0060                     sprintf@f:
   402                           
   403                           ; 11 bytes @ 0x7
   404     0060                     	ds	11
   405     006B                     ??_main:
   406                           
   407                           ; 1 bytes @ 0x12
   408     006B                     	ds	3
   409                           
   410                           	psect	maintext
   411     0790                     __pmaintext:	
   412 ;;
   413 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   414 ;;
   415 ;; *************** function _main *****************
   416 ;; Defined at:
   417 ;;		line 34 in file "main.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;		None
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   426 ;; Tracked objects:
   427 ;;		On entry : B00/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   431 ;;      Params:         0       0       0       0       0
   432 ;;      Locals:         0       0       0       0       0
   433 ;;      Temps:          0       3       0       0       0
   434 ;;      Totals:         0       3       0       0       0
   435 ;;Total ram usage:        3 bytes
   436 ;; Hardware stack levels required when called: 5
   437 ;; This function calls:
   438 ;;		_Port_Init
   439 ;;		_SPI_Master_init
   440 ;;		_SPI_Write_String
   441 ;;		_sprintf
   442 ;; This function is called by:
   443 ;;		Startup code after reset
   444 ;; This function uses a non-reentrant model
   445 ;;
   446                           
   447     0790                     _main:	
   448                           ;psect for function _main
   449                           
   450     0790                     l817:	
   451                           ;incstack = 0
   452                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   453                           
   454                           
   455                           ;main.c: 35: SPI_Master_init();
   456     0790  120A  118A  2686  120A  118A  	fcall	_SPI_Master_init
   457     0795                     l819:
   458                           
   459                           ;main.c: 36: Port_Init();
   460     0795  120A  118A  2679  120A  118A  	fcall	_Port_Init
   461     079A                     l821:
   462                           
   463                           ;main.c: 38: if(RB0){
   464     079A  1283               	bcf	3,5	;RP0=0, select bank0
   465     079B  1303               	bcf	3,6	;RP1=0, select bank0
   466     079C  1C06               	btfss	6,0	;volatile
   467     079D  2F9F               	goto	u171
   468     079E  2FA0               	goto	u170
   469     079F                     u171:
   470     079F  2FB7               	goto	l827
   471     07A0                     u170:
   472     07A0                     l823:
   473                           
   474                           ;main.c: 39: sprintf(string,"HELLO");
   475     07A0  3008               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   476     07A1  00FD               	movwf	sprintf@fmt
   477     07A2  3045               	movlw	(low (_string| 0))& (0+255)
   478     07A3  120A  118A  2696  120A  118A  	fcall	_sprintf
   479     07A8                     l825:
   480                           
   481                           ;main.c: 40:   _delay((unsigned long)((350)*(4000000/4000.0)));
   482     07A8  3002               	movlw	2
   483     07A9  1283               	bcf	3,5	;RP0=0, select bank0
   484     07AA  1303               	bcf	3,6	;RP1=0, select bank0
   485     07AB  00ED               	movwf	??_main+2
   486     07AC  30C7               	movlw	199
   487     07AD  00EC               	movwf	??_main+1
   488     07AE  3087               	movlw	135
   489     07AF  00EB               	movwf	??_main
   490     07B0                     u207:
   491     07B0  0BEB               	decfsz	??_main,f
   492     07B1  2FB0               	goto	u207
   493     07B2  0BEC               	decfsz	??_main+1,f
   494     07B3  2FB0               	goto	u207
   495     07B4  0BED               	decfsz	??_main+2,f
   496     07B5  2FB0               	goto	u207
   497     07B6  2FB7               	nop2
   498     07B7                     l827:
   499                           
   500                           ;main.c: 42: if(RB1){
   501     07B7  1283               	bcf	3,5	;RP0=0, select bank0
   502     07B8  1303               	bcf	3,6	;RP1=0, select bank0
   503     07B9  1C86               	btfss	6,1	;volatile
   504     07BA  2FBC               	goto	u181
   505     07BB  2FBD               	goto	u180
   506     07BC                     u181:
   507     07BC  2FD4               	goto	l833
   508     07BD                     u180:
   509     07BD                     l829:
   510                           
   511                           ;main.c: 43: sprintf(string,"FRIEND");
   512     07BD  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   513     07BE  00FD               	movwf	sprintf@fmt
   514     07BF  3045               	movlw	(low (_string| 0))& (0+255)
   515     07C0  120A  118A  2696  120A  118A  	fcall	_sprintf
   516     07C5                     l831:
   517                           
   518                           ;main.c: 44:   _delay((unsigned long)((350)*(4000000/4000.0)));
   519     07C5  3002               	movlw	2
   520     07C6  1283               	bcf	3,5	;RP0=0, select bank0
   521     07C7  1303               	bcf	3,6	;RP1=0, select bank0
   522     07C8  00ED               	movwf	??_main+2
   523     07C9  30C7               	movlw	199
   524     07CA  00EC               	movwf	??_main+1
   525     07CB  3087               	movlw	135
   526     07CC  00EB               	movwf	??_main
   527     07CD                     u217:
   528     07CD  0BEB               	decfsz	??_main,f
   529     07CE  2FCD               	goto	u217
   530     07CF  0BEC               	decfsz	??_main+1,f
   531     07D0  2FCD               	goto	u217
   532     07D1  0BED               	decfsz	??_main+2,f
   533     07D2  2FCD               	goto	u217
   534     07D3  2FD4               	nop2
   535     07D4                     l833:
   536                           
   537                           ;main.c: 46: if(RB2){
   538     07D4  1283               	bcf	3,5	;RP0=0, select bank0
   539     07D5  1303               	bcf	3,6	;RP1=0, select bank0
   540     07D6  1D06               	btfss	6,2	;volatile
   541     07D7  2FD9               	goto	u191
   542     07D8  2FDA               	goto	u190
   543     07D9                     u191:
   544     07D9  2F9A               	goto	l821
   545     07DA                     u190:
   546     07DA                     l835:
   547                           
   548                           ;main.c: 47: SPI_Write_String(string);
   549     07DA  3045               	movlw	(low (_string| 0))& (0+255)
   550     07DB  120A  118A  26B5  120A  118A  	fcall	_SPI_Write_String
   551     07E0                     l837:
   552                           
   553                           ;main.c: 48:   _delay((unsigned long)((350)*(4000000/4000.0)));
   554     07E0  3002               	movlw	2
   555     07E1  1283               	bcf	3,5	;RP0=0, select bank0
   556     07E2  1303               	bcf	3,6	;RP1=0, select bank0
   557     07E3  00ED               	movwf	??_main+2
   558     07E4  30C7               	movlw	199
   559     07E5  00EC               	movwf	??_main+1
   560     07E6  3087               	movlw	135
   561     07E7  00EB               	movwf	??_main
   562     07E8                     u227:
   563     07E8  0BEB               	decfsz	??_main,f
   564     07E9  2FE8               	goto	u227
   565     07EA  0BEC               	decfsz	??_main+1,f
   566     07EB  2FE8               	goto	u227
   567     07EC  0BED               	decfsz	??_main+2,f
   568     07ED  2FE8               	goto	u227
   569     07EE  2FEF               	nop2
   570     07EF  2F9A               	goto	l821
   571     07F0  120A  118A  2800   	ljmp	start
   572     07F3                     __end_of_main:
   573                           
   574                           	psect	text1
   575     0696                     __ptext1:	
   576 ;; *************** function _sprintf *****************
   577 ;; Defined at:
   578 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_sprintf.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;  s               1    wreg     PTR unsigned char 
   581 ;;		 -> string(20), 
   582 ;;  fmt             1   13[COMMON] PTR const unsigned char 
   583 ;;		 -> STR_2(7), STR_1(6), 
   584 ;; Auto vars:     Size  Location     Type
   585 ;;  s               1    6[BANK0 ] PTR unsigned char 
   586 ;;		 -> string(20), 
   587 ;;  f              11    7[BANK0 ] struct _IO_FILE
   588 ;;  ret             2    0        int 
   589 ;;  ap              1    5[BANK0 ] PTR void [1]
   590 ;;		 -> ?_sprintf(2), 
   591 ;; Return value:  Size  Location     Type
   592 ;;                  2   13[COMMON] int 
   593 ;; Registers used:
   594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   595 ;; Tracked objects:
   596 ;;		On entry : 0/0
   597 ;;		On exit  : 0/0
   598 ;;		Unchanged: 0/0
   599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   600 ;;      Params:         1       0       0       0       0
   601 ;;      Locals:         0      13       0       0       0
   602 ;;      Temps:          0       1       0       0       0
   603 ;;      Totals:         1      14       0       0       0
   604 ;;Total ram usage:       15 bytes
   605 ;; Hardware stack levels used: 1
   606 ;; Hardware stack levels required when called: 4
   607 ;; This function calls:
   608 ;;		_vfprintf
   609 ;; This function is called by:
   610 ;;		_main
   611 ;; This function uses a non-reentrant model
   612 ;;
   613                           
   614     0696                     _sprintf:	
   615                           ;psect for function _sprintf
   616                           
   617                           
   618                           ;incstack = 0
   619                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   620                           ;sprintf@s stored from wreg
   621     0696  1283               	bcf	3,5	;RP0=0, select bank0
   622     0697  1303               	bcf	3,6	;RP1=0, select bank0
   623     0698  00DF               	movwf	sprintf@s
   624     0699                     l805:
   625     0699  307E               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   626     069A  00DE               	movwf	sprintf@ap
   627     069B  085F               	movf	sprintf@s,w
   628     069C  00E0               	movwf	sprintf@f
   629     069D                     l807:
   630     069D  01E2               	clrf	sprintf@f+2
   631     069E  01E3               	clrf	sprintf@f+3
   632     069F                     l809:
   633     069F  01E9               	clrf	sprintf@f+9
   634     06A0  01EA               	clrf	sprintf@f+10
   635     06A1                     l811:
   636     06A1  087D               	movf	sprintf@fmt,w
   637     06A2  00D9               	movwf	vfprintf@fmt
   638     06A3  305E               	movlw	(low (sprintf@ap| 0))& (0+255)
   639     06A4  00DA               	movwf	vfprintf@ap
   640     06A5  3060               	movlw	(low (sprintf@f| 0))& (0+255)
   641     06A6  120A  118A  26D6  120A  118A  	fcall	_vfprintf
   642     06AB                     l813:
   643     06AB  1283               	bcf	3,5	;RP0=0, select bank0
   644     06AC  1303               	bcf	3,6	;RP1=0, select bank0
   645     06AD  0862               	movf	sprintf@f+2,w
   646     06AE  075F               	addwf	sprintf@s,w
   647     06AF  00DD               	movwf	??_sprintf
   648     06B0  085D               	movf	??_sprintf,w
   649     06B1  0084               	movwf	4
   650     06B2  1383               	bcf	3,7	;select IRP bank0
   651     06B3  0180               	clrf	0
   652     06B4                     l619:
   653     06B4  0008               	return
   654     06B5                     __end_of_sprintf:
   655                           
   656                           	psect	text2
   657     06D6                     __ptext2:	
   658 ;; *************** function _vfprintf *****************
   659 ;; Defined at:
   660 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;  fp              1    wreg     PTR struct _IO_FILE
   663 ;;		 -> sprintf@f(11), 
   664 ;;  fmt             1    0[BANK0 ] PTR const unsigned char 
   665 ;;		 -> STR_2(7), STR_1(6), 
   666 ;;  ap              1    1[BANK0 ] PTR PTR void 
   667 ;;		 -> sprintf@ap(1), 
   668 ;; Auto vars:     Size  Location     Type
   669 ;;  fp              1    2[BANK0 ] PTR struct _IO_FILE
   670 ;;		 -> sprintf@f(11), 
   671 ;;  cfmt            1    3[BANK0 ] PTR unsigned char 
   672 ;;		 -> STR_2(7), STR_1(6), 
   673 ;; Return value:  Size  Location     Type
   674 ;;                  2    0[BANK0 ] int 
   675 ;; Registers used:
   676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   677 ;; Tracked objects:
   678 ;;		On entry : 0/0
   679 ;;		On exit  : 0/0
   680 ;;		Unchanged: 0/0
   681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   682 ;;      Params:         0       2       0       0       0
   683 ;;      Locals:         0       2       0       0       0
   684 ;;      Temps:          0       0       0       0       0
   685 ;;      Totals:         0       4       0       0       0
   686 ;;Total ram usage:        4 bytes
   687 ;; Hardware stack levels used: 1
   688 ;; Hardware stack levels required when called: 3
   689 ;; This function calls:
   690 ;;		_vfpfcnvrt
   691 ;; This function is called by:
   692 ;;		_sprintf
   693 ;; This function uses a non-reentrant model
   694 ;;
   695                           
   696     06D6                     _vfprintf:	
   697                           ;psect for function _vfprintf
   698                           
   699                           
   700                           ;incstack = 0
   701                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   702                           ;vfprintf@fp stored from wreg
   703     06D6  1283               	bcf	3,5	;RP0=0, select bank0
   704     06D7  1303               	bcf	3,6	;RP1=0, select bank0
   705     06D8  00DB               	movwf	vfprintf@fp
   706     06D9                     l795:
   707                           
   708                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
   709     06D9  0859               	movf	vfprintf@fmt,w
   710     06DA  00DC               	movwf	vfprintf@cfmt
   711                           
   712                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   713     06DB  2EE6               	goto	l799
   714     06DC                     l797:
   715                           
   716                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   717     06DC  305C               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
   718     06DD  00F8               	movwf	vfpfcnvrt@fmt
   719     06DE  085A               	movf	vfprintf@ap,w
   720     06DF  00F9               	movwf	vfpfcnvrt@ap
   721     06E0  085B               	movf	vfprintf@fp,w
   722     06E1  120A  118A  26F7  120A  118A  	fcall	_vfpfcnvrt
   723     06E6                     l799:
   724                           
   725                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   726     06E6  1283               	bcf	3,5	;RP0=0, select bank0
   727     06E7  1303               	bcf	3,6	;RP1=0, select bank0
   728     06E8  085C               	movf	vfprintf@cfmt,w
   729     06E9  0084               	movwf	4
   730     06EA  120A  118A  2003  120A  118A  	fcall	stringdir
   731     06EF  3A00               	xorlw	0
   732     06F0  1D03               	skipz
   733     06F1  2EF3               	goto	u161
   734     06F2  2EF4               	goto	u160
   735     06F3                     u161:
   736     06F3  2EDC               	goto	l797
   737     06F4                     u160:
   738     06F4                     l801:
   739                           
   740                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1835:  return 0;
   741     06F4  01D9               	clrf	?_vfprintf
   742     06F5  01DA               	clrf	?_vfprintf+1
   743     06F6                     l648:
   744     06F6  0008               	return
   745     06F7                     __end_of_vfprintf:
   746                           
   747                           	psect	text3
   748     06F7                     __ptext3:	
   749 ;; *************** function _vfpfcnvrt *****************
   750 ;; Defined at:
   751 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;  fp              1    wreg     PTR struct _IO_FILE
   754 ;;		 -> sprintf@f(11), 
   755 ;;  fmt             1    8[COMMON] PTR PTR unsigned char 
   756 ;;		 -> vfprintf@cfmt(1), 
   757 ;;  ap              1    9[COMMON] PTR PTR void 
   758 ;;		 -> sprintf@ap(1), 
   759 ;; Auto vars:     Size  Location     Type
   760 ;;  fp              1   12[COMMON] PTR struct _IO_FILE
   761 ;;		 -> sprintf@f(11), 
   762 ;;  cp              2    0        PTR unsigned char 
   763 ;;  done            1    0        _Bool 
   764 ;;  c               1    0        unsigned char 
   765 ;; Return value:  Size  Location     Type
   766 ;;                  1    wreg      void 
   767 ;; Registers used:
   768 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   774 ;;      Params:         2       0       0       0       0
   775 ;;      Locals:         1       0       0       0       0
   776 ;;      Temps:          2       0       0       0       0
   777 ;;      Totals:         5       0       0       0       0
   778 ;;Total ram usage:        5 bytes
   779 ;; Hardware stack levels used: 1
   780 ;; Hardware stack levels required when called: 2
   781 ;; This function calls:
   782 ;;		_fputc
   783 ;; This function is called by:
   784 ;;		_vfprintf
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788     06F7                     _vfpfcnvrt:	
   789                           ;psect for function _vfpfcnvrt
   790                           
   791                           
   792                           ;incstack = 0
   793                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   794                           ;vfpfcnvrt@fp stored from wreg
   795     06F7  00FC               	movwf	vfpfcnvrt@fp
   796     06F8                     l777:
   797                           
   798                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
   799     06F8  0878               	movf	vfpfcnvrt@fmt,w
   800     06F9  0084               	movwf	4
   801     06FA  1383               	bcf	3,7	;select IRP bank0
   802     06FB  0800               	movf	0,w
   803     06FC  0084               	movwf	4
   804     06FD  120A  118A  2003  120A  118A  	fcall	stringdir
   805     0702  3A25               	xorlw	37
   806     0703  1D03               	skipz
   807     0704  2F06               	goto	u151
   808     0705  2F07               	goto	u150
   809     0706                     u151:
   810     0706  2F22               	goto	l789
   811     0707                     u150:
   812     0707                     l779:
   813                           
   814                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
   815     0707  3001               	movlw	1
   816     0708  00FF               	movwf	btemp+1
   817     0709  0878               	movf	vfpfcnvrt@fmt,w
   818     070A  0084               	movwf	4
   819     070B  087F               	movf	btemp+1,w
   820     070C  0780               	addwf	0,f
   821     070D                     l781:
   822                           
   823                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
   824     070D  1283               	bcf	3,5	;RP0=0, select bank0
   825     070E  1303               	bcf	3,6	;RP1=0, select bank0
   826     070F  01C0               	clrf	_width
   827     0710  01C1               	clrf	_width+1
   828     0711  1003               	clrc
   829     0712  3000               	movlw	0
   830     0713  1803               	btfsc	3,0
   831     0714  3001               	movlw	1
   832     0715  00C4               	movwf	_flags
   833     0716                     l783:
   834                           
   835                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
   836     0716  30FF               	movlw	255
   837     0717  00C2               	movwf	_prec
   838     0718  30FF               	movlw	255
   839     0719  00C3               	movwf	_prec+1
   840     071A                     l785:
   841                           
   842                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
   843     071A  3001               	movlw	1
   844     071B  00FF               	movwf	btemp+1
   845     071C  0878               	movf	vfpfcnvrt@fmt,w
   846     071D  0084               	movwf	4
   847     071E  087F               	movf	btemp+1,w
   848     071F  1383               	bcf	3,7	;select IRP bank0
   849     0720  0780               	addwf	0,f
   850     0721  2F39               	goto	l642
   851     0722                     l789:
   852                           
   853                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
   854     0722  0878               	movf	vfpfcnvrt@fmt,w
   855     0723  0084               	movwf	4
   856     0724  0800               	movf	0,w
   857     0725  0084               	movwf	4
   858     0726  120A  118A  2003  120A  118A  	fcall	stringdir
   859     072B  00FA               	movwf	??_vfpfcnvrt
   860     072C  01FB               	clrf	??_vfpfcnvrt+1
   861     072D  087A               	movf	??_vfpfcnvrt,w
   862     072E  00F0               	movwf	fputc@c
   863     072F  087B               	movf	??_vfpfcnvrt+1,w
   864     0730  00F1               	movwf	fputc@c+1
   865     0731  087C               	movf	vfpfcnvrt@fp,w
   866     0732  00F2               	movwf	fputc@fp
   867     0733  120A  118A  273A  120A  118A  	fcall	_fputc
   868     0738  2F1A               	goto	l785
   869     0739                     l642:
   870     0739  0008               	return
   871     073A                     __end_of_vfpfcnvrt:
   872                           
   873                           	psect	text4
   874     073A                     __ptext4:	
   875 ;; *************** function _fputc *****************
   876 ;; Defined at:
   877 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;  c               2    0[COMMON] int 
   880 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
   881 ;;		 -> sprintf@f(11), 
   882 ;; Auto vars:     Size  Location     Type
   883 ;;		None
   884 ;; Return value:  Size  Location     Type
   885 ;;                  2    0[COMMON] int 
   886 ;; Registers used:
   887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   893 ;;      Params:         3       0       0       0       0
   894 ;;      Locals:         0       0       0       0       0
   895 ;;      Temps:          5       0       0       0       0
   896 ;;      Totals:         8       0       0       0       0
   897 ;;Total ram usage:        8 bytes
   898 ;; Hardware stack levels used: 1
   899 ;; Hardware stack levels required when called: 1
   900 ;; This function calls:
   901 ;;		_putch
   902 ;; This function is called by:
   903 ;;		_vfpfcnvrt
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907     073A                     _fputc:	
   908                           ;psect for function _fputc
   909                           
   910     073A                     l763:	
   911                           ;incstack = 0
   912                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   913                           
   914     073A  0872               	movf	fputc@fp,w
   915     073B  1903               	btfsc	3,2
   916     073C  2F3E               	goto	u111
   917     073D  2F3F               	goto	u110
   918     073E                     u111:
   919     073E  2F44               	goto	l767
   920     073F                     u110:
   921     073F                     l765:
   922     073F  0872               	movf	fputc@fp,w
   923     0740  1D03               	btfss	3,2
   924     0741  2F43               	goto	u121
   925     0742  2F44               	goto	u120
   926     0743                     u121:
   927     0743  2F4B               	goto	l769
   928     0744                     u120:
   929     0744                     l767:
   930     0744  0870               	movf	fputc@c,w
   931     0745  120A  118A  266A  120A  118A  	fcall	_putch
   932     074A  2F8F               	goto	l660
   933     074B                     l769:
   934     074B  0872               	movf	fputc@fp,w
   935     074C  3E09               	addlw	9
   936     074D  0084               	movwf	4
   937     074E  1383               	bcf	3,7	;select IRP bank0
   938     074F  0800               	movf	0,w
   939     0750  00F3               	movwf	??_fputc
   940     0751  0A84               	incf	4,f
   941     0752  0800               	movf	0,w
   942     0753  00F4               	movwf	??_fputc+1
   943     0754  0873               	movf	??_fputc,w
   944     0755  0474               	iorwf	??_fputc+1,w
   945     0756  1903               	btfsc	3,2
   946     0757  2F59               	goto	u131
   947     0758  2F5A               	goto	u130
   948     0759                     u131:
   949     0759  2F78               	goto	l773
   950     075A                     u130:
   951     075A                     l771:
   952     075A  0872               	movf	fputc@fp,w
   953     075B  3E09               	addlw	9
   954     075C  0084               	movwf	4
   955     075D  0800               	movf	0,w
   956     075E  00F3               	movwf	??_fputc
   957     075F  0A84               	incf	4,f
   958     0760  0800               	movf	0,w
   959     0761  00F4               	movwf	??_fputc+1
   960     0762  0872               	movf	fputc@fp,w
   961     0763  3E02               	addlw	2
   962     0764  0084               	movwf	4
   963     0765  0800               	movf	0,w
   964     0766  00F5               	movwf	??_fputc+2
   965     0767  0A84               	incf	4,f
   966     0768  0800               	movf	0,w
   967     0769  00F6               	movwf	??_fputc+3
   968     076A  0876               	movf	??_fputc+3,w
   969     076B  3A80               	xorlw	128
   970     076C  00F7               	movwf	??_fputc+4
   971     076D  0874               	movf	??_fputc+1,w
   972     076E  3A80               	xorlw	128
   973     076F  0277               	subwf	??_fputc+4,w
   974     0770  1D03               	skipz
   975     0771  2F74               	goto	u145
   976     0772  0873               	movf	??_fputc,w
   977     0773  0275               	subwf	??_fputc+2,w
   978     0774                     u145:
   979     0774  1803               	skipnc
   980     0775  2F77               	goto	u141
   981     0776  2F78               	goto	u140
   982     0777                     u141:
   983     0777  2F8F               	goto	l660
   984     0778                     u140:
   985     0778                     l773:
   986     0778  0872               	movf	fputc@fp,w
   987     0779  3E02               	addlw	2
   988     077A  0084               	movwf	4
   989     077B  1383               	bcf	3,7	;select IRP bank0
   990     077C  0800               	movf	0,w
   991     077D  00F3               	movwf	??_fputc
   992     077E  0872               	movf	fputc@fp,w
   993     077F  0084               	movwf	4
   994     0780  0800               	movf	0,w
   995     0781  0773               	addwf	??_fputc,w
   996     0782  00F4               	movwf	??_fputc+1
   997     0783  0874               	movf	??_fputc+1,w
   998     0784  0084               	movwf	4
   999     0785  0870               	movf	fputc@c,w
  1000     0786  0080               	movwf	0
  1001     0787  0872               	movf	fputc@fp,w
  1002     0788  3E02               	addlw	2
  1003     0789  0084               	movwf	4
  1004     078A  3001               	movlw	1
  1005     078B  0780               	addwf	0,f
  1006     078C  0A84               	incf	4,f
  1007     078D  1803               	skipnc
  1008     078E  0A80               	incf	0,f
  1009     078F                     l660:
  1010     078F  0008               	return
  1011     0790                     __end_of_fputc:
  1012                           
  1013                           	psect	text5
  1014     066A                     __ptext5:	
  1015 ;; *************** function _putch *****************
  1016 ;; Defined at:
  1017 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\putch.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;  c               1    wreg     unsigned char 
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;  c               1    0[COMMON] unsigned char 
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		wreg
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1031 ;;      Params:         0       0       0       0       0
  1032 ;;      Locals:         0       0       0       0       0
  1033 ;;      Temps:          0       0       0       0       0
  1034 ;;      Totals:         0       0       0       0       0
  1035 ;;Total ram usage:        0 bytes
  1036 ;; Hardware stack levels used: 1
  1037 ;; This function calls:
  1038 ;;		Nothing
  1039 ;; This function is called by:
  1040 ;;		_fputc
  1041 ;; This function uses a non-reentrant model
  1042 ;;
  1043                           
  1044     066A                     _putch:	
  1045                           ;psect for function _putch
  1046                           
  1047     066A                     l671:	
  1048                           ;incstack = 0
  1049                           ; Regs used in _putch: [wreg]
  1050                           
  1051     066A  0008               	return
  1052     066B                     __end_of_putch:
  1053                           
  1054                           	psect	text6
  1055     06B5                     __ptext6:	
  1056 ;; *************** function _SPI_Write_String *****************
  1057 ;; Defined at:
  1058 ;;		line 85 in file "main.c"
  1059 ;; Parameters:    Size  Location     Type
  1060 ;;  text            1    wreg     PTR unsigned char 
  1061 ;;		 -> string(20), 
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  text            1    4[COMMON] PTR unsigned char 
  1064 ;;		 -> string(20), 
  1065 ;;  i               2    2[COMMON] unsigned short 
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      void 
  1068 ;; Registers used:
  1069 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1075 ;;      Params:         0       0       0       0       0
  1076 ;;      Locals:         3       0       0       0       0
  1077 ;;      Temps:          1       0       0       0       0
  1078 ;;      Totals:         4       0       0       0       0
  1079 ;;Total ram usage:        4 bytes
  1080 ;; Hardware stack levels used: 1
  1081 ;; Hardware stack levels required when called: 1
  1082 ;; This function calls:
  1083 ;;		_Write_data
  1084 ;; This function is called by:
  1085 ;;		_main
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089     06B5                     _SPI_Write_String:	
  1090                           ;psect for function _SPI_Write_String
  1091                           
  1092                           
  1093                           ;incstack = 0
  1094                           ; Regs used in _SPI_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1095                           ;SPI_Write_String@text stored from wreg
  1096     06B5  00F4               	movwf	SPI_Write_String@text
  1097     06B6                     l733:
  1098                           
  1099                           ;main.c: 85: void SPI_Write_String(char *text);main.c: 86: {;main.c: 87:   uint16_t i;;m
      +                          ain.c: 88:   for(i=0;text[i]!='\0';i++)
  1100     06B6  01F2               	clrf	SPI_Write_String@i
  1101     06B7  01F3               	clrf	SPI_Write_String@i+1
  1102     06B8  2ECA               	goto	l739
  1103     06B9                     l735:
  1104                           
  1105                           ;main.c: 89:     Write_data(text[i]);
  1106     06B9  0872               	movf	SPI_Write_String@i,w
  1107     06BA  0774               	addwf	SPI_Write_String@text,w
  1108     06BB  00F1               	movwf	??_SPI_Write_String
  1109     06BC  0871               	movf	??_SPI_Write_String,w
  1110     06BD  0084               	movwf	4
  1111     06BE  0800               	movf	0,w
  1112     06BF  120A  118A  266B  120A  118A  	fcall	_Write_data
  1113     06C4                     l737:
  1114     06C4  3001               	movlw	1
  1115     06C5  07F2               	addwf	SPI_Write_String@i,f
  1116     06C6  1803               	skipnc
  1117     06C7  0AF3               	incf	SPI_Write_String@i+1,f
  1118     06C8  3000               	movlw	0
  1119     06C9  07F3               	addwf	SPI_Write_String@i+1,f
  1120     06CA                     l739:
  1121     06CA  0872               	movf	SPI_Write_String@i,w
  1122     06CB  0774               	addwf	SPI_Write_String@text,w
  1123     06CC  00F1               	movwf	??_SPI_Write_String
  1124     06CD  0871               	movf	??_SPI_Write_String,w
  1125     06CE  0084               	movwf	4
  1126     06CF  1383               	bcf	3,7	;select IRP bank0
  1127     06D0  0800               	movf	0,w
  1128     06D1  1D03               	btfss	3,2
  1129     06D2  2ED4               	goto	u71
  1130     06D3  2ED5               	goto	u70
  1131     06D4                     u71:
  1132     06D4  2EB9               	goto	l735
  1133     06D5                     u70:
  1134     06D5                     l70:
  1135     06D5  0008               	return
  1136     06D6                     __end_of_SPI_Write_String:
  1137                           
  1138                           	psect	text7
  1139     066B                     __ptext7:	
  1140 ;; *************** function _Write_data *****************
  1141 ;; Defined at:
  1142 ;;		line 81 in file "main.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;  data            1    wreg     unsigned char 
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;  data            1    0[COMMON] unsigned char 
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  1    wreg      void 
  1149 ;; Registers used:
  1150 ;;		wreg
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1156 ;;      Params:         0       0       0       0       0
  1157 ;;      Locals:         1       0       0       0       0
  1158 ;;      Temps:          0       0       0       0       0
  1159 ;;      Totals:         1       0       0       0       0
  1160 ;;Total ram usage:        1 bytes
  1161 ;; Hardware stack levels used: 1
  1162 ;; This function calls:
  1163 ;;		Nothing
  1164 ;; This function is called by:
  1165 ;;		_SPI_Write_String
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169     066B                     _Write_data:	
  1170                           ;psect for function _Write_data
  1171                           
  1172                           
  1173                           ;incstack = 0
  1174                           ; Regs used in _Write_data: [wreg]
  1175                           ;Write_data@data stored from wreg
  1176     066B  00F0               	movwf	Write_data@data
  1177     066C                     l705:
  1178                           
  1179                           ;main.c: 82: SSPBUF=data;
  1180     066C  0870               	movf	Write_data@data,w
  1181     066D  1283               	bcf	3,5	;RP0=0, select bank0
  1182     066E  1303               	bcf	3,6	;RP1=0, select bank0
  1183     066F  0093               	movwf	19	;volatile
  1184     0670                     l64:
  1185     0670  0008               	return
  1186     0671                     __end_of_Write_data:
  1187                           
  1188                           	psect	text8
  1189     0686                     __ptext8:	
  1190 ;; *************** function _SPI_Master_init *****************
  1191 ;; Defined at:
  1192 ;;		line 56 in file "main.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;		None
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;		None
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  1    wreg      void 
  1199 ;; Registers used:
  1200 ;;		None
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1206 ;;      Params:         0       0       0       0       0
  1207 ;;      Locals:         0       0       0       0       0
  1208 ;;      Temps:          0       0       0       0       0
  1209 ;;      Totals:         0       0       0       0       0
  1210 ;;Total ram usage:        0 bytes
  1211 ;; Hardware stack levels used: 1
  1212 ;; This function calls:
  1213 ;;		Nothing
  1214 ;; This function is called by:
  1215 ;;		_main
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219     0686                     _SPI_Master_init:	
  1220                           ;psect for function _SPI_Master_init
  1221                           
  1222     0686                     l719:	
  1223                           ;incstack = 0
  1224                           ; Regs used in _SPI_Master_init: []
  1225                           
  1226                           
  1227                           ;main.c: 58: SSPM3=0;
  1228     0686  1283               	bcf	3,5	;RP0=0, select bank0
  1229     0687  1303               	bcf	3,6	;RP1=0, select bank0
  1230     0688  1194               	bcf	20,3	;volatile
  1231                           
  1232                           ;main.c: 59: SSPM2=0;
  1233     0689  1114               	bcf	20,2	;volatile
  1234                           
  1235                           ;main.c: 60: SSPM1=0;
  1236     068A  1094               	bcf	20,1	;volatile
  1237                           
  1238                           ;main.c: 61: SSPM0=0;
  1239     068B  1014               	bcf	20,0	;volatile
  1240                           
  1241                           ;main.c: 64: SSPEN=1;
  1242     068C  1694               	bsf	20,5	;volatile
  1243                           
  1244                           ;main.c: 67: CKP=0;
  1245     068D  1214               	bcf	20,4	;volatile
  1246                           
  1247                           ;main.c: 68: CKE=0;
  1248     068E  1683               	bsf	3,5	;RP0=1, select bank1
  1249     068F  1303               	bcf	3,6	;RP1=0, select bank1
  1250     0690  1314               	bcf	20,6	;volatile
  1251                           
  1252                           ;main.c: 71: SMP=0;
  1253     0691  1394               	bcf	20,7	;volatile
  1254                           
  1255                           ;main.c: 74: TRISC3=0;
  1256     0692  1187               	bcf	7,3	;volatile
  1257                           
  1258                           ;main.c: 75: TRISC4=1;
  1259     0693  1607               	bsf	7,4	;volatile
  1260                           
  1261                           ;main.c: 76: TRISC5=0;
  1262     0694  1287               	bcf	7,5	;volatile
  1263     0695                     l61:
  1264     0695  0008               	return
  1265     0696                     __end_of_SPI_Master_init:
  1266                           
  1267                           	psect	text9
  1268     0679                     __ptext9:	
  1269 ;; *************** function _Port_Init *****************
  1270 ;; Defined at:
  1271 ;;		line 27 in file "main.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;		None
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  1    wreg      void 
  1278 ;; Registers used:
  1279 ;;		wreg, status,2, status,0, btemp+1
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1285 ;;      Params:         0       0       0       0       0
  1286 ;;      Locals:         0       0       0       0       0
  1287 ;;      Temps:          0       0       0       0       0
  1288 ;;      Totals:         0       0       0       0       0
  1289 ;;Total ram usage:        0 bytes
  1290 ;; Hardware stack levels used: 1
  1291 ;; This function calls:
  1292 ;;		Nothing
  1293 ;; This function is called by:
  1294 ;;		_main
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298     0679                     _Port_Init:	
  1299                           ;psect for function _Port_Init
  1300                           
  1301     0679                     l717:	
  1302                           ;incstack = 0
  1303                           ; Regs used in _Port_Init: [wreg+status,2+status,0+btemp+1]
  1304                           
  1305                           
  1306                           ;main.c: 28:    TRISB|=0x07;
  1307     0679  3007               	movlw	7
  1308     067A  00FF               	movwf	btemp+1
  1309     067B  087F               	movf	btemp+1,w
  1310     067C  1683               	bsf	3,5	;RP0=1, select bank1
  1311     067D  1303               	bcf	3,6	;RP1=0, select bank1
  1312     067E  0486               	iorwf	6,f	;volatile
  1313                           
  1314                           ;main.c: 29:    PORTB&=~0x07;
  1315     067F  30F8               	movlw	248
  1316     0680  00FF               	movwf	btemp+1
  1317     0681  087F               	movf	btemp+1,w
  1318     0682  1283               	bcf	3,5	;RP0=0, select bank0
  1319     0683  1303               	bcf	3,6	;RP1=0, select bank0
  1320     0684  0586               	andwf	6,f	;volatile
  1321     0685                     l47:
  1322     0685  0008               	return
  1323     0686                     __end_of_Port_Init:
  1324     007E                     btemp	set	126	;btemp
  1325     007E                     wtemp0	set	126
  1326                           
  1327                           	psect	config
  1328                           
  1329                           ;Config register CONFIG @ 0x2007
  1330                           ;	Oscillator Selection bits
  1331                           ;	FOSC = XT, XT oscillator
  1332                           ;	Watchdog Timer Enable bit
  1333                           ;	WDTE = OFF, WDT disabled
  1334                           ;	Power-up Timer Enable bit
  1335                           ;	PWRTE = ON, PWRT enabled
  1336                           ;	Brown-out Reset Enable bit
  1337                           ;	BOREN = ON, BOR enabled
  1338                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1339                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1340                           ;	Data EEPROM Memory Code Protection bit
  1341                           ;	CPD = OFF, Data EEPROM code protection off
  1342                           ;	Flash Program Memory Write Enable bits
  1343                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1344                           ;	In-Circuit Debugger Mode bit
  1345                           ;	DEBUG = 0x1, unprogrammed default
  1346                           ;	Flash Program Memory Code Protection bit
  1347                           ;	CP = OFF, Code protection off
  1348     2007                     	org	8199
  1349     2007  3F71               	dw	16241

Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         57
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     21      78
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 0

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    S518$buffer	PTR unsigned char  size(1) Largest target is 0

    S518$source	PTR const unsigned char  size(1) Largest target is 0

    SPI_Write_String@text	PTR unsigned char  size(1) Largest target is 20
		 -> string(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMMON[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_1(CODE[6]), STR_2(CODE[7]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> string(BANK0[20]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 7
		 -> STR_1(CODE[6]), STR_2(CODE[7]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_1(CODE[6]), STR_2(CODE[7]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_sprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _SPI_Write_String->_Write_data

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1771
                                             18 BANK0      3     3      0
                          _Port_Init
                    _SPI_Master_init
                   _SPI_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             17    16      1    1666
                                             13 COMMON     1     0      1
                                              4 BANK0     14    14      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     2      2    1251
                                              0 BANK0      4     2      2
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                            9     7      2     947
                                              8 COMMON     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     630
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_Write_String                                     4     4      0     105
                                              1 COMMON     4     4      0
                         _Write_data
 ---------------------------------------------------------------------------------
 (2) _Write_data                                           1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPI_Master_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Port_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Port_Init
   _SPI_Master_init
   _SPI_Write_String
     _Write_data
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      5C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     15      4E       5       97.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      5C      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue May 14 21:02:18 2024

                       pc 0002           _SPI_Master_init 0686                        l61 0695  
                      l70 06D5                        l47 0685                        l64 0670  
                      u70 06D5                        u71 06D4                        fsr 0004  
                     l705 066C                       l801 06F4                       l642 0739  
                     l619 06B4                       l811 06A1                       l660 078F  
                     l717 0679                       l733 06B6                       l813 06AB  
                     l805 0699                       l821 079A                       l719 0686  
                     l735 06B9                       l671 066A                       l807 069D  
                     l831 07C5                       l823 07A0                       l648 06F6  
                     l737 06C4                       l809 069F                       l833 07D4  
                     l825 07A8                       l817 0790                       l739 06CA  
                     l771 075A                       l763 073A                       l835 07DA  
                     l827 07B7                       l819 0795                       l773 0778  
                     l765 073F                       l781 070D                       l837 07E0  
                     l829 07BD                       l767 0744                       l783 0716  
                     _CKE 04A6                       l769 074B                       l785 071A  
                     l777 06F8                       l779 0707                       l795 06D9  
                     l789 0722                       l797 06DC                       l799 06E6  
                     _CKP 00A4                       _RB0 0030                       _RB1 0031  
                     _RB2 0032                       u110 073F                       u111 073E  
                     u120 0744                       u121 0743                       u130 075A  
                     u131 0759                       u140 0778                       u141 0777  
                     u150 0707                       u151 0706                       u207 07B0  
                     u160 06F4                       u145 0774                       u161 06F3  
                     u217 07CD                       u170 07A0                       u227 07E8  
                     u171 079F                       u180 07BD                       u181 07BC  
                     u190 07DA                       u191 07D9                       _SMP 04A7  
                     fsr0 0004                       indf 0000         ?_SPI_Write_String 0070  
                    STR_1 0010                      STR_2 0009        ??_SPI_Write_String 0071  
                    _dbuf 0020                      _main 0790                      _prec 0042  
                    btemp 007E                      start 0000                     ?_main 0070  
            vfpfcnvrt@fmt 0078                     _PORTB 0006                     _SSPM0 00A0  
                   _SSPM1 00A1                     _SSPM2 00A2                     _SSPM3 00A3  
                   _TRISB 0086                     _SSPEN 00A5                     _flags 0044  
                   _fputc 073A                     _width 0040                     _putch 066A  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __end_of_sprintf 06B5   __end_of_SPI_Master_init 0696           __initialization 07F3  
            __end_of_main 07F3                    ??_main 006B                    ?_fputc 0070  
                  ?_putch 0070                    _TRISC3 043B                    _TRISC4 043C  
                  _TRISC5 043D                    _SSPBUF 0013              vfprintf@cfmt 005C  
                  _string 0045                    fputc@c 0070                    putch@c 0070  
        __end_of_vfprintf 06F7                 ??_sprintf 005D   __end_of__initialization 07FC  
        ?_SPI_Master_init 0070            __pcstackCOMMON 0070             __end_of_fputc 0790  
              _Write_data 066B             __end_of_putch 066B                   ??_fputc 0073  
                 ??_putch 0070                __pbssBANK0 0020         __end_of_Port_Init 0686  
              __pmaintext 0790                __stringtab 0003            Write_data@data 0070  
             ?_Write_data 0070                 ?_vfprintf 0059                   __ptext1 0696  
                 __ptext2 06D6                   __ptext3 06F7                   __ptext4 073A  
                 __ptext5 066A                   __ptext6 06B5                   __ptext7 066B  
                 __ptext8 0686                   __ptext9 0679                   _sprintf 0696  
                 clrloop0 0672      end_of_initialization 07FC                   fputc@fp 0072  
       __end_of_vfpfcnvrt 073A         SPI_Write_String@i 0072                ??_vfprintf 007D  
        _SPI_Write_String 06B5               vfpfcnvrt@ap 0079               vfpfcnvrt@fp 007C  
     start_initialization 07F3               vfprintf@fmt 0059                 _Port_Init 0679  
               ___latbits 0002             __pcstackBANK0 0059                ?_Port_Init 0070  
            ??_Write_data 0070                 __pstrings 0003                  ?_sprintf 007D  
      __end_of_Write_data 0671                 clear_ram0 0671                 _vfpfcnvrt 06F7  
             __stringbase 0008      SPI_Write_String@text 0074         ??_SPI_Master_init 0070  
__end_of_SPI_Write_String 06D6                vfprintf@ap 005A                vfprintf@fp 005B  
             ??_Port_Init 0070                ?_vfpfcnvrt 0078        __end_of__stringtab 0009  
              sprintf@fmt 007D                  _vfprintf 06D6                 sprintf@ap 005E  
               stringcode 0003               ??_vfpfcnvrt 007A                  sprintf@f 0060  
                sprintf@s 005F                  stringdir 0003                  stringtab 0003  
