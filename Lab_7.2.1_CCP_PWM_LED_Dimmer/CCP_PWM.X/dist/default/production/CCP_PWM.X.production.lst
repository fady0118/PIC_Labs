

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sun Apr 28 01:45:38 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12     0000                     
    13                           ; Generated 12/10/2023 GMT
    14                           ; 
    15                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution. Publication is not required when
    29                           ;        this file is used in an embedded application.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F877A Definitions
    45                           ; 
    46                           ; SFR Addresses
    47     0000                     	;# 
    48     0001                     	;# 
    49     0002                     	;# 
    50     0003                     	;# 
    51     0004                     	;# 
    52     0005                     	;# 
    53     0006                     	;# 
    54     0007                     	;# 
    55     0008                     	;# 
    56     0009                     	;# 
    57     000A                     	;# 
    58     000B                     	;# 
    59     000C                     	;# 
    60     000D                     	;# 
    61     000E                     	;# 
    62     000E                     	;# 
    63     000F                     	;# 
    64     0010                     	;# 
    65     0011                     	;# 
    66     0012                     	;# 
    67     0013                     	;# 
    68     0014                     	;# 
    69     0015                     	;# 
    70     0015                     	;# 
    71     0016                     	;# 
    72     0017                     	;# 
    73     0018                     	;# 
    74     0019                     	;# 
    75     001A                     	;# 
    76     001B                     	;# 
    77     001B                     	;# 
    78     001C                     	;# 
    79     001D                     	;# 
    80     001E                     	;# 
    81     001F                     	;# 
    82     0081                     	;# 
    83     0085                     	;# 
    84     0086                     	;# 
    85     0087                     	;# 
    86     0088                     	;# 
    87     0089                     	;# 
    88     008C                     	;# 
    89     008D                     	;# 
    90     008E                     	;# 
    91     0091                     	;# 
    92     0092                     	;# 
    93     0093                     	;# 
    94     0094                     	;# 
    95     0098                     	;# 
    96     0099                     	;# 
    97     009C                     	;# 
    98     009D                     	;# 
    99     009E                     	;# 
   100     009F                     	;# 
   101     010C                     	;# 
   102     010D                     	;# 
   103     010E                     	;# 
   104     010F                     	;# 
   105     018C                     	;# 
   106     018D                     	;# 
   107     0000                     	;# 
   108     0001                     	;# 
   109     0002                     	;# 
   110     0003                     	;# 
   111     0004                     	;# 
   112     0005                     	;# 
   113     0006                     	;# 
   114     0007                     	;# 
   115     0008                     	;# 
   116     0009                     	;# 
   117     000A                     	;# 
   118     000B                     	;# 
   119     000C                     	;# 
   120     000D                     	;# 
   121     000E                     	;# 
   122     000E                     	;# 
   123     000F                     	;# 
   124     0010                     	;# 
   125     0011                     	;# 
   126     0012                     	;# 
   127     0013                     	;# 
   128     0014                     	;# 
   129     0015                     	;# 
   130     0015                     	;# 
   131     0016                     	;# 
   132     0017                     	;# 
   133     0018                     	;# 
   134     0019                     	;# 
   135     001A                     	;# 
   136     001B                     	;# 
   137     001B                     	;# 
   138     001C                     	;# 
   139     001D                     	;# 
   140     001E                     	;# 
   141     001F                     	;# 
   142     0081                     	;# 
   143     0085                     	;# 
   144     0086                     	;# 
   145     0087                     	;# 
   146     0088                     	;# 
   147     0089                     	;# 
   148     008C                     	;# 
   149     008D                     	;# 
   150     008E                     	;# 
   151     0091                     	;# 
   152     0092                     	;# 
   153     0093                     	;# 
   154     0094                     	;# 
   155     0098                     	;# 
   156     0099                     	;# 
   157     009C                     	;# 
   158     009D                     	;# 
   159     009E                     	;# 
   160     009F                     	;# 
   161     010C                     	;# 
   162     010D                     	;# 
   163     010E                     	;# 
   164     010F                     	;# 
   165     018C                     	;# 
   166     018D                     	;# 
   167     0015                     _CCPR1L	set	21
   168     0017                     _CCP1CON	set	23
   169     0012                     _T2CON	set	18
   170     00BD                     _CCP1X	set	189
   171     00BC                     _CCP1Y	set	188
   172     0092                     _PR2	set	146
   173     0087                     _TRISC	set	135
   174                           
   175                           	psect	cinit
   176     07FC                     start_initialization:	
   177                           ; #config settings
   178                           
   179     07FC                     __initialization:
   180     07FC                     end_of_initialization:	
   181                           ;End of C runtime variable initialization code
   182                           
   183     07FC                     __end_of__initialization:
   184     07FC  0183               	clrf	3
   185     07FD  120A  118A  2F99   	ljmp	_main	;jump to C main() function
   186                           
   187                           	psect	cstackCOMMON
   188     0070                     __pcstackCOMMON:
   189     0070                     ?_PWM_duty_cycle:
   190     0070                     ?_Timer2_Init:	
   191                           ; 1 bytes @ 0x0
   192                           
   193     0070                     ??_Timer2_Init:	
   194                           ; 1 bytes @ 0x0
   195                           
   196     0070                     ?_CCP_PWM:	
   197                           ; 1 bytes @ 0x0
   198                           
   199     0070                     ?_main:	
   200                           ; 1 bytes @ 0x0
   201                           
   202     0070                     PWM_duty_cycle@DC:	
   203                           ; 1 bytes @ 0x0
   204                           
   205                           
   206                           ; 2 bytes @ 0x0
   207     0070                     	ds	2
   208     0072                     ??_PWM_duty_cycle:
   209                           
   210                           ; 1 bytes @ 0x2
   211     0072                     	ds	2
   212     0074                     ??_CCP_PWM:
   213     0074                     ??_main:	
   214                           ; 1 bytes @ 0x4
   215                           
   216                           
   217                           ; 1 bytes @ 0x4
   218     0074                     	ds	2
   219     0076                     main@DC:
   220                           
   221                           ; 2 bytes @ 0x6
   222     0076                     	ds	2
   223                           
   224                           	psect	maintext
   225     0799                     __pmaintext:	
   226 ;;
   227 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   228 ;;
   229 ;; *************** function _main *****************
   230 ;; Defined at:
   231 ;;		line 31 in file "main.c"
   232 ;; Parameters:    Size  Location     Type
   233 ;;		None
   234 ;; Auto vars:     Size  Location     Type
   235 ;;  DC              2    6[COMMON] unsigned short 
   236 ;; Return value:  Size  Location     Type
   237 ;;                  1    wreg      void 
   238 ;; Registers used:
   239 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   240 ;; Tracked objects:
   241 ;;		On entry : B00/0
   242 ;;		On exit  : 0/0
   243 ;;		Unchanged: 0/0
   244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   245 ;;      Params:         0       0       0       0       0
   246 ;;      Locals:         2       0       0       0       0
   247 ;;      Temps:          2       0       0       0       0
   248 ;;      Totals:         4       0       0       0       0
   249 ;;Total ram usage:        4 bytes
   250 ;; Hardware stack levels required when called: 2
   251 ;; This function calls:
   252 ;;		_CCP_PWM
   253 ;;		_PWM_duty_cycle
   254 ;;		_Timer2_Init
   255 ;; This function is called by:
   256 ;;		Startup code after reset
   257 ;; This function uses a non-reentrant model
   258 ;;
   259                           
   260     0799                     _main:	
   261                           ;psect for function _main
   262                           
   263     0799                     l633:	
   264                           ;incstack = 0
   265                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   266                           
   267                           
   268                           ;main.c: 32: Timer2_Init();
   269     0799  120A  118A  2762  120A  118A  	fcall	_Timer2_Init
   270                           
   271                           ;main.c: 33: CCP_PWM();
   272     079E  120A  118A  276A  120A  118A  	fcall	_CCP_PWM
   273     07A3                     l635:
   274                           
   275                           ;main.c: 36:     DC=0;
   276     07A3  01F6               	clrf	main@DC
   277     07A4  01F7               	clrf	main@DC+1
   278                           
   279                           ;main.c: 37:     while(DC<800){
   280     07A5  2FBE               	goto	l643
   281     07A6                     l637:
   282                           
   283                           ;main.c: 38:     PWM_duty_cycle(DC);
   284     07A6  0877               	movf	main@DC+1,w
   285     07A7  00F1               	movwf	PWM_duty_cycle@DC+1
   286     07A8  0876               	movf	main@DC,w
   287     07A9  00F0               	movwf	PWM_duty_cycle@DC
   288     07AA  120A  118A  2781  120A  118A  	fcall	_PWM_duty_cycle
   289     07AF                     l639:
   290                           
   291                           ;main.c: 39:     DC++;
   292     07AF  3001               	movlw	1
   293     07B0  07F6               	addwf	main@DC,f
   294     07B1  1803               	skipnc
   295     07B2  0AF7               	incf	main@DC+1,f
   296     07B3  3000               	movlw	0
   297     07B4  07F7               	addwf	main@DC+1,f
   298     07B5                     l641:
   299                           
   300                           ;main.c: 40:     _delay((unsigned long)((2)*(4000000/4000.0)));
   301     07B5  3003               	movlw	3
   302     07B6  00F5               	movwf	??_main+1
   303     07B7  3097               	movlw	151
   304     07B8  00F4               	movwf	??_main
   305     07B9                     u97:
   306     07B9  0BF4               	decfsz	??_main,f
   307     07BA  2FB9               	goto	u97
   308     07BB  0BF5               	decfsz	??_main+1,f
   309     07BC  2FB9               	goto	u97
   310     07BD  2FBE               	nop2
   311     07BE                     l643:
   312                           
   313                           ;main.c: 37:     while(DC<800){
   314     07BE  3003               	movlw	3
   315     07BF  0277               	subwf	main@DC+1,w
   316     07C0  3020               	movlw	32
   317     07C1  1903               	skipnz
   318     07C2  0276               	subwf	main@DC,w
   319     07C3  1C03               	skipc
   320     07C4  2FC6               	goto	u71
   321     07C5  2FC7               	goto	u70
   322     07C6                     u71:
   323     07C6  2FA6               	goto	l637
   324     07C7                     u70:
   325     07C7                     l645:
   326                           
   327                           ;main.c: 43:     _delay((unsigned long)((100)*(4000000/4000.0)));
   328     07C7  3082               	movlw	130
   329     07C8  00F5               	movwf	??_main+1
   330     07C9  30DD               	movlw	221
   331     07CA  00F4               	movwf	??_main
   332     07CB                     u107:
   333     07CB  0BF4               	decfsz	??_main,f
   334     07CC  2FCB               	goto	u107
   335     07CD  0BF5               	decfsz	??_main+1,f
   336     07CE  2FCB               	goto	u107
   337     07CF  2FD0               	nop2
   338                           
   339                           ;main.c: 45:     while(DC>0){
   340     07D0  2FE9               	goto	l653
   341     07D1                     l647:
   342                           
   343                           ;main.c: 46:     PWM_duty_cycle(DC);
   344     07D1  0877               	movf	main@DC+1,w
   345     07D2  00F1               	movwf	PWM_duty_cycle@DC+1
   346     07D3  0876               	movf	main@DC,w
   347     07D4  00F0               	movwf	PWM_duty_cycle@DC
   348     07D5  120A  118A  2781  120A  118A  	fcall	_PWM_duty_cycle
   349     07DA                     l649:
   350                           
   351                           ;main.c: 47:     DC--;
   352     07DA  3001               	movlw	1
   353     07DB  02F6               	subwf	main@DC,f
   354     07DC  3000               	movlw	0
   355     07DD  1C03               	skipc
   356     07DE  03F7               	decf	main@DC+1,f
   357     07DF  02F7               	subwf	main@DC+1,f
   358     07E0                     l651:
   359                           
   360                           ;main.c: 48:     _delay((unsigned long)((2)*(4000000/4000.0)));
   361     07E0  3003               	movlw	3
   362     07E1  00F5               	movwf	??_main+1
   363     07E2  3097               	movlw	151
   364     07E3  00F4               	movwf	??_main
   365     07E4                     u117:
   366     07E4  0BF4               	decfsz	??_main,f
   367     07E5  2FE4               	goto	u117
   368     07E6  0BF5               	decfsz	??_main+1,f
   369     07E7  2FE4               	goto	u117
   370     07E8  2FE9               	nop2
   371     07E9                     l653:
   372                           
   373                           ;main.c: 45:     while(DC>0){
   374     07E9  0876               	movf	main@DC,w
   375     07EA  0477               	iorwf	main@DC+1,w
   376     07EB  1D03               	btfss	3,2
   377     07EC  2FEE               	goto	u81
   378     07ED  2FEF               	goto	u80
   379     07EE                     u81:
   380     07EE  2FD1               	goto	l647
   381     07EF                     u80:
   382     07EF                     l655:
   383                           
   384                           ;main.c: 51:     _delay((unsigned long)((100)*(4000000/4000.0)));
   385     07EF  3082               	movlw	130
   386     07F0  00F5               	movwf	??_main+1
   387     07F1  30DD               	movlw	221
   388     07F2  00F4               	movwf	??_main
   389     07F3                     u127:
   390     07F3  0BF4               	decfsz	??_main,f
   391     07F4  2FF3               	goto	u127
   392     07F5  0BF5               	decfsz	??_main+1,f
   393     07F6  2FF3               	goto	u127
   394     07F7  2FF8               	nop2
   395     07F8  2FA3               	goto	l635
   396     07F9  120A  118A  2800   	ljmp	start
   397     07FC                     __end_of_main:
   398                           
   399                           	psect	text1
   400     0762                     __ptext1:	
   401 ;; *************** function _Timer2_Init *****************
   402 ;; Defined at:
   403 ;;		line 18 in file "main.c"
   404 ;; Parameters:    Size  Location     Type
   405 ;;		None
   406 ;; Auto vars:     Size  Location     Type
   407 ;;		None
   408 ;; Return value:  Size  Location     Type
   409 ;;                  1    wreg      void 
   410 ;; Registers used:
   411 ;;		wreg, status,2, status,0, btemp+1
   412 ;; Tracked objects:
   413 ;;		On entry : 0/0
   414 ;;		On exit  : 0/0
   415 ;;		Unchanged: 0/0
   416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   417 ;;      Params:         0       0       0       0       0
   418 ;;      Locals:         0       0       0       0       0
   419 ;;      Temps:          0       0       0       0       0
   420 ;;      Totals:         0       0       0       0       0
   421 ;;Total ram usage:        0 bytes
   422 ;; Hardware stack levels used: 1
   423 ;; This function calls:
   424 ;;		Nothing
   425 ;; This function is called by:
   426 ;;		_main
   427 ;; This function uses a non-reentrant model
   428 ;;
   429                           
   430     0762                     _Timer2_Init:	
   431                           ;psect for function _Timer2_Init
   432                           
   433     0762                     l589:	
   434                           ;incstack = 0
   435                           ; Regs used in _Timer2_Init: [wreg+status,2+status,0+btemp+1]
   436                           
   437                           
   438                           ;main.c: 19: T2CON&=~0x03;
   439     0762  30FC               	movlw	252
   440     0763  00FF               	movwf	btemp+1
   441     0764  087F               	movf	btemp+1,w
   442     0765  1283               	bcf	3,5	;RP0=0, select bank0
   443     0766  1303               	bcf	3,6	;RP1=0, select bank0
   444     0767  0592               	andwf	18,f	;volatile
   445     0768                     l591:
   446                           
   447                           ;main.c: 20: T2CON|=0x04;
   448     0768  1512               	bsf	18,2	;volatile
   449     0769                     l21:
   450     0769  0008               	return
   451     076A                     __end_of_Timer2_Init:
   452                           
   453                           	psect	text2
   454     076A                     __ptext2:	
   455 ;; *************** function _CCP_PWM *****************
   456 ;; Defined at:
   457 ;;		line 24 in file "main.c"
   458 ;; Parameters:    Size  Location     Type
   459 ;;		None
   460 ;; Auto vars:     Size  Location     Type
   461 ;;		None
   462 ;; Return value:  Size  Location     Type
   463 ;;                  1    wreg      void 
   464 ;; Registers used:
   465 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   466 ;; Tracked objects:
   467 ;;		On entry : 0/0
   468 ;;		On exit  : 0/0
   469 ;;		Unchanged: 0/0
   470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   471 ;;      Params:         0       0       0       0       0
   472 ;;      Locals:         0       0       0       0       0
   473 ;;      Temps:          0       0       0       0       0
   474 ;;      Totals:         0       0       0       0       0
   475 ;;Total ram usage:        0 bytes
   476 ;; Hardware stack levels used: 1
   477 ;; Hardware stack levels required when called: 1
   478 ;; This function calls:
   479 ;;		_PWM_duty_cycle
   480 ;; This function is called by:
   481 ;;		_main
   482 ;; This function uses a non-reentrant model
   483 ;;
   484                           
   485     076A                     _CCP_PWM:	
   486                           ;psect for function _CCP_PWM
   487                           
   488     076A                     l627:	
   489                           ;incstack = 0
   490                           ; Regs used in _CCP_PWM: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   491                           
   492                           
   493                           ;main.c: 25: CCP1CON|=0x0C;
   494     076A  300C               	movlw	12
   495     076B  00FF               	movwf	btemp+1
   496     076C  087F               	movf	btemp+1,w
   497     076D  1283               	bcf	3,5	;RP0=0, select bank0
   498     076E  1303               	bcf	3,6	;RP1=0, select bank0
   499     076F  0497               	iorwf	23,f	;volatile
   500                           
   501                           ;main.c: 26: TRISC&=~0x04;
   502     0770  30FB               	movlw	251
   503     0771  00FF               	movwf	btemp+1
   504     0772  087F               	movf	btemp+1,w
   505     0773  1683               	bsf	3,5	;RP0=1, select bank1
   506     0774  1303               	bcf	3,6	;RP1=0, select bank1
   507     0775  0587               	andwf	7,f	;volatile
   508     0776                     l629:
   509                           
   510                           ;main.c: 27: PR2=199;
   511     0776  30C7               	movlw	199
   512     0777  0092               	movwf	18	;volatile
   513     0778                     l631:
   514                           
   515                           ;main.c: 28: PWM_duty_cycle(0);
   516     0778  3000               	movlw	0
   517     0779  00F0               	movwf	PWM_duty_cycle@DC
   518     077A  00F1               	movwf	PWM_duty_cycle@DC+1
   519     077B  120A  118A  2781  120A  118A  	fcall	_PWM_duty_cycle
   520     0780                     l24:
   521     0780  0008               	return
   522     0781                     __end_of_CCP_PWM:
   523                           
   524                           	psect	text3
   525     0781                     __ptext3:	
   526 ;; *************** function _PWM_duty_cycle *****************
   527 ;; Defined at:
   528 ;;		line 56 in file "main.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;  DC              2    0[COMMON] unsigned short 
   531 ;; Auto vars:     Size  Location     Type
   532 ;;		None
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, status,2, status,0
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   542 ;;      Params:         2       0       0       0       0
   543 ;;      Locals:         0       0       0       0       0
   544 ;;      Temps:          2       0       0       0       0
   545 ;;      Totals:         4       0       0       0       0
   546 ;;Total ram usage:        4 bytes
   547 ;; Hardware stack levels used: 1
   548 ;; This function calls:
   549 ;;		Nothing
   550 ;; This function is called by:
   551 ;;		_CCP_PWM
   552 ;;		_main
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556     0781                     _PWM_duty_cycle:	
   557                           ;psect for function _PWM_duty_cycle
   558                           
   559     0781                     l623:	
   560                           ;incstack = 0
   561                           ; Regs used in _PWM_duty_cycle: [wreg+status,2+status,0]
   562                           
   563                           
   564                           ;main.c: 57: CCP1Y = DC & 1;
   565     0781  1870               	btfsc	PWM_duty_cycle@DC,0
   566     0782  2F84               	goto	u51
   567     0783  2F88               	goto	u50
   568     0784                     u51:
   569     0784  1283               	bcf	3,5	;RP0=0, select bank0
   570     0785  1303               	bcf	3,6	;RP1=0, select bank0
   571     0786  1617               	bsf	23,4	;volatile
   572     0787  2F8B               	goto	u64
   573     0788                     u50:
   574     0788  1283               	bcf	3,5	;RP0=0, select bank0
   575     0789  1303               	bcf	3,6	;RP1=0, select bank0
   576     078A  1217               	bcf	23,4	;volatile
   577     078B                     u64:
   578                           
   579                           ;main.c: 58: CCP1X = DC & 2;
   580     078B  1297               	bcf	23,5	;volatile
   581     078C                     l625:
   582                           
   583                           ;main.c: 59: CCPR1L = DC >> 2;
   584     078C  0871               	movf	PWM_duty_cycle@DC+1,w
   585     078D  00F3               	movwf	??_PWM_duty_cycle+1
   586     078E  0870               	movf	PWM_duty_cycle@DC,w
   587     078F  00F2               	movwf	??_PWM_duty_cycle
   588     0790  1003               	clrc
   589     0791  0CF3               	rrf	??_PWM_duty_cycle+1,f
   590     0792  0CF2               	rrf	??_PWM_duty_cycle,f
   591     0793  1003               	clrc
   592     0794  0CF3               	rrf	??_PWM_duty_cycle+1,f
   593     0795  0CF2               	rrf	??_PWM_duty_cycle,f
   594     0796  0872               	movf	??_PWM_duty_cycle,w
   595     0797  0095               	movwf	21	;volatile
   596     0798                     l41:
   597     0798  0008               	return
   598     0799                     __end_of_PWM_duty_cycle:
   599     007E                     btemp	set	126	;btemp
   600     007E                     wtemp0	set	126
   601                           
   602                           	psect	config
   603                           
   604                           ;Config register CONFIG @ 0x2007
   605                           ;	Oscillator Selection bits
   606                           ;	FOSC = XT, XT oscillator
   607                           ;	Watchdog Timer Enable bit
   608                           ;	WDTE = OFF, WDT disabled
   609                           ;	Power-up Timer Enable bit
   610                           ;	PWRTE = ON, PWRT enabled
   611                           ;	Brown-out Reset Enable bit
   612                           ;	BOREN = ON, BOR enabled
   613                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   614                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   615                           ;	Data EEPROM Memory Code Protection bit
   616                           ;	CPD = OFF, Data EEPROM code protection off
   617                           ;	Flash Program Memory Write Enable bits
   618                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   619                           ;	In-Circuit Debugger Mode bit
   620                           ;	DEBUG = 0x1, unprogrammed default
   621                           ;	Flash Program Memory Code Protection bit
   622                           ;	CP = OFF, Code protection off
   623     2007                     	org	8199
   624     2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_PWM_duty_cycle
    _CCP_PWM->_PWM_duty_cycle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     635
                                              4 COMMON     4     4      0
                            _CCP_PWM
                     _PWM_duty_cycle
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (1) _Timer2_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CCP_PWM                                              0     0      0     272
                     _PWM_duty_cycle
 ---------------------------------------------------------------------------------
 (1) _PWM_duty_cycle                                       4     2      2     272
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CCP_PWM
     _PWM_duty_cycle
   _PWM_duty_cycle
   _Timer2_Init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sun Apr 28 01:45:38 2024

                     l21 0769                       l24 0780                       l41 0798  
                     u50 0788                       u51 0784                       u70 07C7  
                     u71 07C6                       u64 078B                       u80 07EF  
                     u81 07EE                       u97 07B9                      l623 0781  
                    l631 0778                      l625 078C                      l641 07B5  
                    l633 0799                      l627 076A                      l651 07E0  
                    l643 07BE                      l635 07A3                      l629 0776  
                    l653 07E9                      l645 07C7                      l637 07A6  
                    l591 0768                      l655 07EF                      l647 07D1  
                    l639 07AF                      l649 07DA                      l589 0762  
                    u107 07CB                      u117 07E4                      u127 07F3  
                    _PR2 0092          __end_of_CCP_PWM 0781                     _main 0799  
                   btemp 007E                     start 0000         PWM_duty_cycle@DC 0070  
                  ?_main 0070                    _CCP1X 00BD                    _CCP1Y 00BC  
                  _T2CON 0012                    _TRISC 0087                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07FC  
              ??_CCP_PWM 0074                   ??_main 0074                   _CCPR1L 0015  
          ??_Timer2_Init 0070                   main@DC 0076  __end_of__initialization 07FC  
         __pcstackCOMMON 0070      __end_of_Timer2_Init 076A               __pmaintext 0799  
                _CCP1CON 0017                  _CCP_PWM 076A              _Timer2_Init 0762  
                __ptext1 0762                  __ptext2 076A                  __ptext3 0781  
   end_of_initialization 07FC           _PWM_duty_cycle 0781   __end_of_PWM_duty_cycle 0799  
    start_initialization 07FC          ?_PWM_duty_cycle 0070                 ?_CCP_PWM 0070  
              ___latbits 0002             ?_Timer2_Init 0070         ??_PWM_duty_cycle 0072  
