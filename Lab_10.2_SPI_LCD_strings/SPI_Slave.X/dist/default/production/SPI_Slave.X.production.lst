

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sat May 25 14:46:40 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24     0000                     
    25                           ; Generated 12/10/2023 GMT
    26                           ; 
    27                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F877A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59     0000                     	;# 
    60     0001                     	;# 
    61     0002                     	;# 
    62     0003                     	;# 
    63     0004                     	;# 
    64     0005                     	;# 
    65     0006                     	;# 
    66     0007                     	;# 
    67     0008                     	;# 
    68     0009                     	;# 
    69     000A                     	;# 
    70     000B                     	;# 
    71     000C                     	;# 
    72     000D                     	;# 
    73     000E                     	;# 
    74     000E                     	;# 
    75     000F                     	;# 
    76     0010                     	;# 
    77     0011                     	;# 
    78     0012                     	;# 
    79     0013                     	;# 
    80     0014                     	;# 
    81     0015                     	;# 
    82     0015                     	;# 
    83     0016                     	;# 
    84     0017                     	;# 
    85     0018                     	;# 
    86     0019                     	;# 
    87     001A                     	;# 
    88     001B                     	;# 
    89     001B                     	;# 
    90     001C                     	;# 
    91     001D                     	;# 
    92     001E                     	;# 
    93     001F                     	;# 
    94     0081                     	;# 
    95     0085                     	;# 
    96     0086                     	;# 
    97     0087                     	;# 
    98     0088                     	;# 
    99     0089                     	;# 
   100     008C                     	;# 
   101     008D                     	;# 
   102     008E                     	;# 
   103     0091                     	;# 
   104     0092                     	;# 
   105     0093                     	;# 
   106     0094                     	;# 
   107     0098                     	;# 
   108     0099                     	;# 
   109     009C                     	;# 
   110     009D                     	;# 
   111     009E                     	;# 
   112     009F                     	;# 
   113     010C                     	;# 
   114     010D                     	;# 
   115     010E                     	;# 
   116     010F                     	;# 
   117     018C                     	;# 
   118     018D                     	;# 
   119     0000                     	;# 
   120     0001                     	;# 
   121     0002                     	;# 
   122     0003                     	;# 
   123     0004                     	;# 
   124     0005                     	;# 
   125     0006                     	;# 
   126     0007                     	;# 
   127     0008                     	;# 
   128     0009                     	;# 
   129     000A                     	;# 
   130     000B                     	;# 
   131     000C                     	;# 
   132     000D                     	;# 
   133     000E                     	;# 
   134     000E                     	;# 
   135     000F                     	;# 
   136     0010                     	;# 
   137     0011                     	;# 
   138     0012                     	;# 
   139     0013                     	;# 
   140     0014                     	;# 
   141     0015                     	;# 
   142     0015                     	;# 
   143     0016                     	;# 
   144     0017                     	;# 
   145     0018                     	;# 
   146     0019                     	;# 
   147     001A                     	;# 
   148     001B                     	;# 
   149     001B                     	;# 
   150     001C                     	;# 
   151     001D                     	;# 
   152     001E                     	;# 
   153     001F                     	;# 
   154     0081                     	;# 
   155     0085                     	;# 
   156     0086                     	;# 
   157     0087                     	;# 
   158     0088                     	;# 
   159     0089                     	;# 
   160     008C                     	;# 
   161     008D                     	;# 
   162     008E                     	;# 
   163     0091                     	;# 
   164     0092                     	;# 
   165     0093                     	;# 
   166     0094                     	;# 
   167     0098                     	;# 
   168     0099                     	;# 
   169     009C                     	;# 
   170     009D                     	;# 
   171     009E                     	;# 
   172     009F                     	;# 
   173     010C                     	;# 
   174     010D                     	;# 
   175     010E                     	;# 
   176     010F                     	;# 
   177     018C                     	;# 
   178     018D                     	;# 
   179     0000                     	;# 
   180     0001                     	;# 
   181     0002                     	;# 
   182     0003                     	;# 
   183     0004                     	;# 
   184     0005                     	;# 
   185     0006                     	;# 
   186     0007                     	;# 
   187     0008                     	;# 
   188     0009                     	;# 
   189     000A                     	;# 
   190     000B                     	;# 
   191     000C                     	;# 
   192     000D                     	;# 
   193     000E                     	;# 
   194     000E                     	;# 
   195     000F                     	;# 
   196     0010                     	;# 
   197     0011                     	;# 
   198     0012                     	;# 
   199     0013                     	;# 
   200     0014                     	;# 
   201     0015                     	;# 
   202     0015                     	;# 
   203     0016                     	;# 
   204     0017                     	;# 
   205     0018                     	;# 
   206     0019                     	;# 
   207     001A                     	;# 
   208     001B                     	;# 
   209     001B                     	;# 
   210     001C                     	;# 
   211     001D                     	;# 
   212     001E                     	;# 
   213     001F                     	;# 
   214     0081                     	;# 
   215     0085                     	;# 
   216     0086                     	;# 
   217     0087                     	;# 
   218     0088                     	;# 
   219     0089                     	;# 
   220     008C                     	;# 
   221     008D                     	;# 
   222     008E                     	;# 
   223     0091                     	;# 
   224     0092                     	;# 
   225     0093                     	;# 
   226     0094                     	;# 
   227     0098                     	;# 
   228     0099                     	;# 
   229     009C                     	;# 
   230     009D                     	;# 
   231     009E                     	;# 
   232     009F                     	;# 
   233     010C                     	;# 
   234     010D                     	;# 
   235     010E                     	;# 
   236     010F                     	;# 
   237     018C                     	;# 
   238     018D                     	;# 
   239     0013                     _SSPBUF	set	19
   240     0007                     _PORTC	set	7
   241     0033                     _RB3	set	51
   242     0032                     _RB2	set	50
   243     0031                     _RB1	set	49
   244     0030                     _RB0	set	48
   245     0034                     _RB4	set	52
   246     0035                     _RB5	set	53
   247     0063                     _SSPIF	set	99
   248     005F                     _GIE	set	95
   249     005E                     _PEIE	set	94
   250     00A4                     _CKP	set	164
   251     00A5                     _SSPEN	set	165
   252     00A3                     _SSPM3	set	163
   253     00A2                     _SSPM2	set	162
   254     00A1                     _SSPM1	set	161
   255     00A0                     _SSPM0	set	160
   256     0038                     _RC0	set	56
   257     0086                     _TRISB	set	134
   258     0087                     _TRISC	set	135
   259     0434                     _TRISB4	set	1076
   260     0435                     _TRISB5	set	1077
   261     04A0                     _BF	set	1184
   262     0463                     _SSPIE	set	1123
   263     043D                     _TRISC5	set	1085
   264     043C                     _TRISC4	set	1084
   265     043B                     _TRISC3	set	1083
   266     042D                     _TRISA5	set	1069
   267     04FB                     _PCFG3	set	1275
   268     04FA                     _PCFG2	set	1274
   269     04F9                     _PCFG1	set	1273
   270     04F8                     _PCFG0	set	1272
   271     04A7                     _SMP	set	1191
   272     04A6                     _CKE	set	1190
   273                           
   274                           	psect	cinit
   275     0013                     start_initialization:	
   276                           ; #config settings
   277                           
   278     0013                     __initialization:
   279                           
   280                           ; Clear objects allocated to COMMON
   281     0013  01F9               	clrf	__pbssCOMMON& (0+127)
   282                           
   283                           ; Clear objects allocated to BANK0
   284     0014  1383               	bcf	3,7	;select IRP bank0
   285     0015  3020               	movlw	low __pbssBANK0
   286     0016  0084               	movwf	4
   287     0017  3035               	movlw	low (__pbssBANK0+21)
   288     0018  120A  118A  220B  120A  118A  	fcall	clear_ram0
   289     001D                     end_of_initialization:	
   290                           ;End of C runtime variable initialization code
   291                           
   292     001D                     __end_of__initialization:
   293     001D  0183               	clrf	3
   294     001E  120A  118A  28D0   	ljmp	_main	;jump to C main() function
   295                           
   296                           	psect	bssCOMMON
   297     0079                     __pbssCOMMON:
   298     0079                     _i:
   299     0079                     	ds	1
   300                           
   301                           	psect	bssBANK0
   302     0020                     __pbssBANK0:
   303     0020                     _LCD_Flag:
   304     0020                     	ds	1
   305     0021                     _string:
   306     0021                     	ds	20
   307                           
   308                           	psect	clrtext
   309     020B                     clear_ram0:	
   310                           ;	Called with FSR containing the base address, and
   311                           ;	W with the last address+1
   312                           
   313     020B  0064               	clrwdt	;clear the watchdog before getting into this loop
   314     020C                     clrloop0:
   315     020C  0180               	clrf	0	;clear RAM location pointed to by FSR
   316     020D  0A84               	incf	4,f	;increment pointer
   317     020E  0604               	xorwf	4,w	;XOR with final address
   318     020F  1903               	btfsc	3,2	;have we reached the end yet?
   319     0210  3400               	retlw	0	;all done for this memory range, return
   320     0211  0604               	xorwf	4,w	;XOR again to restore value
   321     0212  2A0C               	goto	clrloop0	;do the next byte
   322                           
   323                           	psect	cstackCOMMON
   324     0070                     __pcstackCOMMON:
   325     0070                     ?_SPI_Slave_init:
   326     0070                     ?_LCD_Init:	
   327                           ; 1 bytes @ 0x0
   328                           
   329     0070                     ?_LCD_Clear:	
   330                           ; 1 bytes @ 0x0
   331                           
   332     0070                     ?_LCD_Write_String:	
   333                           ; 1 bytes @ 0x0
   334                           
   335     0070                     ?_LCD_DATA:	
   336                           ; 1 bytes @ 0x0
   337                           
   338     0070                     ?_port_init:	
   339                           ; 1 bytes @ 0x0
   340                           
   341     0070                     ?_main:	
   342                           ; 1 bytes @ 0x0
   343                           
   344     0070                     ?_ISR:	
   345                           ; 1 bytes @ 0x0
   346                           
   347     0070                     ??_ISR:	
   348                           ; 1 bytes @ 0x0
   349                           
   350     0070                     ?_LCD_Command:	
   351                           ; 1 bytes @ 0x0
   352                           
   353     0070                     ?_LCD_Write_Char:	
   354                           ; 1 bytes @ 0x0
   355                           
   356                           
   357                           ; 1 bytes @ 0x0
   358     0070                     	ds	4
   359     0074                     ??_SPI_Slave_init:
   360     0074                     ??_LCD_DATA:	
   361                           ; 1 bytes @ 0x4
   362                           
   363     0074                     ??_port_init:	
   364                           ; 1 bytes @ 0x4
   365                           
   366     0074                     LCD_DATA@Data:	
   367                           ; 1 bytes @ 0x4
   368                           
   369                           
   370                           ; 1 bytes @ 0x4
   371     0074                     	ds	1
   372     0075                     ??_LCD_Command:
   373     0075                     ??_LCD_Write_Char:	
   374                           ; 1 bytes @ 0x5
   375                           
   376                           
   377                           ; 1 bytes @ 0x5
   378     0075                     	ds	1
   379     0076                     LCD_Command@CMD:
   380     0076                     LCD_Write_Char@Low4:	
   381                           ; 1 bytes @ 0x6
   382                           
   383                           
   384                           ; 1 bytes @ 0x6
   385     0076                     	ds	1
   386     0077                     ??_LCD_Init:
   387     0077                     ??_LCD_Clear:	
   388                           ; 1 bytes @ 0x7
   389                           
   390     0077                     ?_LCD_Set_Cursor:	
   391                           ; 1 bytes @ 0x7
   392                           
   393     0077                     LCD_Set_Cursor@c:	
   394                           ; 1 bytes @ 0x7
   395                           
   396     0077                     LCD_Write_Char@High4:	
   397                           ; 1 bytes @ 0x7
   398                           
   399                           
   400                           ; 1 bytes @ 0x7
   401     0077                     	ds	1
   402     0078                     ??_LCD_Set_Cursor:
   403     0078                     LCD_Write_Char@Data:	
   404                           ; 1 bytes @ 0x8
   405                           
   406                           
   407                           ; 1 bytes @ 0x8
   408     0078                     	ds	1
   409     0079                     ??_main:
   410                           
   411                           	psect	cstackBANK0
   412     0035                     __pcstackBANK0:	
   413                           ; 1 bytes @ 0x9
   414                           
   415     0035                     ??_LCD_Write_String:
   416     0035                     LCD_Set_Cursor@r:	
   417                           ; 1 bytes @ 0x0
   418                           
   419                           
   420                           ; 1 bytes @ 0x0
   421     0035                     	ds	1
   422     0036                     LCD_Set_Cursor@Low4:
   423     0036                     LCD_Write_String@str:	
   424                           ; 1 bytes @ 0x1
   425                           
   426                           
   427                           ; 1 bytes @ 0x1
   428     0036                     	ds	1
   429     0037                     LCD_Set_Cursor@High4:
   430     0037                     LCD_Write_String@i:	
   431                           ; 1 bytes @ 0x2
   432                           
   433                           
   434                           ; 2 bytes @ 0x2
   435     0037                     	ds	1
   436     0038                     LCD_Set_Cursor@Temp:
   437                           
   438                           ; 1 bytes @ 0x3
   439     0038                     	ds	1
   440                           
   441                           	psect	maintext
   442     00D0                     __pmaintext:	
   443 ;;
   444 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   445 ;;
   446 ;; *************** function _main *****************
   447 ;; Defined at:
   448 ;;		line 33 in file "main.c"
   449 ;; Parameters:    Size  Location     Type
   450 ;;		None
   451 ;; Auto vars:     Size  Location     Type
   452 ;;		None
   453 ;; Return value:  Size  Location     Type
   454 ;;                  1    wreg      void 
   455 ;; Registers used:
   456 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   457 ;; Tracked objects:
   458 ;;		On entry : B00/0
   459 ;;		On exit  : 0/0
   460 ;;		Unchanged: 0/0
   461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   462 ;;      Params:         0       0       0       0       0
   463 ;;      Locals:         0       0       0       0       0
   464 ;;      Temps:          0       0       0       0       0
   465 ;;      Totals:         0       0       0       0       0
   466 ;;Total ram usage:        0 bytes
   467 ;; Hardware stack levels required when called: 4
   468 ;; This function calls:
   469 ;;		_LCD_Clear
   470 ;;		_LCD_Init
   471 ;;		_LCD_Set_Cursor
   472 ;;		_LCD_Write_String
   473 ;;		_SPI_Slave_init
   474 ;;		_port_init
   475 ;; This function is called by:
   476 ;;		Startup code after reset
   477 ;; This function uses a non-reentrant model
   478 ;;
   479                           
   480     00D0                     _main:	
   481                           ;psect for function _main
   482                           
   483     00D0                     l1012:	
   484                           ;incstack = 0
   485                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   486                           
   487                           
   488                           ;main.c: 34:     SPI_Slave_init();
   489     00D0  120A  118A  21C6  120A  118A  	fcall	_SPI_Slave_init
   490     00D5                     l1014:
   491                           
   492                           ;main.c: 35:     port_init();
   493     00D5  120A  118A  2201  120A  118A  	fcall	_port_init
   494     00DA                     l1016:
   495                           
   496                           ;main.c: 36:     LCD_Init();
   497     00DA  120A  118A  2021  120A  118A  	fcall	_LCD_Init
   498     00DF                     l1018:
   499                           
   500                           ;main.c: 37:     LCD_Clear();
   501     00DF  120A  118A  21F4  120A  118A  	fcall	_LCD_Clear
   502     00E4                     l1020:
   503                           
   504                           ;main.c: 40:     if(RC0==1){
   505     00E4  1283               	bcf	3,5	;RP0=0, select bank0
   506     00E5  1303               	bcf	3,6	;RP1=0, select bank0
   507     00E6  1C07               	btfss	7,0	;volatile
   508     00E7  28E9               	goto	u321
   509     00E8  28EA               	goto	u320
   510     00E9                     u321:
   511     00E9  28F7               	goto	l1024
   512     00EA                     u320:
   513     00EA                     l1022:
   514                           
   515                           ;main.c: 41:     LCD_Clear();
   516     00EA  120A  118A  21F4  120A  118A  	fcall	_LCD_Clear
   517                           
   518                           ;main.c: 42:     LCD_Set_Cursor(1,1);
   519     00EF  01F7               	clrf	LCD_Set_Cursor@c
   520     00F0  0AF7               	incf	LCD_Set_Cursor@c,f
   521     00F1  3001               	movlw	1
   522     00F2  120A  118A  2083  120A  118A  	fcall	_LCD_Set_Cursor
   523     00F7                     l1024:
   524                           
   525                           ;main.c: 44:     if(LCD_Flag == 1){
   526     00F7  1283               	bcf	3,5	;RP0=0, select bank0
   527     00F8  1303               	bcf	3,6	;RP1=0, select bank0
   528     00F9  0320               	decf	_LCD_Flag,w
   529     00FA  1D03               	btfss	3,2
   530     00FB  28FD               	goto	u331
   531     00FC  28FE               	goto	u330
   532     00FD                     u331:
   533     00FD  28E4               	goto	l1020
   534     00FE                     u330:
   535     00FE                     l1026:
   536                           
   537                           ;main.c: 45:     LCD_Set_Cursor(1,1);
   538     00FE  01F7               	clrf	LCD_Set_Cursor@c
   539     00FF  0AF7               	incf	LCD_Set_Cursor@c,f
   540     0100  3001               	movlw	1
   541     0101  120A  118A  2083  120A  118A  	fcall	_LCD_Set_Cursor
   542     0106                     l1028:
   543                           
   544                           ;main.c: 46:     LCD_Write_String(string);
   545     0106  3021               	movlw	(low (_string| 0))& (0+255)
   546     0107  120A  118A  217F  120A  118A  	fcall	_LCD_Write_String
   547     010C                     l1030:
   548                           
   549                           ;main.c: 47:     LCD_Flag=0;
   550     010C  1283               	bcf	3,5	;RP0=0, select bank0
   551     010D  1303               	bcf	3,6	;RP1=0, select bank0
   552     010E  01A0               	clrf	_LCD_Flag
   553     010F  28E4               	goto	l1020
   554     0110  120A  118A  2810   	ljmp	start
   555     0113                     __end_of_main:
   556                           
   557                           	psect	text1
   558     0201                     __ptext1:	
   559 ;; *************** function _port_init *****************
   560 ;; Defined at:
   561 ;;		line 27 in file "main.c"
   562 ;; Parameters:    Size  Location     Type
   563 ;;		None
   564 ;; Auto vars:     Size  Location     Type
   565 ;;		None
   566 ;; Return value:  Size  Location     Type
   567 ;;                  1    wreg      void 
   568 ;; Registers used:
   569 ;;		wreg, status,2, status,0, btemp+1
   570 ;; Tracked objects:
   571 ;;		On entry : 0/0
   572 ;;		On exit  : 0/0
   573 ;;		Unchanged: 0/0
   574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   575 ;;      Params:         0       0       0       0       0
   576 ;;      Locals:         0       0       0       0       0
   577 ;;      Temps:          0       0       0       0       0
   578 ;;      Totals:         0       0       0       0       0
   579 ;;Total ram usage:        0 bytes
   580 ;; Hardware stack levels used: 1
   581 ;; Hardware stack levels required when called: 1
   582 ;; This function calls:
   583 ;;		Nothing
   584 ;; This function is called by:
   585 ;;		_main
   586 ;; This function uses a non-reentrant model
   587 ;;
   588                           
   589     0201                     _port_init:	
   590                           ;psect for function _port_init
   591                           
   592     0201                     l894:	
   593                           ;incstack = 0
   594                           ; Regs used in _port_init: [wreg+status,2+status,0+btemp+1]
   595                           
   596                           
   597                           ;main.c: 28: TRISC&=~0x01;
   598     0201  30FE               	movlw	254
   599     0202  00FF               	movwf	btemp+1
   600     0203  087F               	movf	btemp+1,w
   601     0204  1683               	bsf	3,5	;RP0=1, select bank1
   602     0205  1303               	bcf	3,6	;RP1=0, select bank1
   603     0206  0587               	andwf	7,f	;volatile
   604     0207                     l896:
   605                           
   606                           ;main.c: 29: PORTC=0;
   607     0207  1283               	bcf	3,5	;RP0=0, select bank0
   608     0208  1303               	bcf	3,6	;RP1=0, select bank0
   609     0209  0187               	clrf	7	;volatile
   610     020A                     l69:
   611     020A  0008               	return
   612     020B                     __end_of_port_init:
   613                           
   614                           	psect	text2
   615     01C6                     __ptext2:	
   616 ;; *************** function _SPI_Slave_init *****************
   617 ;; Defined at:
   618 ;;		line 53 in file "main.c"
   619 ;; Parameters:    Size  Location     Type
   620 ;;		None
   621 ;; Auto vars:     Size  Location     Type
   622 ;;		None
   623 ;; Return value:  Size  Location     Type
   624 ;;                  1    wreg      void 
   625 ;; Registers used:
   626 ;;		None
   627 ;; Tracked objects:
   628 ;;		On entry : 0/0
   629 ;;		On exit  : 0/0
   630 ;;		Unchanged: 0/0
   631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   632 ;;      Params:         0       0       0       0       0
   633 ;;      Locals:         0       0       0       0       0
   634 ;;      Temps:          0       0       0       0       0
   635 ;;      Totals:         0       0       0       0       0
   636 ;;Total ram usage:        0 bytes
   637 ;; Hardware stack levels used: 1
   638 ;; Hardware stack levels required when called: 1
   639 ;; This function calls:
   640 ;;		Nothing
   641 ;; This function is called by:
   642 ;;		_main
   643 ;; This function uses a non-reentrant model
   644 ;;
   645                           
   646     01C6                     _SPI_Slave_init:	
   647                           ;psect for function _SPI_Slave_init
   648                           
   649     01C6                     l898:	
   650                           ;incstack = 0
   651                           ; Regs used in _SPI_Slave_init: []
   652                           
   653                           
   654                           ;main.c: 55: SSPM0=0;
   655     01C6  1283               	bcf	3,5	;RP0=0, select bank0
   656     01C7  1303               	bcf	3,6	;RP1=0, select bank0
   657     01C8  1014               	bcf	20,0	;volatile
   658                           
   659                           ;main.c: 56: SSPM1=0;
   660     01C9  1094               	bcf	20,1	;volatile
   661                           
   662                           ;main.c: 57: SSPM2=1;
   663     01CA  1514               	bsf	20,2	;volatile
   664                           
   665                           ;main.c: 58: SSPM3=0;
   666     01CB  1194               	bcf	20,3	;volatile
   667                           
   668                           ;main.c: 61: SSPEN=1;
   669     01CC  1694               	bsf	20,5	;volatile
   670                           
   671                           ;main.c: 64: CKP=0;
   672     01CD  1214               	bcf	20,4	;volatile
   673                           
   674                           ;main.c: 65: CKE=0;
   675     01CE  1683               	bsf	3,5	;RP0=1, select bank1
   676     01CF  1303               	bcf	3,6	;RP1=0, select bank1
   677     01D0  1314               	bcf	20,6	;volatile
   678                           
   679                           ;main.c: 68: SMP=0;
   680     01D1  1394               	bcf	20,7	;volatile
   681                           
   682                           ;main.c: 72: PCFG0=0;
   683     01D2  101F               	bcf	31,0	;volatile
   684                           
   685                           ;main.c: 73: PCFG1=0;
   686     01D3  109F               	bcf	31,1	;volatile
   687                           
   688                           ;main.c: 74: PCFG2=1;
   689     01D4  151F               	bsf	31,2	;volatile
   690                           
   691                           ;main.c: 75: PCFG3=0;
   692     01D5  119F               	bcf	31,3	;volatile
   693                           
   694                           ;main.c: 76: TRISA5=1;
   695     01D6  1685               	bsf	5,5	;volatile
   696                           
   697                           ;main.c: 78: TRISC3=1;
   698     01D7  1587               	bsf	7,3	;volatile
   699                           
   700                           ;main.c: 79: TRISC4=1;
   701     01D8  1607               	bsf	7,4	;volatile
   702                           
   703                           ;main.c: 80: TRISC5=0;
   704     01D9  1287               	bcf	7,5	;volatile
   705                           
   706                           ;main.c: 83: SSPIE=1;
   707     01DA  158C               	bsf	12,3	;volatile
   708                           
   709                           ;main.c: 84: PEIE=1;
   710     01DB  170B               	bsf	11,6	;volatile
   711                           
   712                           ;main.c: 85: GIE=1;
   713     01DC  178B               	bsf	11,7	;volatile
   714     01DD                     l82:
   715     01DD  0008               	return
   716     01DE                     __end_of_SPI_Slave_init:
   717                           
   718                           	psect	text3
   719     017F                     __ptext3:	
   720 ;; *************** function _LCD_Write_String *****************
   721 ;; Defined at:
   722 ;;		line 137 in file "LCD.c"
   723 ;; Parameters:    Size  Location     Type
   724 ;;  str             1    wreg     PTR unsigned char 
   725 ;;		 -> string(20), 
   726 ;; Auto vars:     Size  Location     Type
   727 ;;  str             1    1[BANK0 ] PTR unsigned char 
   728 ;;		 -> string(20), 
   729 ;;  i               2    2[BANK0 ] int 
   730 ;; Return value:  Size  Location     Type
   731 ;;                  1    wreg      void 
   732 ;; Registers used:
   733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   734 ;; Tracked objects:
   735 ;;		On entry : 0/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   739 ;;      Params:         0       0       0       0       0
   740 ;;      Locals:         0       3       0       0       0
   741 ;;      Temps:          0       1       0       0       0
   742 ;;      Totals:         0       4       0       0       0
   743 ;;Total ram usage:        4 bytes
   744 ;; Hardware stack levels used: 1
   745 ;; Hardware stack levels required when called: 3
   746 ;; This function calls:
   747 ;;		_LCD_Write_Char
   748 ;; This function is called by:
   749 ;;		_main
   750 ;; This function uses a non-reentrant model
   751 ;;
   752                           
   753     017F                     _LCD_Write_String:	
   754                           ;psect for function _LCD_Write_String
   755                           
   756                           
   757                           ;incstack = 0
   758                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   759                           ;LCD_Write_String@str stored from wreg
   760     017F  1283               	bcf	3,5	;RP0=0, select bank0
   761     0180  1303               	bcf	3,6	;RP1=0, select bank0
   762     0181  00B6               	movwf	LCD_Write_String@str
   763     0182                     l1004:
   764                           
   765                           ;LCD.c: 137: void LCD_Write_String(char *str);LCD.c: 138: {;LCD.c: 139:     int i;;LCD.c
      +                          : 140:     for(i=0;str[i]!='\0';i++)
   766     0182  01B7               	clrf	LCD_Write_String@i
   767     0183  01B8               	clrf	LCD_Write_String@i+1
   768     0184  2998               	goto	l1010
   769     0185                     l1006:
   770                           
   771                           ;LCD.c: 141:        LCD_Write_Char(str[i]);
   772     0185  0837               	movf	LCD_Write_String@i,w
   773     0186  0736               	addwf	LCD_Write_String@str,w
   774     0187  00B5               	movwf	??_LCD_Write_String
   775     0188  0835               	movf	??_LCD_Write_String,w
   776     0189  0084               	movwf	4
   777     018A  0800               	movf	0,w
   778     018B  120A  118A  2113  120A  118A  	fcall	_LCD_Write_Char
   779     0190                     l1008:
   780     0190  3001               	movlw	1
   781     0191  1283               	bcf	3,5	;RP0=0, select bank0
   782     0192  1303               	bcf	3,6	;RP1=0, select bank0
   783     0193  07B7               	addwf	LCD_Write_String@i,f
   784     0194  1803               	skipnc
   785     0195  0AB8               	incf	LCD_Write_String@i+1,f
   786     0196  3000               	movlw	0
   787     0197  07B8               	addwf	LCD_Write_String@i+1,f
   788     0198                     l1010:
   789     0198  0837               	movf	LCD_Write_String@i,w
   790     0199  0736               	addwf	LCD_Write_String@str,w
   791     019A  00B5               	movwf	??_LCD_Write_String
   792     019B  0835               	movf	??_LCD_Write_String,w
   793     019C  0084               	movwf	4
   794     019D  1383               	bcf	3,7	;select IRP bank0
   795     019E  0800               	movf	0,w
   796     019F  1D03               	btfss	3,2
   797     01A0  29A2               	goto	u311
   798     01A1  29A3               	goto	u310
   799     01A2                     u311:
   800     01A2  2985               	goto	l1006
   801     01A3                     u310:
   802     01A3                     l146:
   803     01A3  0008               	return
   804     01A4                     __end_of_LCD_Write_String:
   805                           
   806                           	psect	text4
   807     0113                     __ptext4:	
   808 ;; *************** function _LCD_Write_Char *****************
   809 ;; Defined at:
   810 ;;		line 119 in file "LCD.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;  Data            1    wreg     unsigned char 
   813 ;; Auto vars:     Size  Location     Type
   814 ;;  Data            1    8[COMMON] unsigned char 
   815 ;;  High4           1    7[COMMON] unsigned char 
   816 ;;  Low4            1    6[COMMON] unsigned char 
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, status,2, status,0, pclath, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   826 ;;      Params:         0       0       0       0       0
   827 ;;      Locals:         3       0       0       0       0
   828 ;;      Temps:          1       0       0       0       0
   829 ;;      Totals:         4       0       0       0       0
   830 ;;Total ram usage:        4 bytes
   831 ;; Hardware stack levels used: 1
   832 ;; Hardware stack levels required when called: 2
   833 ;; This function calls:
   834 ;;		_LCD_DATA
   835 ;; This function is called by:
   836 ;;		_LCD_Write_String
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840     0113                     _LCD_Write_Char:	
   841                           ;psect for function _LCD_Write_Char
   842                           
   843                           
   844                           ;incstack = 0
   845                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   846                           ;LCD_Write_Char@Data stored from wreg
   847     0113  00F8               	movwf	LCD_Write_Char@Data
   848     0114                     l870:
   849                           
   850                           ;LCD.c: 119: void LCD_Write_Char(char Data);LCD.c: 120: {;LCD.c: 121:    char Low4,High4
      +                          ;;LCD.c: 122:    Low4 = Data & 0x0F;
   851     0114  0878               	movf	LCD_Write_Char@Data,w
   852     0115  390F               	andlw	15
   853     0116  00F6               	movwf	LCD_Write_Char@Low4
   854                           
   855                           ;LCD.c: 123:    High4 = Data & 0xF0;
   856     0117  0878               	movf	LCD_Write_Char@Data,w
   857     0118  39F0               	andlw	240
   858     0119  00F7               	movwf	LCD_Write_Char@High4
   859     011A                     l872:
   860                           
   861                           ;LCD.c: 124:    RB5 = 1;
   862     011A  1283               	bcf	3,5	;RP0=0, select bank0
   863     011B  1303               	bcf	3,6	;RP1=0, select bank0
   864     011C  1686               	bsf	6,5	;volatile
   865     011D                     l874:
   866                           
   867                           ;LCD.c: 125:    LCD_DATA(High4>>4);
   868     011D  0877               	movf	LCD_Write_Char@High4,w
   869     011E  00F5               	movwf	??_LCD_Write_Char
   870     011F  3004               	movlw	4
   871     0120                     u205:
   872     0120  1003               	clrc
   873     0121  0CF5               	rrf	??_LCD_Write_Char,f
   874     0122  3EFF               	addlw	-1
   875     0123  1D03               	skipz
   876     0124  2920               	goto	u205
   877     0125  0875               	movf	??_LCD_Write_Char,w
   878     0126  120A  118A  21A4  120A  118A  	fcall	_LCD_DATA
   879     012B                     l876:
   880                           
   881                           ;LCD.c: 126:    RB4 = 1;
   882     012B  1283               	bcf	3,5	;RP0=0, select bank0
   883     012C  1303               	bcf	3,6	;RP1=0, select bank0
   884     012D  1606               	bsf	6,4	;volatile
   885     012E                     l878:
   886                           
   887                           ;LCD.c: 127:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   888     012E  30A6               	movlw	166
   889     012F  00F5               	movwf	??_LCD_Write_Char
   890     0130                     u347:
   891     0130  0BF5               	decfsz	??_LCD_Write_Char,f
   892     0131  2930               	goto	u347
   893     0132  0000               	nop
   894     0133                     l880:
   895                           
   896                           ;LCD.c: 128:    RB4 = 0;
   897     0133  1283               	bcf	3,5	;RP0=0, select bank0
   898     0134  1303               	bcf	3,6	;RP1=0, select bank0
   899     0135  1206               	bcf	6,4	;volatile
   900     0136                     l882:
   901                           
   902                           ;LCD.c: 129:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   903     0136  30A6               	movlw	166
   904     0137  00F5               	movwf	??_LCD_Write_Char
   905     0138                     u357:
   906     0138  0BF5               	decfsz	??_LCD_Write_Char,f
   907     0139  2938               	goto	u357
   908     013A  0000               	nop
   909     013B                     l884:
   910                           
   911                           ;LCD.c: 130:    LCD_DATA(Low4);
   912     013B  0876               	movf	LCD_Write_Char@Low4,w
   913     013C  120A  118A  21A4  120A  118A  	fcall	_LCD_DATA
   914     0141                     l886:
   915                           
   916                           ;LCD.c: 131:    RB4 = 1;
   917     0141  1283               	bcf	3,5	;RP0=0, select bank0
   918     0142  1303               	bcf	3,6	;RP1=0, select bank0
   919     0143  1606               	bsf	6,4	;volatile
   920     0144                     l888:
   921                           
   922                           ;LCD.c: 132:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   923     0144  30A6               	movlw	166
   924     0145  00F5               	movwf	??_LCD_Write_Char
   925     0146                     u367:
   926     0146  0BF5               	decfsz	??_LCD_Write_Char,f
   927     0147  2946               	goto	u367
   928     0148  0000               	nop
   929     0149                     l890:
   930                           
   931                           ;LCD.c: 133:    RB4 = 0;
   932     0149  1283               	bcf	3,5	;RP0=0, select bank0
   933     014A  1303               	bcf	3,6	;RP1=0, select bank0
   934     014B  1206               	bcf	6,4	;volatile
   935     014C                     l892:
   936                           
   937                           ;LCD.c: 134:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   938     014C  30A6               	movlw	166
   939     014D  00F5               	movwf	??_LCD_Write_Char
   940     014E                     u377:
   941     014E  0BF5               	decfsz	??_LCD_Write_Char,f
   942     014F  294E               	goto	u377
   943     0150  0000               	nop
   944     0151                     l140:
   945     0151  0008               	return
   946     0152                     __end_of_LCD_Write_Char:
   947                           
   948                           	psect	text5
   949     0083                     __ptext5:	
   950 ;; *************** function _LCD_Set_Cursor *****************
   951 ;; Defined at:
   952 ;;		line 99 in file "LCD.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;  r               1    wreg     unsigned char 
   955 ;;  c               1    7[COMMON] unsigned char 
   956 ;; Auto vars:     Size  Location     Type
   957 ;;  r               1    0[BANK0 ] unsigned char 
   958 ;;  Temp            1    3[BANK0 ] unsigned char 
   959 ;;  High4           1    2[BANK0 ] unsigned char 
   960 ;;  Low4            1    1[BANK0 ] unsigned char 
   961 ;; Return value:  Size  Location     Type
   962 ;;                  1    wreg      void 
   963 ;; Registers used:
   964 ;;		wreg, status,2, status,0, pclath, cstack
   965 ;; Tracked objects:
   966 ;;		On entry : 0/0
   967 ;;		On exit  : 0/0
   968 ;;		Unchanged: 0/0
   969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   970 ;;      Params:         1       0       0       0       0
   971 ;;      Locals:         0       4       0       0       0
   972 ;;      Temps:          1       0       0       0       0
   973 ;;      Totals:         2       4       0       0       0
   974 ;;Total ram usage:        6 bytes
   975 ;; Hardware stack levels used: 1
   976 ;; Hardware stack levels required when called: 3
   977 ;; This function calls:
   978 ;;		_LCD_Command
   979 ;; This function is called by:
   980 ;;		_main
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984     0083                     _LCD_Set_Cursor:	
   985                           ;psect for function _LCD_Set_Cursor
   986                           
   987                           
   988                           ;incstack = 0
   989                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   990                           ;LCD_Set_Cursor@r stored from wreg
   991     0083  1283               	bcf	3,5	;RP0=0, select bank0
   992     0084  1303               	bcf	3,6	;RP1=0, select bank0
   993     0085  00B5               	movwf	LCD_Set_Cursor@r
   994     0086                     l938:
   995                           
   996                           ;LCD.c: 100:     unsigned char Temp,Low4,High4;;LCD.c: 101:     if(r == 1)
   997     0086  0335               	decf	LCD_Set_Cursor@r,w
   998     0087  1D03               	btfss	3,2
   999     0088  288A               	goto	u211
  1000     0089  288B               	goto	u210
  1001     008A                     u211:
  1002     008A  28A9               	goto	l948
  1003     008B                     u210:
  1004     008B                     l940:
  1005                           
  1006                           ;LCD.c: 102:     {;LCD.c: 103:       Temp = 0x80 + c - 1;
  1007     008B  0877               	movf	LCD_Set_Cursor@c,w
  1008     008C  3E7F               	addlw	127
  1009     008D  00B8               	movwf	LCD_Set_Cursor@Temp
  1010                           
  1011                           ;LCD.c: 104:       High4 = Temp >> 4;
  1012     008E  0838               	movf	LCD_Set_Cursor@Temp,w
  1013     008F  00F8               	movwf	??_LCD_Set_Cursor
  1014     0090  3004               	movlw	4
  1015     0091                     u225:
  1016     0091  1003               	clrc
  1017     0092  0CF8               	rrf	??_LCD_Set_Cursor,f
  1018     0093  3EFF               	addlw	-1
  1019     0094  1D03               	skipz
  1020     0095  2891               	goto	u225
  1021     0096  0878               	movf	??_LCD_Set_Cursor,w
  1022     0097  00B7               	movwf	LCD_Set_Cursor@High4
  1023     0098                     l942:
  1024                           
  1025                           ;LCD.c: 105:       Low4 = Temp & 0x0F;
  1026     0098  0838               	movf	LCD_Set_Cursor@Temp,w
  1027     0099  390F               	andlw	15
  1028     009A  00B6               	movwf	LCD_Set_Cursor@Low4
  1029     009B                     l944:
  1030                           
  1031                           ;LCD.c: 106:       LCD_Command(High4);
  1032     009B  0837               	movf	LCD_Set_Cursor@High4,w
  1033     009C  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1034     00A1                     l946:
  1035                           
  1036                           ;LCD.c: 107:       LCD_Command(Low4);
  1037     00A1  1283               	bcf	3,5	;RP0=0, select bank0
  1038     00A2  1303               	bcf	3,6	;RP1=0, select bank0
  1039     00A3  0836               	movf	LCD_Set_Cursor@Low4,w
  1040     00A4  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1041     00A9                     l948:
  1042                           
  1043                           ;LCD.c: 109:     if(r == 2)
  1044     00A9  3002               	movlw	2
  1045     00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1046     00AB  1303               	bcf	3,6	;RP1=0, select bank0
  1047     00AC  0635               	xorwf	LCD_Set_Cursor@r,w
  1048     00AD  1D03               	btfss	3,2
  1049     00AE  28B0               	goto	u231
  1050     00AF  28B1               	goto	u230
  1051     00B0                     u231:
  1052     00B0  28CF               	goto	l137
  1053     00B1                     u230:
  1054     00B1                     l950:
  1055                           
  1056                           ;LCD.c: 110:     {;LCD.c: 111:       Temp = 0xC0 + c - 1;
  1057     00B1  0877               	movf	LCD_Set_Cursor@c,w
  1058     00B2  3EBF               	addlw	191
  1059     00B3  00B8               	movwf	LCD_Set_Cursor@Temp
  1060                           
  1061                           ;LCD.c: 112:       High4 = Temp >> 4;
  1062     00B4  0838               	movf	LCD_Set_Cursor@Temp,w
  1063     00B5  00F8               	movwf	??_LCD_Set_Cursor
  1064     00B6  3004               	movlw	4
  1065     00B7                     u245:
  1066     00B7  1003               	clrc
  1067     00B8  0CF8               	rrf	??_LCD_Set_Cursor,f
  1068     00B9  3EFF               	addlw	-1
  1069     00BA  1D03               	skipz
  1070     00BB  28B7               	goto	u245
  1071     00BC  0878               	movf	??_LCD_Set_Cursor,w
  1072     00BD  00B7               	movwf	LCD_Set_Cursor@High4
  1073     00BE                     l952:
  1074                           
  1075                           ;LCD.c: 113:       Low4 = Temp & 0x0F;
  1076     00BE  0838               	movf	LCD_Set_Cursor@Temp,w
  1077     00BF  390F               	andlw	15
  1078     00C0  00B6               	movwf	LCD_Set_Cursor@Low4
  1079     00C1                     l954:
  1080                           
  1081                           ;LCD.c: 114:       LCD_Command(High4);
  1082     00C1  0837               	movf	LCD_Set_Cursor@High4,w
  1083     00C2  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1084     00C7                     l956:
  1085                           
  1086                           ;LCD.c: 115:       LCD_Command(Low4);
  1087     00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1088     00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1089     00C9  0836               	movf	LCD_Set_Cursor@Low4,w
  1090     00CA  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1091     00CF                     l137:
  1092     00CF  0008               	return
  1093     00D0                     __end_of_LCD_Set_Cursor:
  1094                           
  1095                           	psect	text6
  1096     0021                     __ptext6:	
  1097 ;; *************** function _LCD_Init *****************
  1098 ;; Defined at:
  1099 ;;		line 44 in file "LCD.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;		None
  1104 ;; Return value:  Size  Location     Type
  1105 ;;                  1    wreg      void 
  1106 ;; Registers used:
  1107 ;;		wreg, status,2, status,0, pclath, cstack
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1113 ;;      Params:         0       0       0       0       0
  1114 ;;      Locals:         0       0       0       0       0
  1115 ;;      Temps:          2       0       0       0       0
  1116 ;;      Totals:         2       0       0       0       0
  1117 ;;Total ram usage:        2 bytes
  1118 ;; Hardware stack levels used: 1
  1119 ;; Hardware stack levels required when called: 3
  1120 ;; This function calls:
  1121 ;;		_LCD_Command
  1122 ;;		_LCD_DATA
  1123 ;; This function is called by:
  1124 ;;		_main
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128     0021                     _LCD_Init:	
  1129                           ;psect for function _LCD_Init
  1130                           
  1131     0021                     l900:	
  1132                           ;incstack = 0
  1133                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1134                           
  1135                           
  1136                           ;LCD.c: 73:   TRISB = 0x00;
  1137     0021  1683               	bsf	3,5	;RP0=1, select bank1
  1138     0022  1303               	bcf	3,6	;RP1=0, select bank1
  1139     0023  0186               	clrf	6	;volatile
  1140     0024                     l902:
  1141                           
  1142                           ;LCD.c: 74:   TRISB5 = 0;
  1143     0024  1286               	bcf	6,5	;volatile
  1144     0025                     l904:
  1145                           
  1146                           ;LCD.c: 75:   TRISB4 = 0;
  1147     0025  1206               	bcf	6,4	;volatile
  1148     0026                     l906:
  1149                           
  1150                           ;LCD.c: 77:   LCD_DATA(0x00);
  1151     0026  3000               	movlw	0
  1152     0027  120A  118A  21A4  120A  118A  	fcall	_LCD_DATA
  1153     002C                     l908:
  1154                           
  1155                           ;LCD.c: 78:   _delay((unsigned long)((30)*(4000000/4000.0)));
  1156     002C  3027               	movlw	39
  1157     002D  00F8               	movwf	??_LCD_Init+1
  1158     002E  30F5               	movlw	245
  1159     002F  00F7               	movwf	??_LCD_Init
  1160     0030                     u387:
  1161     0030  0BF7               	decfsz	??_LCD_Init,f
  1162     0031  2830               	goto	u387
  1163     0032  0BF8               	decfsz	??_LCD_Init+1,f
  1164     0033  2830               	goto	u387
  1165     0034                     l910:
  1166                           
  1167                           ;LCD.c: 79:   _delay((unsigned long)((500)*(4000000/4000000.0)));
  1168     0034  30A6               	movlw	166
  1169     0035  00F7               	movwf	??_LCD_Init
  1170     0036                     u397:
  1171     0036  0BF7               	decfsz	??_LCD_Init,f
  1172     0037  2836               	goto	u397
  1173     0038  0000               	nop
  1174     0039                     l912:
  1175                           
  1176                           ;LCD.c: 80:   LCD_Command(0x03);
  1177     0039  3003               	movlw	3
  1178     003A  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1179     003F                     l914:
  1180                           
  1181                           ;LCD.c: 81:   _delay((unsigned long)((5)*(4000000/4000.0)));
  1182     003F  3007               	movlw	7
  1183     0040  00F8               	movwf	??_LCD_Init+1
  1184     0041  307D               	movlw	125
  1185     0042  00F7               	movwf	??_LCD_Init
  1186     0043                     u407:
  1187     0043  0BF7               	decfsz	??_LCD_Init,f
  1188     0044  2843               	goto	u407
  1189     0045  0BF8               	decfsz	??_LCD_Init+1,f
  1190     0046  2843               	goto	u407
  1191     0047                     l916:
  1192                           
  1193                           ;LCD.c: 82:   LCD_Command(0x03);
  1194     0047  3003               	movlw	3
  1195     0048  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1196     004D                     l918:
  1197                           
  1198                           ;LCD.c: 83:   _delay((unsigned long)((150)*(4000000/4000000.0)));
  1199     004D  3031               	movlw	49
  1200     004E  00F7               	movwf	??_LCD_Init
  1201     004F                     u417:
  1202     004F  0BF7               	decfsz	??_LCD_Init,f
  1203     0050  284F               	goto	u417
  1204     0051  2852               	nop2
  1205     0052                     l920:
  1206                           
  1207                           ;LCD.c: 84:   LCD_Command(0x03);
  1208     0052  3003               	movlw	3
  1209     0053  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1210     0058                     l922:
  1211                           
  1212                           ;LCD.c: 85:   LCD_Command(0x02);
  1213     0058  3002               	movlw	2
  1214     0059  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1215     005E                     l924:
  1216                           
  1217                           ;LCD.c: 86:   LCD_Command(0x02);
  1218     005E  3002               	movlw	2
  1219     005F  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1220     0064                     l926:
  1221                           
  1222                           ;LCD.c: 87:   LCD_Command(0x08);
  1223     0064  3008               	movlw	8
  1224     0065  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1225     006A                     l928:
  1226                           
  1227                           ;LCD.c: 88:   LCD_Command(0x00);
  1228     006A  3000               	movlw	0
  1229     006B  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1230     0070                     l930:
  1231                           
  1232                           ;LCD.c: 89:   LCD_Command(0x0C);
  1233     0070  300C               	movlw	12
  1234     0071  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1235     0076                     l932:
  1236                           
  1237                           ;LCD.c: 90:   LCD_Command(0x00);
  1238     0076  3000               	movlw	0
  1239     0077  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1240     007C                     l934:
  1241                           
  1242                           ;LCD.c: 91:   LCD_Command(0x06);
  1243     007C  3006               	movlw	6
  1244     007D  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1245     0082                     l129:
  1246     0082  0008               	return
  1247     0083                     __end_of_LCD_Init:
  1248                           
  1249                           	psect	text7
  1250     01F4                     __ptext7:	
  1251 ;; *************** function _LCD_Clear *****************
  1252 ;; Defined at:
  1253 ;;		line 94 in file "LCD.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;		None
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;		None
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      void 
  1260 ;; Registers used:
  1261 ;;		wreg, status,2, status,0, pclath, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1267 ;;      Params:         0       0       0       0       0
  1268 ;;      Locals:         0       0       0       0       0
  1269 ;;      Temps:          0       0       0       0       0
  1270 ;;      Totals:         0       0       0       0       0
  1271 ;;Total ram usage:        0 bytes
  1272 ;; Hardware stack levels used: 1
  1273 ;; Hardware stack levels required when called: 3
  1274 ;; This function calls:
  1275 ;;		_LCD_Command
  1276 ;; This function is called by:
  1277 ;;		_main
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281     01F4                     _LCD_Clear:	
  1282                           ;psect for function _LCD_Clear
  1283                           
  1284     01F4                     l936:	
  1285                           ;incstack = 0
  1286                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1287                           
  1288                           
  1289                           ;LCD.c: 95:     LCD_Command(0);
  1290     01F4  3000               	movlw	0
  1291     01F5  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1292                           
  1293                           ;LCD.c: 96:     LCD_Command(1);
  1294     01FA  3001               	movlw	1
  1295     01FB  120A  118A  21DE  120A  118A  	fcall	_LCD_Command
  1296     0200                     l132:
  1297     0200  0008               	return
  1298     0201                     __end_of_LCD_Clear:
  1299                           
  1300                           	psect	text8
  1301     01DE                     __ptext8:	
  1302 ;; *************** function _LCD_Command *****************
  1303 ;; Defined at:
  1304 ;;		line 13 in file "LCD.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;  CMD             1    wreg     unsigned char 
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  CMD             1    6[COMMON] unsigned char 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2, status,0, pclath, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1318 ;;      Params:         0       0       0       0       0
  1319 ;;      Locals:         1       0       0       0       0
  1320 ;;      Temps:          1       0       0       0       0
  1321 ;;      Totals:         2       0       0       0       0
  1322 ;;Total ram usage:        2 bytes
  1323 ;; Hardware stack levels used: 1
  1324 ;; Hardware stack levels required when called: 2
  1325 ;; This function calls:
  1326 ;;		_LCD_DATA
  1327 ;; This function is called by:
  1328 ;;		_LCD_Init
  1329 ;;		_LCD_Clear
  1330 ;;		_LCD_Set_Cursor
  1331 ;;		_LCD_SL
  1332 ;;		_LCD_SR
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336     01DE                     _LCD_Command:	
  1337                           ;psect for function _LCD_Command
  1338                           
  1339                           
  1340                           ;incstack = 0
  1341                           ; Regs used in _LCD_Command: [wreg+status,2+status,0+pclath+cstack]
  1342                           ;LCD_Command@CMD stored from wreg
  1343     01DE  00F6               	movwf	LCD_Command@CMD
  1344     01DF                     l860:
  1345                           
  1346                           ;LCD.c: 15:     RB5 = 0;
  1347     01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1348     01E0  1303               	bcf	3,6	;RP1=0, select bank0
  1349     01E1  1286               	bcf	6,5	;volatile
  1350     01E2                     l862:
  1351                           
  1352                           ;LCD.c: 17:     LCD_DATA(CMD);
  1353     01E2  0876               	movf	LCD_Command@CMD,w
  1354     01E3  120A  118A  21A4  120A  118A  	fcall	_LCD_DATA
  1355     01E8                     l864:
  1356                           
  1357                           ;LCD.c: 19:     RB4 = 1;
  1358     01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1359     01E9  1303               	bcf	3,6	;RP1=0, select bank0
  1360     01EA  1606               	bsf	6,4	;volatile
  1361     01EB                     l866:
  1362                           
  1363                           ;LCD.c: 20:     _delay((unsigned long)((500)*(4000000/4000000.0)));
  1364     01EB  30A6               	movlw	166
  1365     01EC  00F5               	movwf	??_LCD_Command
  1366     01ED                     u427:
  1367     01ED  0BF5               	decfsz	??_LCD_Command,f
  1368     01EE  29ED               	goto	u427
  1369     01EF  0000               	nop
  1370     01F0                     l868:
  1371                           
  1372                           ;LCD.c: 21:     RB4 = 0;
  1373     01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1374     01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1375     01F2  1206               	bcf	6,4	;volatile
  1376     01F3                     l115:
  1377     01F3  0008               	return
  1378     01F4                     __end_of_LCD_Command:
  1379                           
  1380                           	psect	text9
  1381     01A4                     __ptext9:	
  1382 ;; *************** function _LCD_DATA *****************
  1383 ;; Defined at:
  1384 ;;		line 24 in file "LCD.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;  Data            1    wreg     unsigned char 
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;  Data            1    4[COMMON] unsigned char 
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1398 ;;      Params:         0       0       0       0       0
  1399 ;;      Locals:         1       0       0       0       0
  1400 ;;      Temps:          0       0       0       0       0
  1401 ;;      Totals:         1       0       0       0       0
  1402 ;;Total ram usage:        1 bytes
  1403 ;; Hardware stack levels used: 1
  1404 ;; Hardware stack levels required when called: 1
  1405 ;; This function calls:
  1406 ;;		Nothing
  1407 ;; This function is called by:
  1408 ;;		_LCD_Command
  1409 ;;		_LCD_Init
  1410 ;;		_LCD_Write_Char
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414     01A4                     _LCD_DATA:	
  1415                           ;psect for function _LCD_DATA
  1416                           
  1417                           
  1418                           ;incstack = 0
  1419                           ; Regs used in _LCD_DATA: [wreg]
  1420                           ;LCD_DATA@Data stored from wreg
  1421     01A4  00F4               	movwf	LCD_DATA@Data
  1422     01A5                     l850:
  1423                           
  1424                           ;LCD.c: 26:   if(Data & 1)
  1425     01A5  1C74               	btfss	LCD_DATA@Data,0
  1426     01A6  29A8               	goto	u161
  1427     01A7  29A9               	goto	u160
  1428     01A8                     u161:
  1429     01A8  29AD               	goto	l118
  1430     01A9                     u160:
  1431     01A9                     l852:
  1432                           
  1433                           ;LCD.c: 27:     RB0 = 1;
  1434     01A9  1283               	bcf	3,5	;RP0=0, select bank0
  1435     01AA  1303               	bcf	3,6	;RP1=0, select bank0
  1436     01AB  1406               	bsf	6,0	;volatile
  1437     01AC  29B0               	goto	l119
  1438     01AD                     l118:	
  1439                           ;LCD.c: 28:   else
  1440                           
  1441                           
  1442                           ;LCD.c: 29:     RB0 = 0;
  1443     01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1444     01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1445     01AF  1006               	bcf	6,0	;volatile
  1446     01B0                     l119:
  1447                           
  1448                           ;LCD.c: 30:   if(Data & 2)
  1449     01B0  1CF4               	btfss	LCD_DATA@Data,1
  1450     01B1  29B3               	goto	u171
  1451     01B2  29B4               	goto	u170
  1452     01B3                     u171:
  1453     01B3  29B6               	goto	l120
  1454     01B4                     u170:
  1455     01B4                     l854:
  1456                           
  1457                           ;LCD.c: 31:     RB1 = 1;
  1458     01B4  1486               	bsf	6,1	;volatile
  1459     01B5  29B7               	goto	l121
  1460     01B6                     l120:	
  1461                           ;LCD.c: 32:   else
  1462                           
  1463                           
  1464                           ;LCD.c: 33:     RB1 = 0;
  1465     01B6  1086               	bcf	6,1	;volatile
  1466     01B7                     l121:
  1467                           
  1468                           ;LCD.c: 34:   if(Data & 4)
  1469     01B7  1D74               	btfss	LCD_DATA@Data,2
  1470     01B8  29BA               	goto	u181
  1471     01B9  29BB               	goto	u180
  1472     01BA                     u181:
  1473     01BA  29BD               	goto	l122
  1474     01BB                     u180:
  1475     01BB                     l856:
  1476                           
  1477                           ;LCD.c: 35:     RB2 = 1;
  1478     01BB  1506               	bsf	6,2	;volatile
  1479     01BC  29BE               	goto	l123
  1480     01BD                     l122:	
  1481                           ;LCD.c: 36:   else
  1482                           
  1483                           
  1484                           ;LCD.c: 37:     RB2 = 0;
  1485     01BD  1106               	bcf	6,2	;volatile
  1486     01BE                     l123:
  1487                           
  1488                           ;LCD.c: 38:   if(Data & 8)
  1489     01BE  1DF4               	btfss	LCD_DATA@Data,3
  1490     01BF  29C1               	goto	u191
  1491     01C0  29C2               	goto	u190
  1492     01C1                     u191:
  1493     01C1  29C4               	goto	l124
  1494     01C2                     u190:
  1495     01C2                     l858:
  1496                           
  1497                           ;LCD.c: 39:     RB3 = 1;
  1498     01C2  1586               	bsf	6,3	;volatile
  1499     01C3  29C5               	goto	l126
  1500     01C4                     l124:	
  1501                           ;LCD.c: 40:   else
  1502                           
  1503                           
  1504                           ;LCD.c: 41:     RB3 = 0;
  1505     01C4  1186               	bcf	6,3	;volatile
  1506     01C5                     l126:
  1507     01C5  0008               	return
  1508     01C6                     __end_of_LCD_DATA:
  1509                           
  1510                           	psect	text10
  1511     0152                     __ptext10:	
  1512 ;; *************** function _ISR *****************
  1513 ;; Defined at:
  1514 ;;		line 89 in file "main.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;		None
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;		None
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1528 ;;      Params:         0       0       0       0       0
  1529 ;;      Locals:         0       0       0       0       0
  1530 ;;      Temps:          4       0       0       0       0
  1531 ;;      Totals:         4       0       0       0       0
  1532 ;;Total ram usage:        4 bytes
  1533 ;; Hardware stack levels used: 1
  1534 ;; This function calls:
  1535 ;;		Nothing
  1536 ;; This function is called by:
  1537 ;;		Interrupt level 1
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541     0152                     _ISR:	
  1542                           ;psect for function _ISR
  1543                           
  1544     0152                     i1l986:
  1545                           
  1546                           ;main.c: 90:     if(SSPIF){
  1547     0152  1283               	bcf	3,5	;RP0=0, select bank0
  1548     0153  1303               	bcf	3,6	;RP1=0, select bank0
  1549     0154  1D8C               	btfss	12,3	;volatile
  1550     0155  2957               	goto	u28_21
  1551     0156  2958               	goto	u28_20
  1552     0157                     u28_21:
  1553     0157  2974               	goto	i1l90
  1554     0158                     u28_20:
  1555     0158                     i1l988:
  1556                           
  1557                           ;main.c: 91:     SSPIF=0;
  1558     0158  118C               	bcf	12,3	;volatile
  1559                           
  1560                           ;main.c: 92:     if (BF){
  1561     0159  1683               	bsf	3,5	;RP0=1, select bank1
  1562     015A  1303               	bcf	3,6	;RP1=0, select bank1
  1563     015B  1C14               	btfss	20,0	;volatile
  1564     015C  295E               	goto	u29_21
  1565     015D  295F               	goto	u29_20
  1566     015E                     u29_21:
  1567     015E  2974               	goto	i1l90
  1568     015F                     u29_20:
  1569     015F                     i1l990:
  1570                           
  1571                           ;main.c: 93:         string[i]=SSPBUF;
  1572     015F  0879               	movf	_i,w
  1573     0160  3E21               	addlw	(low (_string| 0))& (0+255)
  1574     0161  0084               	movwf	4
  1575     0162  1283               	bcf	3,5	;RP0=0, select bank0
  1576     0163  1303               	bcf	3,6	;RP1=0, select bank0
  1577     0164  0813               	movf	19,w	;volatile
  1578     0165  1383               	bcf	3,7	;select IRP bank0
  1579     0166  0080               	movwf	0
  1580     0167                     i1l992:
  1581                           
  1582                           ;main.c: 94:         i++;
  1583     0167  3001               	movlw	1
  1584     0168  00FF               	movwf	btemp+1
  1585     0169  087F               	movf	btemp+1,w
  1586     016A  07F9               	addwf	_i,f	;volatile
  1587     016B                     i1l994:
  1588                           
  1589                           ;main.c: 95:         if(i>=9){
  1590     016B  3009               	movlw	9
  1591     016C  0279               	subwf	_i,w	;volatile
  1592     016D  1C03               	skipc
  1593     016E  2970               	goto	u30_21
  1594     016F  2971               	goto	u30_20
  1595     0170                     u30_21:
  1596     0170  2974               	goto	i1l90
  1597     0171                     u30_20:
  1598     0171                     i1l996:
  1599                           
  1600                           ;main.c: 96:             LCD_Flag=1;
  1601     0171  01A0               	clrf	_LCD_Flag
  1602     0172  0AA0               	incf	_LCD_Flag,f
  1603     0173                     i1l998:
  1604                           
  1605                           ;main.c: 97:             i=0;
  1606     0173  01F9               	clrf	_i	;volatile
  1607     0174                     i1l90:
  1608     0174  0873               	movf	??_ISR+3,w
  1609     0175  00FF               	movwf	btemp+1
  1610     0176  0872               	movf	??_ISR+2,w
  1611     0177  008A               	movwf	10
  1612     0178  0871               	movf	??_ISR+1,w
  1613     0179  0084               	movwf	4
  1614     017A  0E70               	swapf	??_ISR,w
  1615     017B  0083               	movwf	3
  1616     017C  0EFE               	swapf	btemp,f
  1617     017D  0E7E               	swapf	btemp,w
  1618     017E  0009               	retfie
  1619     017F                     __end_of_ISR:
  1620     007E                     btemp	set	126	;btemp
  1621     007E                     wtemp0	set	126
  1622                           
  1623                           	psect	intentry
  1624     0004                     __pintentry:	
  1625                           ;incstack = 0
  1626                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  1627                           
  1628     0004                     interrupt_function:
  1629     007E                     saved_w	set	btemp
  1630     0004  00FE               	movwf	btemp
  1631     0005  0E03               	swapf	3,w
  1632     0006  00F0               	movwf	??_ISR
  1633     0007  0804               	movf	4,w
  1634     0008  00F1               	movwf	??_ISR+1
  1635     0009  080A               	movf	10,w
  1636     000A  00F2               	movwf	??_ISR+2
  1637     000B  087F               	movf	btemp+1,w
  1638     000C  00F3               	movwf	??_ISR+3
  1639     000D  120A  118A  2952   	ljmp	_ISR
  1640                           
  1641                           	psect	config
  1642                           
  1643                           ;Config register CONFIG @ 0x2007
  1644                           ;	Oscillator Selection bits
  1645                           ;	FOSC = XT, XT oscillator
  1646                           ;	Watchdog Timer Enable bit
  1647                           ;	WDTE = OFF, WDT disabled
  1648                           ;	Power-up Timer Enable bit
  1649                           ;	PWRTE = ON, PWRT enabled
  1650                           ;	Brown-out Reset Enable bit
  1651                           ;	BOREN = ON, BOR enabled
  1652                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1653                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1654                           ;	Data EEPROM Memory Code Protection bit
  1655                           ;	CPD = OFF, Data EEPROM code protection off
  1656                           ;	Flash Program Memory Write Enable bits
  1657                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1658                           ;	In-Circuit Debugger Mode bit
  1659                           ;	DEBUG = 0x1, unprogrammed default
  1660                           ;	Flash Program Memory Code Protection bit
  1661                           ;	CP = OFF, Code protection off
  1662     2007                     	org	8199
  1663     2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80      4      25
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@str	PTR unsigned char  size(1) Largest target is 20
		 -> string(BANK0[20]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _main->_LCD_Set_Cursor
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_Command
    _LCD_Init->_LCD_Command
    _LCD_Clear->_LCD_Command
    _LCD_Command->_LCD_DATA

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_LCD_Set_Cursor
    _main->_LCD_Write_String

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1184
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                     _SPI_Slave_init
                          _port_init
 ---------------------------------------------------------------------------------
 (1) _port_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_Slave_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     4     4      0     344
                                              0 BANK0      4     4      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       4     4      0     178
                                              5 COMMON     4     4      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       6     5      1     532
                                              7 COMMON     2     1      1
                                              0 BANK0      4     4      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     198
                                              7 COMMON     2     2      0
                        _LCD_Command
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     110
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0     110
                                              5 COMMON     2     2      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (3) _LCD_DATA                                             1     1      0      88
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_Command
       _LCD_DATA
   _LCD_Init
     _LCD_Command
     _LCD_DATA
   _LCD_Set_Cursor
     _LCD_Command
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_DATA
   _SPI_Slave_init
   _port_init

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      23       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4      19       5       31.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      23      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sat May 25 14:46:40 2024

                       _i 0079              ?_LCD_Command 0070                        _BF 04A0  
                      l82 01DD                        l69 020A                        fsr 0004  
                     l120 01B6                       l121 01B7                       l122 01BD  
                     l123 01BE                       l115 01F3                       l124 01C4  
                     l132 0200                       l140 0151                       l126 01C5  
                     l118 01AD                       l119 01B0                       l129 0082  
                     l137 00CF                       l146 01A3                       l900 0021  
                     l910 0034                       l902 0024                       l920 0052  
                     l912 0039                       l904 0025                       l850 01A5  
                     l930 0070                       l922 0058                       l914 003F  
                     l906 0026                       l852 01A9                       l860 01DF  
                     l932 0076                       l924 005E                       l916 0047  
                     l908 002C                       l940 008B                       l854 01B4  
                     l862 01E2                       l934 007C                       l926 0064  
                     l918 004D                       l950 00B1                       l942 0098  
                     l870 0114                       _CKE 04A6                       l856 01BB  
                     l864 01E8                       l936 01F4                       l928 006A  
                     l952 00BE                       l944 009B                       l880 0133  
                     l872 011A                       l858 01C2                       l866 01EB  
                     l954 00C1                       l946 00A1                       l938 0086  
                     l890 0149                       l882 0136                       l874 011D  
                     l868 01F0                       l956 00C7                       l948 00A9  
                     l892 014C                       l884 013B                       l876 012B  
                     l886 0141                       l878 012E                       l894 0201  
                     l888 0144                       l896 0207                       l898 01C6  
                     _CKP 00A4                       _GIE 005F                       _RB0 0030  
                     _RB1 0031                       _RC0 0038                       _RB2 0032  
                     _RB3 0033                       _RB4 0034                       _RB5 0035  
                     u210 008B                       u211 008A                       u205 0120  
                     u230 00B1                       u310 01A3                       u231 00B0  
                     u311 01A2                       u160 01A9                       u320 00EA  
                     u161 01A8                       u225 0091                       u321 00E9  
                     u170 01B4                       u330 00FE                       u171 01B3  
                     u331 00FD                       u180 01BB                       u181 01BA  
                     u245 00B7                       u190 01C2                       u191 01C1  
                     u407 0043                       u417 004F                       u427 01ED  
                     u347 0130                       _ISR 0152                       u357 0138  
                     u367 0146                       u377 014E                       u387 0030  
                     u397 0036                       _SMP 04A7                       fsr0 0004  
                     indf 0000                      ?_ISR 0070            _LCD_Set_Cursor 0083  
                    l1010 0198                      l1004 0182                      l1020 00E4  
                    l1012 00D0                      l1006 0185                      l1030 010C  
                    l1022 00EA                      l1014 00D5                      l1008 0190  
                    l1024 00F7                      l1016 00DA                      l1026 00FE  
                    l1018 00DF                      l1028 0106       LCD_Write_String@str 0036  
                    _PEIE 005E                      i1l90 0174         ?_LCD_Write_String 0070  
                    _main 00D0                      btemp 007E                      start 0010  
      ??_LCD_Write_String 0035            _SPI_Slave_init 01C6                     ??_ISR 0070  
        __end_of_LCD_DATA 01C6          __end_of_LCD_Init 0083                     ?_main 0070  
                   _PCFG0 04F8                     _PCFG1 04F9                     _PCFG2 04FA  
                   _PCFG3 04FB                     i1l990 015F                     i1l992 0167  
                   i1l994 016B                     i1l986 0152                     i1l996 0171  
                   i1l988 0158                     i1l998 0173                     u30_20 0171  
                   u30_21 0170                     _PORTC 0007                     u28_20 0158  
                   u28_21 0157                     u29_20 015F                     u29_21 015E  
                   _SSPM0 00A0                     _SSPM1 00A1                     _SSPM2 00A2  
                   _SSPM3 00A3                     _TRISB 0086                     _TRISC 0087  
                   _SSPIE 0463                     _SSPEN 00A5                     _SSPIF 0063  
  __end_of_LCD_Set_Cursor 00D0                     pclath 000A                     status 0003  
                   wtemp0 007E    __end_of_SPI_Slave_init 01DE            _LCD_Write_Char 0113  
         __initialization 0013              __end_of_main 0113                    ??_main 0079  
       __end_of_LCD_Clear 0201           ?_LCD_Set_Cursor 0077                    _TRISA5 042D  
                  _TRISB4 0434                    _TRISC3 043B                    _TRISB5 0435  
                  _TRISC4 043C                    _TRISC5 043D                    _SSPBUF 0013  
         ?_SPI_Slave_init 0070    __end_of_LCD_Write_Char 0152                    _string 0021  
                  saved_w 007E           LCD_Set_Cursor@c 0077           LCD_Set_Cursor@r 0035  
               ?_LCD_DATA 0070   __end_of__initialization 001D                 ?_LCD_Init 0070  
         ?_LCD_Write_Char 0070            __pcstackCOMMON 0070                __pbssBANK0 0020  
              ??_LCD_DATA 0074                ??_LCD_Init 0077                __pmaintext 00D0  
              __pintentry 0004          ??_LCD_Set_Cursor 0078                   __ptext1 0201  
                 __ptext2 01C6                   __ptext3 017F                   __ptext4 0113  
                 __ptext5 0083                   __ptext6 0021                   __ptext7 01F4  
                 __ptext8 01DE                   __ptext9 01A4                 _LCD_Clear 01F4  
        ??_SPI_Slave_init 0074                   clrloop0 020C      end_of_initialization 001D  
          LCD_Command@CMD 0076         __end_of_port_init 020B                ?_LCD_Clear 0070  
       LCD_Write_String@i 0037          ??_LCD_Write_Char 0075             ??_LCD_Command 0075  
        _LCD_Write_String 017F       start_initialization 0013               __end_of_ISR 017F  
     __end_of_LCD_Command 01F4               __pbssCOMMON 0079                 ___latbits 0002  
           __pcstackBANK0 0035               ??_LCD_Clear 0077                  _LCD_DATA 01A4  
                _LCD_Flag 0020         interrupt_function 0004                  _LCD_Init 0021  
               clear_ram0 020B               _LCD_Command 01DE                 _port_init 0201  
__end_of_LCD_Write_String 01A4       LCD_Write_Char@High4 0077                ?_port_init 0070  
                __ptext10 0152       LCD_Set_Cursor@High4 0037        LCD_Write_Char@Data 0078  
      LCD_Write_Char@Low4 0076                  intlevel1 0000        LCD_Set_Cursor@Low4 0036  
      LCD_Set_Cursor@Temp 0038               ??_port_init 0074              LCD_DATA@Data 0074  
