

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sun May 26 02:40:54 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 12/10/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0000                     	;# 
    54     0001                     	;# 
    55     0002                     	;# 
    56     0003                     	;# 
    57     0004                     	;# 
    58     0005                     	;# 
    59     0006                     	;# 
    60     0007                     	;# 
    61     0008                     	;# 
    62     0009                     	;# 
    63     000A                     	;# 
    64     000B                     	;# 
    65     000C                     	;# 
    66     000D                     	;# 
    67     000E                     	;# 
    68     000E                     	;# 
    69     000F                     	;# 
    70     0010                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0013                     	;# 
    74     0014                     	;# 
    75     0015                     	;# 
    76     0015                     	;# 
    77     0016                     	;# 
    78     0017                     	;# 
    79     0018                     	;# 
    80     0019                     	;# 
    81     001A                     	;# 
    82     001B                     	;# 
    83     001B                     	;# 
    84     001C                     	;# 
    85     001D                     	;# 
    86     001E                     	;# 
    87     001F                     	;# 
    88     0081                     	;# 
    89     0085                     	;# 
    90     0086                     	;# 
    91     0087                     	;# 
    92     0088                     	;# 
    93     0089                     	;# 
    94     008C                     	;# 
    95     008D                     	;# 
    96     008E                     	;# 
    97     0091                     	;# 
    98     0092                     	;# 
    99     0093                     	;# 
   100     0094                     	;# 
   101     0098                     	;# 
   102     0099                     	;# 
   103     009C                     	;# 
   104     009D                     	;# 
   105     009E                     	;# 
   106     009F                     	;# 
   107     010C                     	;# 
   108     010D                     	;# 
   109     010E                     	;# 
   110     010F                     	;# 
   111     018C                     	;# 
   112     018D                     	;# 
   113     0000                     	;# 
   114     0001                     	;# 
   115     0002                     	;# 
   116     0003                     	;# 
   117     0004                     	;# 
   118     0005                     	;# 
   119     0006                     	;# 
   120     0007                     	;# 
   121     0008                     	;# 
   122     0009                     	;# 
   123     000A                     	;# 
   124     000B                     	;# 
   125     000C                     	;# 
   126     000D                     	;# 
   127     000E                     	;# 
   128     000E                     	;# 
   129     000F                     	;# 
   130     0010                     	;# 
   131     0011                     	;# 
   132     0012                     	;# 
   133     0013                     	;# 
   134     0014                     	;# 
   135     0015                     	;# 
   136     0015                     	;# 
   137     0016                     	;# 
   138     0017                     	;# 
   139     0018                     	;# 
   140     0019                     	;# 
   141     001A                     	;# 
   142     001B                     	;# 
   143     001B                     	;# 
   144     001C                     	;# 
   145     001D                     	;# 
   146     001E                     	;# 
   147     001F                     	;# 
   148     0081                     	;# 
   149     0085                     	;# 
   150     0086                     	;# 
   151     0087                     	;# 
   152     0088                     	;# 
   153     0089                     	;# 
   154     008C                     	;# 
   155     008D                     	;# 
   156     008E                     	;# 
   157     0091                     	;# 
   158     0092                     	;# 
   159     0093                     	;# 
   160     0094                     	;# 
   161     0098                     	;# 
   162     0099                     	;# 
   163     009C                     	;# 
   164     009D                     	;# 
   165     009E                     	;# 
   166     009F                     	;# 
   167     010C                     	;# 
   168     010D                     	;# 
   169     010E                     	;# 
   170     010F                     	;# 
   171     018C                     	;# 
   172     018D                     	;# 
   173     0013                     _SSPBUF	set	19
   174     0006                     _PORTB	set	6
   175     00A4                     _CKP	set	164
   176     00A5                     _SSPEN	set	165
   177     00A0                     _SSPM0	set	160
   178     00A1                     _SSPM1	set	161
   179     00A2                     _SSPM2	set	162
   180     00A3                     _SSPM3	set	163
   181     0032                     _RB2	set	50
   182     0030                     _RB0	set	48
   183     0086                     _TRISB	set	134
   184     043D                     _TRISC5	set	1085
   185     043C                     _TRISC4	set	1084
   186     043B                     _TRISC3	set	1083
   187     04A7                     _SMP	set	1191
   188     04A6                     _CKE	set	1190
   189                           
   190                           	psect	strings
   191     0003                     __pstrings:
   192     0003                     stringtab:
   193     0003                     __stringtab:
   194     0003                     stringcode:	
   195                           ;	String table - string pointers are 1 byte each
   196                           
   197     0003                     stringdir:
   198     0003  3000               	movlw	high stringdir
   199     0004  008A               	movwf	10
   200     0005  0804               	movf	4,w
   201     0006  0A84               	incf	4,f
   202     0007  0782               	addwf	2,f
   203     0008                     __stringbase:
   204     0008  3400               	retlw	0
   205     0009                     __end_of__stringtab:
   206     0009                     STR_1:
   207     0009  3431               	retlw	49	;'1'
   208     000A  3432               	retlw	50	;'2'
   209     000B  3433               	retlw	51	;'3'
   210     000C  3434               	retlw	52	;'4'
   211     000D  3435               	retlw	53	;'5'
   212     000E  3437               	retlw	55	;'7'
   213     000F  3438               	retlw	56	;'8'
   214     0010  3400               	retlw	0
   215                           
   216                           	psect	cinit
   217     07FC                     start_initialization:	
   218                           ; #config settings
   219                           
   220     07FC                     __initialization:
   221     07FC                     end_of_initialization:	
   222                           ;End of C runtime variable initialization code
   223                           
   224     07FC                     __end_of__initialization:
   225     07FC  0183               	clrf	3
   226     07FD  120A  118A  2FB4   	ljmp	_main	;jump to C main() function
   227                           
   228                           	psect	cstackCOMMON
   229     0070                     __pcstackCOMMON:
   230     0070                     ?_SPI_Master_init:
   231     0070                     ??_SPI_Master_init:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     0070                     ?_strcpy:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0070                     ?_Shift_String_Right_Add_Length:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ?_SPI_Write_String:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0070                     ?_Port_Init:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ??_Port_Init:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ?_main:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ?_Write_data:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     ??_Write_data:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0070                     ?_strlen:	
   259                           ; 1 bytes @ 0x0
   260                           
   261     0070                     Write_data@data:	
   262                           ; 2 bytes @ 0x0
   263                           
   264     0070                     strcpy@src:	
   265                           ; 1 bytes @ 0x0
   266                           
   267                           
   268                           ; 1 bytes @ 0x0
   269     0070                     	ds	1
   270     0071                     ??_strcpy:
   271     0071                     ??_SPI_Write_String:	
   272                           ; 1 bytes @ 0x1
   273                           
   274     0071                     strcpy@d:	
   275                           ; 1 bytes @ 0x1
   276                           
   277                           
   278                           ; 1 bytes @ 0x1
   279     0071                     	ds	1
   280     0072                     ??_strlen:
   281     0072                     strcpy@dest:	
   282                           ; 1 bytes @ 0x2
   283                           
   284     0072                     strlen@a:	
   285                           ; 1 bytes @ 0x2
   286                           
   287                           
   288                           ; 1 bytes @ 0x2
   289     0072                     	ds	1
   290     0073                     SPI_Write_String@i:
   291     0073                     strlen@s:	
   292                           ; 1 bytes @ 0x3
   293                           
   294                           
   295                           ; 1 bytes @ 0x3
   296     0073                     	ds	1
   297     0074                     ??_Shift_String_Right_Add_Length:
   298     0074                     SPI_Write_String@Text:	
   299                           ; 1 bytes @ 0x4
   300                           
   301                           
   302                           ; 1 bytes @ 0x4
   303     0074                     	ds	2
   304     0076                     Shift_String_Right_Add_Length@len:
   305                           
   306                           ; 1 bytes @ 0x6
   307     0076                     	ds	1
   308     0077                     Shift_String_Right_Add_Length@i_89:
   309                           
   310                           ; 2 bytes @ 0x7
   311     0077                     	ds	2
   312     0079                     Shift_String_Right_Add_Length@str:
   313                           
   314                           ; 1 bytes @ 0x9
   315     0079                     	ds	1
   316     007A                     ??_main:
   317                           
   318                           ; 1 bytes @ 0xA
   319     007A                     	ds	3
   320                           
   321                           	psect	cstackBANK0
   322     0020                     __pcstackBANK0:
   323     0020                     main@buffer:
   324                           
   325                           ; 20 bytes @ 0x0
   326     0020                     	ds	20
   327                           
   328                           	psect	maintext
   329     07B4                     __pmaintext:	
   330 ;;
   331 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   332 ;;
   333 ;; *************** function _main *****************
   334 ;; Defined at:
   335 ;;		line 34 in file "main.c"
   336 ;; Parameters:    Size  Location     Type
   337 ;;		None
   338 ;; Auto vars:     Size  Location     Type
   339 ;;  buffer         20    0[BANK0 ] unsigned char [20]
   340 ;; Return value:  Size  Location     Type
   341 ;;                  1    wreg      void 
   342 ;; Registers used:
   343 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   344 ;; Tracked objects:
   345 ;;		On entry : B00/0
   346 ;;		On exit  : 0/0
   347 ;;		Unchanged: 0/0
   348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   349 ;;      Params:         0       0       0       0       0
   350 ;;      Locals:         0      20       0       0       0
   351 ;;      Temps:          3       0       0       0       0
   352 ;;      Totals:         3      20       0       0       0
   353 ;;Total ram usage:       23 bytes
   354 ;; Hardware stack levels required when called: 2
   355 ;; This function calls:
   356 ;;		_Port_Init
   357 ;;		_SPI_Master_init
   358 ;;		_SPI_Write_String
   359 ;;		_Shift_String_Right_Add_Length
   360 ;;		_strcpy
   361 ;; This function is called by:
   362 ;;		Startup code after reset
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366     07B4                     _main:	
   367                           ;psect for function _main
   368                           
   369     07B4                     l722:	
   370                           ;incstack = 0
   371                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   372                           
   373                           
   374                           ;main.c: 35: SPI_Master_init();
   375     07B4  120A  118A  2719  120A  118A  	fcall	_SPI_Master_init
   376     07B9                     l724:
   377                           
   378                           ;main.c: 36: Port_Init();
   379     07B9  120A  118A  270C  120A  118A  	fcall	_Port_Init
   380     07BE                     l726:
   381                           
   382                           ;main.c: 41: if(RB0){
   383     07BE  1283               	bcf	3,5	;RP0=0, select bank0
   384     07BF  1303               	bcf	3,6	;RP1=0, select bank0
   385     07C0  1C06               	btfss	6,0	;volatile
   386     07C1  2FC3               	goto	u101
   387     07C2  2FC4               	goto	u100
   388     07C3                     u101:
   389     07C3  2FDF               	goto	l732
   390     07C4                     u100:
   391     07C4                     l728:
   392                           
   393                           ;main.c: 45:     strcpy(buffer,"1234578");
   394     07C4  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   395     07C5  00F0               	movwf	strcpy@src
   396     07C6  3020               	movlw	(low (main@buffer| 0))& (0+255)
   397     07C7  120A  118A  2740  120A  118A  	fcall	_strcpy
   398                           
   399                           ;main.c: 47:     Shift_String_Right_Add_Length(buffer);
   400     07CC  3020               	movlw	(low (main@buffer| 0))& (0+255)
   401     07CD  120A  118A  2782  120A  118A  	fcall	_Shift_String_Right_Add_Length
   402     07D2                     l730:
   403                           
   404                           ;main.c: 48:   _delay((unsigned long)((350)*(4000000/4000.0)));
   405     07D2  3002               	movlw	2
   406     07D3  00FC               	movwf	??_main+2
   407     07D4  30C7               	movlw	199
   408     07D5  00FB               	movwf	??_main+1
   409     07D6  3088               	movlw	136
   410     07D7  00FA               	movwf	??_main
   411     07D8                     u127:
   412     07D8  0BFA               	decfsz	??_main,f
   413     07D9  2FD8               	goto	u127
   414     07DA  0BFB               	decfsz	??_main+1,f
   415     07DB  2FD8               	goto	u127
   416     07DC  0BFC               	decfsz	??_main+2,f
   417     07DD  2FD8               	goto	u127
   418     07DE  0000               	nop
   419     07DF                     l732:
   420                           
   421                           ;main.c: 51: if(RB2){
   422     07DF  1283               	bcf	3,5	;RP0=0, select bank0
   423     07E0  1303               	bcf	3,6	;RP1=0, select bank0
   424     07E1  1D06               	btfss	6,2	;volatile
   425     07E2  2FE4               	goto	u111
   426     07E3  2FE5               	goto	u110
   427     07E4                     u111:
   428     07E4  2FBE               	goto	l726
   429     07E5                     u110:
   430     07E5                     l734:
   431                           
   432                           ;main.c: 52: SPI_Write_String(buffer);
   433     07E5  3020               	movlw	(low (main@buffer| 0))& (0+255)
   434     07E6  120A  118A  275B  120A  118A  	fcall	_SPI_Write_String
   435     07EB                     l736:
   436                           
   437                           ;main.c: 53:   _delay((unsigned long)((350)*(4000000/4000.0)));
   438     07EB  3002               	movlw	2
   439     07EC  00FC               	movwf	??_main+2
   440     07ED  30C7               	movlw	199
   441     07EE  00FB               	movwf	??_main+1
   442     07EF  3088               	movlw	136
   443     07F0  00FA               	movwf	??_main
   444     07F1                     u137:
   445     07F1  0BFA               	decfsz	??_main,f
   446     07F2  2FF1               	goto	u137
   447     07F3  0BFB               	decfsz	??_main+1,f
   448     07F4  2FF1               	goto	u137
   449     07F5  0BFC               	decfsz	??_main+2,f
   450     07F6  2FF1               	goto	u137
   451     07F7  0000               	nop
   452     07F8  2FBE               	goto	l726
   453     07F9  120A  118A  2800   	ljmp	start
   454     07FC                     __end_of_main:
   455                           
   456                           	psect	text1
   457     0740                     __ptext1:	
   458 ;; *************** function _strcpy *****************
   459 ;; Defined at:
   460 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\strcpy.c"
   461 ;; Parameters:    Size  Location     Type
   462 ;;  dest            1    wreg     PTR unsigned char 
   463 ;;		 -> main@buffer(20), 
   464 ;;  src             1    0[COMMON] PTR const unsigned char 
   465 ;;		 -> STR_1(8), 
   466 ;; Auto vars:     Size  Location     Type
   467 ;;  dest            1    2[COMMON] PTR unsigned char 
   468 ;;		 -> main@buffer(20), 
   469 ;;  d               1    1[COMMON] PTR unsigned char 
   470 ;;		 -> main@buffer(20), 
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      PTR unsigned char 
   473 ;; Registers used:
   474 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   480 ;;      Params:         1       0       0       0       0
   481 ;;      Locals:         2       0       0       0       0
   482 ;;      Temps:          0       0       0       0       0
   483 ;;      Totals:         3       0       0       0       0
   484 ;;Total ram usage:        3 bytes
   485 ;; Hardware stack levels used: 2
   486 ;; This function calls:
   487 ;;		Nothing
   488 ;; This function is called by:
   489 ;;		_main
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493     0740                     _strcpy:	
   494                           ;psect for function _strcpy
   495                           
   496                           
   497                           ;incstack = 0
   498                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   499                           ;strcpy@dest stored from wreg
   500     0740  00F2               	movwf	strcpy@dest
   501     0741                     l702:
   502     0741  0872               	movf	strcpy@dest,w
   503     0742  00F1               	movwf	strcpy@d
   504     0743                     l704:
   505     0743  3001               	movlw	1
   506     0744  07F0               	addwf	strcpy@src,f
   507     0745  30FF               	movlw	-1
   508     0746  0770               	addwf	strcpy@src,w
   509     0747  0084               	movwf	4
   510     0748  120A  118A  2003  120A  118A  	fcall	stringdir
   511     074D  00FF               	movwf	btemp+1
   512     074E  0871               	movf	strcpy@d,w
   513     074F  0084               	movwf	4
   514     0750  3001               	movlw	1
   515     0751  07F1               	addwf	strcpy@d,f
   516     0752  087F               	movf	btemp+1,w
   517     0753  1383               	bcf	3,7	;select IRP bank0
   518     0754  0080               	movwf	0
   519     0755  0800               	movf	0,w
   520     0756  1D03               	btfss	3,2
   521     0757  2F59               	goto	u81
   522     0758  2F5A               	goto	u80
   523     0759                     u81:
   524     0759  2F43               	goto	l704
   525     075A                     u80:
   526     075A                     l622:
   527     075A  0008               	return
   528     075B                     __end_of_strcpy:
   529                           
   530                           	psect	text2
   531     0782                     __ptext2:	
   532 ;; *************** function _Shift_String_Right_Add_Length *****************
   533 ;; Defined at:
   534 ;;		line 98 in file "main.c"
   535 ;; Parameters:    Size  Location     Type
   536 ;;  str             1    wreg     PTR unsigned char 
   537 ;;		 -> main@buffer(20), 
   538 ;; Auto vars:     Size  Location     Type
   539 ;;  str             1    9[COMMON] PTR unsigned char 
   540 ;;		 -> main@buffer(20), 
   541 ;;  i               2    7[COMMON] int 
   542 ;;  i               4    0        long 
   543 ;;  len             1    6[COMMON] unsigned char 
   544 ;; Return value:  Size  Location     Type
   545 ;;                  1    wreg      void 
   546 ;; Registers used:
   547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   548 ;; Tracked objects:
   549 ;;		On entry : 0/0
   550 ;;		On exit  : 0/0
   551 ;;		Unchanged: 0/0
   552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   553 ;;      Params:         0       0       0       0       0
   554 ;;      Locals:         4       0       0       0       0
   555 ;;      Temps:          2       0       0       0       0
   556 ;;      Totals:         6       0       0       0       0
   557 ;;Total ram usage:        6 bytes
   558 ;; Hardware stack levels used: 1
   559 ;; Hardware stack levels required when called: 1
   560 ;; This function calls:
   561 ;;		_strlen
   562 ;; This function is called by:
   563 ;;		_main
   564 ;; This function uses a non-reentrant model
   565 ;;
   566                           
   567     0782                     _Shift_String_Right_Add_Length:	
   568                           ;psect for function _Shift_String_Right_Add_Length
   569                           
   570                           
   571                           ;incstack = 0
   572                           ; Regs used in _Shift_String_Right_Add_Length: [wreg-fsr0h+status,2+status,0+btemp+1+pcl
      +                          ath+cstack]
   573                           ;Shift_String_Right_Add_Length@str stored from wreg
   574     0782  00F9               	movwf	Shift_String_Right_Add_Length@str
   575     0783                     l706:
   576                           
   577                           ;main.c: 99:     int32_t i;;main.c: 100:     char len = strlen(str);
   578     0783  0879               	movf	Shift_String_Right_Add_Length@str,w
   579     0784  120A  118A  2729  120A  118A  	fcall	_strlen
   580     0789  0870               	movf	?_strlen,w
   581     078A  00F6               	movwf	Shift_String_Right_Add_Length@len
   582     078B                     l708:
   583                           
   584                           ;main.c: 102:     for (int i = len; i >= 0; --i) {
   585     078B  0876               	movf	Shift_String_Right_Add_Length@len,w
   586     078C  00F4               	movwf	??_Shift_String_Right_Add_Length
   587     078D  01F5               	clrf	??_Shift_String_Right_Add_Length+1
   588     078E  0874               	movf	??_Shift_String_Right_Add_Length,w
   589     078F  00F7               	movwf	Shift_String_Right_Add_Length@i_89
   590     0790  0875               	movf	??_Shift_String_Right_Add_Length+1,w
   591     0791  00F8               	movwf	Shift_String_Right_Add_Length@i_89+1
   592     0792                     l710:
   593     0792  1FF8               	btfss	Shift_String_Right_Add_Length@i_89+1,7
   594     0793  2F95               	goto	u91
   595     0794  2F96               	goto	u90
   596     0795                     u91:
   597     0795  2F97               	goto	l714
   598     0796                     u90:
   599     0796  2FAD               	goto	l720
   600     0797                     l714:
   601                           
   602                           ;main.c: 103:         str[i + 1] = str[i];
   603     0797  0877               	movf	Shift_String_Right_Add_Length@i_89,w
   604     0798  0779               	addwf	Shift_String_Right_Add_Length@str,w
   605     0799  00F4               	movwf	??_Shift_String_Right_Add_Length
   606     079A  0874               	movf	??_Shift_String_Right_Add_Length,w
   607     079B  0084               	movwf	4
   608     079C  1383               	bcf	3,7	;select IRP bank0
   609     079D  0800               	movf	0,w
   610     079E  00FF               	movwf	btemp+1
   611     079F  0877               	movf	Shift_String_Right_Add_Length@i_89,w
   612     07A0  0779               	addwf	Shift_String_Right_Add_Length@str,w
   613     07A1  00F5               	movwf	??_Shift_String_Right_Add_Length+1
   614     07A2  0A75               	incf	??_Shift_String_Right_Add_Length+1,w
   615     07A3  0084               	movwf	4
   616     07A4  087F               	movf	btemp+1,w
   617     07A5  0080               	movwf	0
   618     07A6                     l716:
   619                           
   620                           ;main.c: 104:     }
   621     07A6  30FF               	movlw	255
   622     07A7  07F7               	addwf	Shift_String_Right_Add_Length@i_89,f
   623     07A8  1803               	skipnc
   624     07A9  0AF8               	incf	Shift_String_Right_Add_Length@i_89+1,f
   625     07AA  30FF               	movlw	255
   626     07AB  07F8               	addwf	Shift_String_Right_Add_Length@i_89+1,f
   627     07AC  2F92               	goto	l710
   628     07AD                     l720:
   629                           
   630                           ;main.c: 105: str[0]=len+0x30;
   631     07AD  0879               	movf	Shift_String_Right_Add_Length@str,w
   632     07AE  0084               	movwf	4
   633     07AF  0876               	movf	Shift_String_Right_Add_Length@len,w
   634     07B0  3E30               	addlw	48
   635     07B1  1383               	bcf	3,7	;select IRP bank0
   636     07B2  0080               	movwf	0
   637     07B3                     l74:
   638     07B3  0008               	return
   639     07B4                     __end_of_Shift_String_Right_Add_Length:
   640                           
   641                           	psect	text3
   642     0729                     __ptext3:	
   643 ;; *************** function _strlen *****************
   644 ;; Defined at:
   645 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\strlen.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;  s               1    wreg     PTR const unsigned char 
   648 ;;		 -> main@buffer(20), 
   649 ;; Auto vars:     Size  Location     Type
   650 ;;  s               1    3[COMMON] PTR const unsigned char 
   651 ;;		 -> main@buffer(20), 
   652 ;;  a               1    2[COMMON] PTR const unsigned char 
   653 ;;		 -> main@buffer(20), 
   654 ;; Return value:  Size  Location     Type
   655 ;;                  2    0[COMMON] unsigned int 
   656 ;; Registers used:
   657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   658 ;; Tracked objects:
   659 ;;		On entry : 0/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   663 ;;      Params:         2       0       0       0       0
   664 ;;      Locals:         2       0       0       0       0
   665 ;;      Temps:          0       0       0       0       0
   666 ;;      Totals:         4       0       0       0       0
   667 ;;Total ram usage:        4 bytes
   668 ;; Hardware stack levels used: 1
   669 ;; This function calls:
   670 ;;		Nothing
   671 ;; This function is called by:
   672 ;;		_Shift_String_Right_Add_Length
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676     0729                     _strlen:	
   677                           ;psect for function _strlen
   678                           
   679                           
   680                           ;incstack = 0
   681                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+btemp+1]
   682                           ;strlen@s stored from wreg
   683     0729  00F3               	movwf	strlen@s
   684     072A                     l692:
   685     072A  0873               	movf	strlen@s,w
   686     072B  00F2               	movwf	strlen@a
   687     072C  2F31               	goto	l696
   688     072D                     l694:
   689     072D  3001               	movlw	1
   690     072E  00FF               	movwf	btemp+1
   691     072F  087F               	movf	btemp+1,w
   692     0730  07F3               	addwf	strlen@s,f
   693     0731                     l696:
   694     0731  0873               	movf	strlen@s,w
   695     0732  0084               	movwf	4
   696     0733  1383               	bcf	3,7	;select IRP bank0
   697     0734  0800               	movf	0,w
   698     0735  1D03               	btfss	3,2
   699     0736  2F38               	goto	u71
   700     0737  2F39               	goto	u70
   701     0738                     u71:
   702     0738  2F2D               	goto	l694
   703     0739                     u70:
   704     0739                     l698:
   705     0739  0872               	movf	strlen@a,w
   706     073A  0273               	subwf	strlen@s,w
   707     073B  00F0               	movwf	?_strlen
   708     073C  01F1               	clrf	?_strlen+1
   709     073D  1BF0               	btfsc	?_strlen,7
   710     073E  03F1               	decf	?_strlen+1,f
   711     073F                     l628:
   712     073F  0008               	return
   713     0740                     __end_of_strlen:
   714                           
   715                           	psect	text4
   716     075B                     __ptext4:	
   717 ;; *************** function _SPI_Write_String *****************
   718 ;; Defined at:
   719 ;;		line 90 in file "main.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;  Text            1    wreg     PTR unsigned char 
   722 ;;		 -> main@buffer(20), 
   723 ;; Auto vars:     Size  Location     Type
   724 ;;  Text            1    4[COMMON] PTR unsigned char 
   725 ;;		 -> main@buffer(20), 
   726 ;;  i               1    3[COMMON] unsigned char 
   727 ;; Return value:  Size  Location     Type
   728 ;;                  1    wreg      void 
   729 ;; Registers used:
   730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   731 ;; Tracked objects:
   732 ;;		On entry : 0/0
   733 ;;		On exit  : 0/0
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   736 ;;      Params:         0       0       0       0       0
   737 ;;      Locals:         2       0       0       0       0
   738 ;;      Temps:          2       0       0       0       0
   739 ;;      Totals:         4       0       0       0       0
   740 ;;Total ram usage:        4 bytes
   741 ;; Hardware stack levels used: 1
   742 ;; Hardware stack levels required when called: 1
   743 ;; This function calls:
   744 ;;		_Write_data
   745 ;; This function is called by:
   746 ;;		_main
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750     075B                     _SPI_Write_String:	
   751                           ;psect for function _SPI_Write_String
   752                           
   753                           
   754                           ;incstack = 0
   755                           ; Regs used in _SPI_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   756                           ;SPI_Write_String@Text stored from wreg
   757     075B  00F4               	movwf	SPI_Write_String@Text
   758     075C                     l666:
   759                           
   760                           ;main.c: 91:     uint8_t i;;main.c: 92:     for(i=0;Text[i]!='\0';i++){
   761     075C  01F3               	clrf	SPI_Write_String@i
   762     075D  2F76               	goto	l674
   763     075E                     l668:
   764                           
   765                           ;main.c: 93:     Write_data(Text[i]);
   766     075E  0873               	movf	SPI_Write_String@i,w
   767     075F  0774               	addwf	SPI_Write_String@Text,w
   768     0760  00F1               	movwf	??_SPI_Write_String
   769     0761  0871               	movf	??_SPI_Write_String,w
   770     0762  0084               	movwf	4
   771     0763  0800               	movf	0,w
   772     0764  120A  118A  2706  120A  118A  	fcall	_Write_data
   773     0769                     l670:
   774                           
   775                           ;main.c: 94:      _delay((unsigned long)((100)*(4000000/4000.0)));
   776     0769  3082               	movlw	130
   777     076A  00F2               	movwf	??_SPI_Write_String+1
   778     076B  30DD               	movlw	221
   779     076C  00F1               	movwf	??_SPI_Write_String
   780     076D                     u147:
   781     076D  0BF1               	decfsz	??_SPI_Write_String,f
   782     076E  2F6D               	goto	u147
   783     076F  0BF2               	decfsz	??_SPI_Write_String+1,f
   784     0770  2F6D               	goto	u147
   785     0771  2F72               	nop2
   786     0772                     l672:
   787                           
   788                           ;main.c: 95:     }
   789     0772  3001               	movlw	1
   790     0773  00FF               	movwf	btemp+1
   791     0774  087F               	movf	btemp+1,w
   792     0775  07F3               	addwf	SPI_Write_String@i,f
   793     0776                     l674:
   794     0776  0873               	movf	SPI_Write_String@i,w
   795     0777  0774               	addwf	SPI_Write_String@Text,w
   796     0778  00F1               	movwf	??_SPI_Write_String
   797     0779  0871               	movf	??_SPI_Write_String,w
   798     077A  0084               	movwf	4
   799     077B  1383               	bcf	3,7	;select IRP bank0
   800     077C  0800               	movf	0,w
   801     077D  1D03               	btfss	3,2
   802     077E  2F80               	goto	u41
   803     077F  2F81               	goto	u40
   804     0780                     u41:
   805     0780  2F5E               	goto	l668
   806     0781                     u40:
   807     0781                     l69:
   808     0781  0008               	return
   809     0782                     __end_of_SPI_Write_String:
   810                           
   811                           	psect	text5
   812     0706                     __ptext5:	
   813 ;; *************** function _Write_data *****************
   814 ;; Defined at:
   815 ;;		line 86 in file "main.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;  data            1    wreg     unsigned char 
   818 ;; Auto vars:     Size  Location     Type
   819 ;;  data            1    0[COMMON] unsigned char 
   820 ;; Return value:  Size  Location     Type
   821 ;;                  1    wreg      void 
   822 ;; Registers used:
   823 ;;		wreg
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   829 ;;      Params:         0       0       0       0       0
   830 ;;      Locals:         1       0       0       0       0
   831 ;;      Temps:          0       0       0       0       0
   832 ;;      Totals:         1       0       0       0       0
   833 ;;Total ram usage:        1 bytes
   834 ;; Hardware stack levels used: 1
   835 ;; This function calls:
   836 ;;		Nothing
   837 ;; This function is called by:
   838 ;;		_SPI_Write_String
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842     0706                     _Write_data:	
   843                           ;psect for function _Write_data
   844                           
   845                           
   846                           ;incstack = 0
   847                           ; Regs used in _Write_data: [wreg]
   848                           ;Write_data@data stored from wreg
   849     0706  00F0               	movwf	Write_data@data
   850     0707                     l630:
   851                           
   852                           ;main.c: 87: SSPBUF=data;
   853     0707  0870               	movf	Write_data@data,w
   854     0708  1283               	bcf	3,5	;RP0=0, select bank0
   855     0709  1303               	bcf	3,6	;RP1=0, select bank0
   856     070A  0093               	movwf	19	;volatile
   857     070B                     l63:
   858     070B  0008               	return
   859     070C                     __end_of_Write_data:
   860                           
   861                           	psect	text6
   862     0719                     __ptext6:	
   863 ;; *************** function _SPI_Master_init *****************
   864 ;; Defined at:
   865 ;;		line 61 in file "main.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;		None
   868 ;; Auto vars:     Size  Location     Type
   869 ;;		None
   870 ;; Return value:  Size  Location     Type
   871 ;;                  1    wreg      void 
   872 ;; Registers used:
   873 ;;		None
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   879 ;;      Params:         0       0       0       0       0
   880 ;;      Locals:         0       0       0       0       0
   881 ;;      Temps:          0       0       0       0       0
   882 ;;      Totals:         0       0       0       0       0
   883 ;;Total ram usage:        0 bytes
   884 ;; Hardware stack levels used: 1
   885 ;; This function calls:
   886 ;;		Nothing
   887 ;; This function is called by:
   888 ;;		_main
   889 ;; This function uses a non-reentrant model
   890 ;;
   891                           
   892     0719                     _SPI_Master_init:	
   893                           ;psect for function _SPI_Master_init
   894                           
   895     0719                     l644:	
   896                           ;incstack = 0
   897                           ; Regs used in _SPI_Master_init: []
   898                           
   899                           
   900                           ;main.c: 63: SSPM3=0;
   901     0719  1283               	bcf	3,5	;RP0=0, select bank0
   902     071A  1303               	bcf	3,6	;RP1=0, select bank0
   903     071B  1194               	bcf	20,3	;volatile
   904                           
   905                           ;main.c: 64: SSPM2=0;
   906     071C  1114               	bcf	20,2	;volatile
   907                           
   908                           ;main.c: 65: SSPM1=0;
   909     071D  1094               	bcf	20,1	;volatile
   910                           
   911                           ;main.c: 66: SSPM0=0;
   912     071E  1014               	bcf	20,0	;volatile
   913                           
   914                           ;main.c: 69: SSPEN=1;
   915     071F  1694               	bsf	20,5	;volatile
   916                           
   917                           ;main.c: 72: CKP=0;
   918     0720  1214               	bcf	20,4	;volatile
   919                           
   920                           ;main.c: 73: CKE=0;
   921     0721  1683               	bsf	3,5	;RP0=1, select bank1
   922     0722  1303               	bcf	3,6	;RP1=0, select bank1
   923     0723  1314               	bcf	20,6	;volatile
   924                           
   925                           ;main.c: 76: SMP=0;
   926     0724  1394               	bcf	20,7	;volatile
   927                           
   928                           ;main.c: 79: TRISC3=0;
   929     0725  1187               	bcf	7,3	;volatile
   930                           
   931                           ;main.c: 80: TRISC4=1;
   932     0726  1607               	bsf	7,4	;volatile
   933                           
   934                           ;main.c: 81: TRISC5=0;
   935     0727  1287               	bcf	7,5	;volatile
   936     0728                     l60:
   937     0728  0008               	return
   938     0729                     __end_of_SPI_Master_init:
   939                           
   940                           	psect	text7
   941     070C                     __ptext7:	
   942 ;; *************** function _Port_Init *****************
   943 ;; Defined at:
   944 ;;		line 27 in file "main.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;		None
   947 ;; Auto vars:     Size  Location     Type
   948 ;;		None
   949 ;; Return value:  Size  Location     Type
   950 ;;                  1    wreg      void 
   951 ;; Registers used:
   952 ;;		wreg, status,2, status,0, btemp+1
   953 ;; Tracked objects:
   954 ;;		On entry : 0/0
   955 ;;		On exit  : 0/0
   956 ;;		Unchanged: 0/0
   957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   958 ;;      Params:         0       0       0       0       0
   959 ;;      Locals:         0       0       0       0       0
   960 ;;      Temps:          0       0       0       0       0
   961 ;;      Totals:         0       0       0       0       0
   962 ;;Total ram usage:        0 bytes
   963 ;; Hardware stack levels used: 1
   964 ;; This function calls:
   965 ;;		Nothing
   966 ;; This function is called by:
   967 ;;		_main
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971     070C                     _Port_Init:	
   972                           ;psect for function _Port_Init
   973                           
   974     070C                     l642:	
   975                           ;incstack = 0
   976                           ; Regs used in _Port_Init: [wreg+status,2+status,0+btemp+1]
   977                           
   978                           
   979                           ;main.c: 28:    TRISB|=0x05;
   980     070C  3005               	movlw	5
   981     070D  00FF               	movwf	btemp+1
   982     070E  087F               	movf	btemp+1,w
   983     070F  1683               	bsf	3,5	;RP0=1, select bank1
   984     0710  1303               	bcf	3,6	;RP1=0, select bank1
   985     0711  0486               	iorwf	6,f	;volatile
   986                           
   987                           ;main.c: 29:    PORTB&=~0x05;
   988     0712  30FA               	movlw	250
   989     0713  00FF               	movwf	btemp+1
   990     0714  087F               	movf	btemp+1,w
   991     0715  1283               	bcf	3,5	;RP0=0, select bank0
   992     0716  1303               	bcf	3,6	;RP1=0, select bank0
   993     0717  0586               	andwf	6,f	;volatile
   994     0718                     l47:
   995     0718  0008               	return
   996     0719                     __end_of_Port_Init:
   997     007E                     btemp	set	126	;btemp
   998     007E                     wtemp0	set	126
   999                           
  1000                           	psect	config
  1001                           
  1002                           ;Config register CONFIG @ 0x2007
  1003                           ;	Oscillator Selection bits
  1004                           ;	FOSC = XT, XT oscillator
  1005                           ;	Watchdog Timer Enable bit
  1006                           ;	WDTE = OFF, WDT disabled
  1007                           ;	Power-up Timer Enable bit
  1008                           ;	PWRTE = ON, PWRT enabled
  1009                           ;	Brown-out Reset Enable bit
  1010                           ;	BOREN = ON, BOR enabled
  1011                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1012                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1013                           ;	Data EEPROM Memory Code Protection bit
  1014                           ;	CPD = OFF, Data EEPROM code protection off
  1015                           ;	Flash Program Memory Write Enable bits
  1016                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1017                           ;	In-Circuit Debugger Mode bit
  1018                           ;	DEBUG = 0x1, unprogrammed default
  1019                           ;	Flash Program Memory Code Protection bit
  1020                           ;	CP = OFF, Code protection off
  1021     2007                     	org	8199
  1022     2007  3F71               	dw	16241

Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     20      20
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Shift_String_Right_Add_Length@str	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    SPI_Write_String@Text	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 


Critical Paths under _main in COMMON

    _main->_Shift_String_Right_Add_Length
    _Shift_String_Right_Add_Length->_strlen
    _SPI_Write_String->_Write_data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0     742
                                             10 COMMON     3     3      0
                                              0 BANK0     20    20      0
                          _Port_Init
                    _SPI_Master_init
                   _SPI_Write_String
      _Shift_String_Right_Add_Length
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     182
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _Shift_String_Right_Add_Length                       10    10      0     379
                                              4 COMMON     6     6      0
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     123
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _SPI_Write_String                                     4     4      0     105
                                              1 COMMON     4     4      0
                         _Write_data
 ---------------------------------------------------------------------------------
 (2) _Write_data                                           1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPI_Master_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Port_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Port_Init
   _SPI_Master_init
   _SPI_Write_String
     _Write_data
   _Shift_String_Right_Add_Length
     _strlen
   _strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      14       5       25.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sun May 26 02:40:54 2024

                                    pc 0002                        _SPI_Master_init 0719  
                                   l60 0728                                     l47 0718  
                                   l63 070B                                     l74 07B3  
                                   l69 0781                                     u40 0781  
                                   u41 0780                                     u70 0739  
                                   u71 0738                                     u80 075A  
                                   u81 0759                                     u90 0796  
                                   u91 0795                                     fsr 0004  
                                  l630 0707                                    l710 0792  
                                  l622 075A                                    l702 0741  
                                  l720 07AD                                    l704 0743  
                                  l642 070C                                    l714 0797  
                                  l706 0783                                    l730 07D2  
                                  l722 07B4                                    l644 0719  
                                  l628 073F                                    l716 07A6  
                                  l708 078B                                    l732 07DF  
                                  l724 07B9                                    l670 0769  
                                  l734 07E5                                    l726 07BE  
                                  l672 0772                                    l736 07EB  
                                  l728 07C4                                    l674 0776  
                                  l666 075C                                    l668 075E  
                                  l692 072A                                    l694 072D  
                                  _CKE 04A6                                    l696 0731  
                                  l698 0739                                    _CKP 00A4  
                                  _RB0 0030                                    _RB2 0032  
                                  u100 07C4                                    u101 07C3  
                                  u110 07E5                                    u111 07E4  
                                  u127 07D8                                    u137 07F1  
                                  u147 076D                                    _SMP 04A7  
                                  fsr0 0004                                    indf 0000  
                    ?_SPI_Write_String 0070                                   STR_1 0009  
                   ??_SPI_Write_String 0071                                   _main 07B4  
                                 btemp 007E                                   start 0000  
                                ?_main 0070                                  _PORTB 0006  
                                _SSPM0 00A0                                  _SSPM1 00A1  
                                _SSPM2 00A2                                  _SSPM3 00A3  
                                _TRISB 0086                                  _SSPEN 00A5  
                                pclath 000A                                  status 0003  
                                wtemp0 007E                __end_of_SPI_Master_init 0729  
                      __initialization 07FC                           __end_of_main 07FC  
                               ??_main 007A                                 _TRISC3 043B  
                               _TRISC4 043C                                 _TRISC5 043D  
                               _SSPBUF 0013                                 _strcpy 0740  
                               _strlen 0729        ??_Shift_String_Right_Add_Length 0074  
              __end_of__initialization 07FC                       ?_SPI_Master_init 0070  
                       __pcstackCOMMON 0070                             _Write_data 0706  
                    __end_of_Port_Init 0719                             __pmaintext 07B4  
                              ?_strcpy 0070                                ?_strlen 0070  
                           __stringtab 0003  __end_of_Shift_String_Right_Add_Length 07B4  
        _Shift_String_Right_Add_Length 0782       Shift_String_Right_Add_Length@len 0076  
     Shift_String_Right_Add_Length@str 0079                         Write_data@data 0070  
                          ?_Write_data 0070                                __ptext1 0740  
                              __ptext2 0782                                __ptext3 0729  
                              __ptext4 075B                                __ptext5 0706  
                              __ptext6 0719                                __ptext7 070C  
                 end_of_initialization 07FC                      SPI_Write_String@i 0073  
                              strcpy@d 0071                                strlen@a 0072  
                              strlen@s 0073                             main@buffer 0020  
       ?_Shift_String_Right_Add_Length 0070                       _SPI_Write_String 075B  
                       __end_of_strcpy 075B                         __end_of_strlen 0740  
                  start_initialization 07FC                              _Port_Init 070C  
                             ??_strcpy 0071                               ??_strlen 0072  
                            ___latbits 0002                          __pcstackBANK0 0020  
                           ?_Port_Init 0070                           ??_Write_data 0070  
                            __pstrings 0003                     __end_of_Write_data 070C  
                          __stringbase 0008                   SPI_Write_String@Text 0074  
                    ??_SPI_Master_init 0070               __end_of_SPI_Write_String 0782  
    Shift_String_Right_Add_Length@i_89 0077                            ??_Port_Init 0070  
                   __end_of__stringtab 0009                             strcpy@dest 0072  
                            strcpy@src 0070                              stringcode 0003  
                             stringdir 0003                               stringtab 0003  
