

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sun May 26 23:28:50 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     0008                     	;# 
    60     0009                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     000E                     	;# 
    66     000E                     	;# 
    67     000F                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001B                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     0087                     	;# 
    90     0088                     	;# 
    91     0089                     	;# 
    92     008C                     	;# 
    93     008D                     	;# 
    94     008E                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0098                     	;# 
   100     0099                     	;# 
   101     009C                     	;# 
   102     009D                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     010F                     	;# 
   109     018C                     	;# 
   110     018D                     	;# 
   111     0000                     	;# 
   112     0001                     	;# 
   113     0002                     	;# 
   114     0003                     	;# 
   115     0004                     	;# 
   116     0005                     	;# 
   117     0006                     	;# 
   118     0007                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     000C                     	;# 
   124     000D                     	;# 
   125     000E                     	;# 
   126     000E                     	;# 
   127     000F                     	;# 
   128     0010                     	;# 
   129     0011                     	;# 
   130     0012                     	;# 
   131     0013                     	;# 
   132     0014                     	;# 
   133     0015                     	;# 
   134     0015                     	;# 
   135     0016                     	;# 
   136     0017                     	;# 
   137     0018                     	;# 
   138     0019                     	;# 
   139     001A                     	;# 
   140     001B                     	;# 
   141     001B                     	;# 
   142     001C                     	;# 
   143     001D                     	;# 
   144     001E                     	;# 
   145     001F                     	;# 
   146     0081                     	;# 
   147     0085                     	;# 
   148     0086                     	;# 
   149     0087                     	;# 
   150     0088                     	;# 
   151     0089                     	;# 
   152     008C                     	;# 
   153     008D                     	;# 
   154     008E                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0094                     	;# 
   159     0098                     	;# 
   160     0099                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009E                     	;# 
   164     009F                     	;# 
   165     010C                     	;# 
   166     010D                     	;# 
   167     010E                     	;# 
   168     010F                     	;# 
   169     018C                     	;# 
   170     018D                     	;# 
   171     0019                     _TXREG	set	25
   172     0006                     _PORTB	set	6
   173     00C7                     _SPEN	set	199
   174     0032                     _RB2	set	50
   175     0031                     _RB1	set	49
   176     0030                     _RB0	set	48
   177     0099                     _SPBRG	set	153
   178     0086                     _TRISB	set	134
   179     04C1                     _TRMT	set	1217
   180     04C5                     _TXEN	set	1221
   181     043F                     _TRISC7	set	1087
   182     043E                     _TRISC6	set	1086
   183     04C4                     _SYNC	set	1220
   184     04C2                     _BRGH	set	1218
   185                           
   186                           	psect	strings
   187     0003                     __pstrings:
   188     0003                     stringtab:
   189     0003                     __stringtab:
   190     0003                     stringcode:	
   191                           ;	String table - string pointers are 1 byte each
   192                           
   193     0003                     stringdir:
   194     0003  3000               	movlw	high stringdir
   195     0004  008A               	movwf	10
   196     0005  0804               	movf	4,w
   197     0006  0A84               	incf	4,f
   198     0007  0782               	addwf	2,f
   199     0008                     __stringbase:
   200     0008  3400               	retlw	0
   201     0009                     __end_of__stringtab:
   202     0009                     STR_2:
   203     0009  3446               	retlw	70	;'F'
   204     000A  3452               	retlw	82	;'R'
   205     000B  3449               	retlw	73	;'I'
   206     000C  3445               	retlw	69	;'E'
   207     000D  344E               	retlw	78	;'N'
   208     000E  3444               	retlw	68	;'D'
   209     000F  3400               	retlw	0
   210     0010                     STR_1:
   211     0010  3448               	retlw	72	;'H'
   212     0011  3445               	retlw	69	;'E'
   213     0012  344C               	retlw	76	;'L'
   214     0013  344C               	retlw	76	;'L'
   215     0014  344F               	retlw	79	;'O'
   216     0015  3400               	retlw	0
   217                           
   218                           	psect	cinit
   219     07FC                     start_initialization:	
   220                           ; #config settings
   221                           
   222     07FC                     __initialization:
   223     07FC                     end_of_initialization:	
   224                           ;End of C runtime variable initialization code
   225                           
   226     07FC                     __end_of__initialization:
   227     07FC  0183               	clrf	3
   228     07FD  120A  118A  2F9F   	ljmp	_main	;jump to C main() function
   229                           
   230                           	psect	cstackCOMMON
   231     0070                     __pcstackCOMMON:
   232     0070                     ?_UART_TX_Init:
   233     0070                     ??_UART_TX_Init:	
   234                           ; 1 bytes @ 0x0
   235                           
   236     0070                     ?_strcpy:	
   237                           ; 1 bytes @ 0x0
   238                           
   239     0070                     ?_UART_Write_String:	
   240                           ; 1 bytes @ 0x0
   241                           
   242     0070                     ?_Port_Init:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0070                     ??_Port_Init:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ?_main:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ?_UART_Write:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0070                     ??_UART_Write:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0070                     UART_Write@data:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     0070                     strcpy@src:	
   261                           ; 1 bytes @ 0x0
   262                           
   263                           
   264                           ; 1 bytes @ 0x0
   265     0070                     	ds	1
   266     0071                     ??_strcpy:
   267     0071                     ??_UART_Write_String:	
   268                           ; 1 bytes @ 0x1
   269                           
   270     0071                     strcpy@d:	
   271                           ; 1 bytes @ 0x1
   272                           
   273                           
   274                           ; 1 bytes @ 0x1
   275     0071                     	ds	1
   276     0072                     strcpy@dest:
   277     0072                     UART_Write_String@i:	
   278                           ; 1 bytes @ 0x2
   279                           
   280                           
   281                           ; 2 bytes @ 0x2
   282     0072                     	ds	2
   283     0074                     UART_Write_String@text:
   284                           
   285                           ; 1 bytes @ 0x4
   286     0074                     	ds	1
   287     0075                     ??_main:
   288                           
   289                           ; 1 bytes @ 0x5
   290     0075                     	ds	3
   291                           
   292                           	psect	cstackBANK0
   293     0020                     __pcstackBANK0:
   294     0020                     main@string:
   295                           
   296                           ; 25 bytes @ 0x0
   297     0020                     	ds	25
   298                           
   299                           	psect	maintext
   300     079F                     __pmaintext:	
   301 ;;
   302 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   303 ;;
   304 ;; *************** function _main *****************
   305 ;; Defined at:
   306 ;;		line 31 in file "main_TX.c"
   307 ;; Parameters:    Size  Location     Type
   308 ;;		None
   309 ;; Auto vars:     Size  Location     Type
   310 ;;  string         25    0[BANK0 ] unsigned char [25]
   311 ;; Return value:  Size  Location     Type
   312 ;;                  1    wreg      void 
   313 ;; Registers used:
   314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   315 ;; Tracked objects:
   316 ;;		On entry : B00/0
   317 ;;		On exit  : 0/0
   318 ;;		Unchanged: 0/0
   319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   320 ;;      Params:         0       0       0       0       0
   321 ;;      Locals:         0      25       0       0       0
   322 ;;      Temps:          3       0       0       0       0
   323 ;;      Totals:         3      25       0       0       0
   324 ;;Total ram usage:       28 bytes
   325 ;; Hardware stack levels required when called: 2
   326 ;; This function calls:
   327 ;;		_Port_Init
   328 ;;		_UART_TX_Init
   329 ;;		_UART_Write_String
   330 ;;		_strcpy
   331 ;; This function is called by:
   332 ;;		Startup code after reset
   333 ;; This function uses a non-reentrant model
   334 ;;
   335                           
   336     079F                     _main:	
   337                           ;psect for function _main
   338                           
   339     079F                     l675:	
   340                           ;incstack = 0
   341                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   342                           
   343                           
   344                           ;main_TX.c: 32:     Port_Init();
   345     079F  120A  118A  2741  120A  118A  	fcall	_Port_Init
   346     07A4                     l677:
   347                           
   348                           ;main_TX.c: 33:     UART_TX_Init();
   349     07A4  120A  118A  274E  120A  118A  	fcall	_UART_TX_Init
   350     07A9                     l679:
   351                           
   352                           ;main_TX.c: 37:     if (RB0)
   353     07A9  1283               	bcf	3,5	;RP0=0, select bank0
   354     07AA  1303               	bcf	3,6	;RP1=0, select bank0
   355     07AB  1C06               	btfss	6,0	;volatile
   356     07AC  2FAE               	goto	u81
   357     07AD  2FAF               	goto	u80
   358     07AE                     u81:
   359     07AE  2FC4               	goto	l685
   360     07AF                     u80:
   361     07AF                     l681:
   362                           
   363                           ;main_TX.c: 38:     {;main_TX.c: 39:     strcpy(string,"HELLO");
   364     07AF  3008               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   365     07B0  00F0               	movwf	strcpy@src
   366     07B1  3020               	movlw	(low (main@string| 0))& (0+255)
   367     07B2  120A  118A  275D  120A  118A  	fcall	_strcpy
   368     07B7                     l683:
   369                           
   370                           ;main_TX.c: 40:     _delay((unsigned long)((250)*(4000000/4000.0)));
   371     07B7  3002               	movlw	2
   372     07B8  00F7               	movwf	??_main+2
   373     07B9  3045               	movlw	69
   374     07BA  00F6               	movwf	??_main+1
   375     07BB  30A9               	movlw	169
   376     07BC  00F5               	movwf	??_main
   377     07BD                     u117:
   378     07BD  0BF5               	decfsz	??_main,f
   379     07BE  2FBD               	goto	u117
   380     07BF  0BF6               	decfsz	??_main+1,f
   381     07C0  2FBD               	goto	u117
   382     07C1  0BF7               	decfsz	??_main+2,f
   383     07C2  2FBD               	goto	u117
   384     07C3  2FC4               	nop2
   385     07C4                     l685:
   386                           
   387                           ;main_TX.c: 42:     if (RB1)
   388     07C4  1283               	bcf	3,5	;RP0=0, select bank0
   389     07C5  1303               	bcf	3,6	;RP1=0, select bank0
   390     07C6  1C86               	btfss	6,1	;volatile
   391     07C7  2FC9               	goto	u91
   392     07C8  2FCA               	goto	u90
   393     07C9                     u91:
   394     07C9  2FDF               	goto	l691
   395     07CA                     u90:
   396     07CA                     l687:
   397                           
   398                           ;main_TX.c: 43:     {;main_TX.c: 44:     strcpy(string,"FRIEND");
   399     07CA  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   400     07CB  00F0               	movwf	strcpy@src
   401     07CC  3020               	movlw	(low (main@string| 0))& (0+255)
   402     07CD  120A  118A  275D  120A  118A  	fcall	_strcpy
   403     07D2                     l689:
   404                           
   405                           ;main_TX.c: 45:     _delay((unsigned long)((250)*(4000000/4000.0)));
   406     07D2  3002               	movlw	2
   407     07D3  00F7               	movwf	??_main+2
   408     07D4  3045               	movlw	69
   409     07D5  00F6               	movwf	??_main+1
   410     07D6  30A9               	movlw	169
   411     07D7  00F5               	movwf	??_main
   412     07D8                     u127:
   413     07D8  0BF5               	decfsz	??_main,f
   414     07D9  2FD8               	goto	u127
   415     07DA  0BF6               	decfsz	??_main+1,f
   416     07DB  2FD8               	goto	u127
   417     07DC  0BF7               	decfsz	??_main+2,f
   418     07DD  2FD8               	goto	u127
   419     07DE  2FDF               	nop2
   420     07DF                     l691:
   421                           
   422                           ;main_TX.c: 47:     if (RB2)
   423     07DF  1283               	bcf	3,5	;RP0=0, select bank0
   424     07E0  1303               	bcf	3,6	;RP1=0, select bank0
   425     07E1  1D06               	btfss	6,2	;volatile
   426     07E2  2FE4               	goto	u101
   427     07E3  2FE5               	goto	u100
   428     07E4                     u101:
   429     07E4  2FA9               	goto	l679
   430     07E5                     u100:
   431     07E5                     l693:
   432                           
   433                           ;main_TX.c: 48:     {;main_TX.c: 49:       UART_Write_String(string);
   434     07E5  3020               	movlw	(low (main@string| 0))& (0+255)
   435     07E6  120A  118A  2778  120A  118A  	fcall	_UART_Write_String
   436     07EB                     l695:
   437                           
   438                           ;main_TX.c: 50:       _delay((unsigned long)((250)*(4000000/4000.0)));
   439     07EB  3002               	movlw	2
   440     07EC  00F7               	movwf	??_main+2
   441     07ED  3045               	movlw	69
   442     07EE  00F6               	movwf	??_main+1
   443     07EF  30A9               	movlw	169
   444     07F0  00F5               	movwf	??_main
   445     07F1                     u137:
   446     07F1  0BF5               	decfsz	??_main,f
   447     07F2  2FF1               	goto	u137
   448     07F3  0BF6               	decfsz	??_main+1,f
   449     07F4  2FF1               	goto	u137
   450     07F5  0BF7               	decfsz	??_main+2,f
   451     07F6  2FF1               	goto	u137
   452     07F7  2FF8               	nop2
   453     07F8  2FA9               	goto	l679
   454     07F9  120A  118A  2800   	ljmp	start
   455     07FC                     __end_of_main:
   456                           
   457                           	psect	text1
   458     075D                     __ptext1:	
   459 ;; *************** function _strcpy *****************
   460 ;; Defined at:
   461 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\strcpy.c"
   462 ;; Parameters:    Size  Location     Type
   463 ;;  dest            1    wreg     PTR unsigned char 
   464 ;;		 -> main@string(25), 
   465 ;;  src             1    0[COMMON] PTR const unsigned char 
   466 ;;		 -> STR_2(7), STR_1(6), 
   467 ;; Auto vars:     Size  Location     Type
   468 ;;  dest            1    2[COMMON] PTR unsigned char 
   469 ;;		 -> main@string(25), 
   470 ;;  d               1    1[COMMON] PTR unsigned char 
   471 ;;		 -> main@string(25), 
   472 ;; Return value:  Size  Location     Type
   473 ;;                  1    wreg      PTR unsigned char 
   474 ;; Registers used:
   475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   476 ;; Tracked objects:
   477 ;;		On entry : 0/0
   478 ;;		On exit  : 0/0
   479 ;;		Unchanged: 0/0
   480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   481 ;;      Params:         1       0       0       0       0
   482 ;;      Locals:         2       0       0       0       0
   483 ;;      Temps:          0       0       0       0       0
   484 ;;      Totals:         3       0       0       0       0
   485 ;;Total ram usage:        3 bytes
   486 ;; Hardware stack levels used: 2
   487 ;; This function calls:
   488 ;;		Nothing
   489 ;; This function is called by:
   490 ;;		_main
   491 ;; This function uses a non-reentrant model
   492 ;;
   493                           
   494     075D                     _strcpy:	
   495                           ;psect for function _strcpy
   496                           
   497                           
   498                           ;incstack = 0
   499                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   500                           ;strcpy@dest stored from wreg
   501     075D  00F2               	movwf	strcpy@dest
   502     075E                     l671:
   503     075E  0872               	movf	strcpy@dest,w
   504     075F  00F1               	movwf	strcpy@d
   505     0760                     l673:
   506     0760  3001               	movlw	1
   507     0761  07F0               	addwf	strcpy@src,f
   508     0762  30FF               	movlw	-1
   509     0763  0770               	addwf	strcpy@src,w
   510     0764  0084               	movwf	4
   511     0765  120A  118A  2003  120A  118A  	fcall	stringdir
   512     076A  00FF               	movwf	btemp+1
   513     076B  0871               	movf	strcpy@d,w
   514     076C  0084               	movwf	4
   515     076D  3001               	movlw	1
   516     076E  07F1               	addwf	strcpy@d,f
   517     076F  087F               	movf	btemp+1,w
   518     0770  1383               	bcf	3,7	;select IRP bank0
   519     0771  0080               	movwf	0
   520     0772  0800               	movf	0,w
   521     0773  1D03               	btfss	3,2
   522     0774  2F76               	goto	u71
   523     0775  2F77               	goto	u70
   524     0776                     u71:
   525     0776  2F60               	goto	l673
   526     0777                     u70:
   527     0777                     l613:
   528     0777  0008               	return
   529     0778                     __end_of_strcpy:
   530                           
   531                           	psect	text2
   532     0778                     __ptext2:	
   533 ;; *************** function _UART_Write_String *****************
   534 ;; Defined at:
   535 ;;		line 77 in file "main_TX.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;  text            1    wreg     PTR unsigned char 
   538 ;;		 -> main@string(25), 
   539 ;; Auto vars:     Size  Location     Type
   540 ;;  text            1    4[COMMON] PTR unsigned char 
   541 ;;		 -> main@string(25), 
   542 ;;  i               2    2[COMMON] unsigned short 
   543 ;; Return value:  Size  Location     Type
   544 ;;                  1    wreg      void 
   545 ;; Registers used:
   546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   552 ;;      Params:         0       0       0       0       0
   553 ;;      Locals:         3       0       0       0       0
   554 ;;      Temps:          1       0       0       0       0
   555 ;;      Totals:         4       0       0       0       0
   556 ;;Total ram usage:        4 bytes
   557 ;; Hardware stack levels used: 1
   558 ;; Hardware stack levels required when called: 1
   559 ;; This function calls:
   560 ;;		_UART_Write
   561 ;; This function is called by:
   562 ;;		_main
   563 ;; This function uses a non-reentrant model
   564 ;;
   565                           
   566     0778                     _UART_Write_String:	
   567                           ;psect for function _UART_Write_String
   568                           
   569                           
   570                           ;incstack = 0
   571                           ; Regs used in _UART_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   572                           ;UART_Write_String@text stored from wreg
   573     0778  00F4               	movwf	UART_Write_String@text
   574     0779                     l639:
   575                           
   576                           ;main_TX.c: 78:   uint16_t i;;main_TX.c: 79:   for(i=0;text[i]!='\0';i++){
   577     0779  01F2               	clrf	UART_Write_String@i
   578     077A  01F3               	clrf	UART_Write_String@i+1
   579     077B  2F8D               	goto	l645
   580     077C                     l641:
   581                           
   582                           ;main_TX.c: 80:     UART_Write(text[i]);
   583     077C  0872               	movf	UART_Write_String@i,w
   584     077D  0774               	addwf	UART_Write_String@text,w
   585     077E  00F1               	movwf	??_UART_Write_String
   586     077F  0871               	movf	??_UART_Write_String,w
   587     0780  0084               	movwf	4
   588     0781  0800               	movf	0,w
   589     0782  120A  118A  2735  120A  118A  	fcall	_UART_Write
   590     0787                     l643:
   591                           
   592                           ;main_TX.c: 81:   }
   593     0787  3001               	movlw	1
   594     0788  07F2               	addwf	UART_Write_String@i,f
   595     0789  1803               	skipnc
   596     078A  0AF3               	incf	UART_Write_String@i+1,f
   597     078B  3000               	movlw	0
   598     078C  07F3               	addwf	UART_Write_String@i+1,f
   599     078D                     l645:
   600     078D  0872               	movf	UART_Write_String@i,w
   601     078E  0774               	addwf	UART_Write_String@text,w
   602     078F  00F1               	movwf	??_UART_Write_String
   603     0790  0871               	movf	??_UART_Write_String,w
   604     0791  0084               	movwf	4
   605     0792  1383               	bcf	3,7	;select IRP bank0
   606     0793  0800               	movf	0,w
   607     0794  1D03               	btfss	3,2
   608     0795  2F97               	goto	u31
   609     0796  2F98               	goto	u30
   610     0797                     u31:
   611     0797  2F7C               	goto	l641
   612     0798                     u30:
   613     0798                     l647:
   614                           
   615                           ;main_TX.c: 82:   UART_Write('\0');
   616     0798  3000               	movlw	0
   617     0799  120A  118A  2735  120A  118A  	fcall	_UART_Write
   618     079E                     l65:
   619     079E  0008               	return
   620     079F                     __end_of_UART_Write_String:
   621                           
   622                           	psect	text3
   623     0735                     __ptext3:	
   624 ;; *************** function _UART_Write *****************
   625 ;; Defined at:
   626 ;;		line 72 in file "main_TX.c"
   627 ;; Parameters:    Size  Location     Type
   628 ;;  data            1    wreg     unsigned char 
   629 ;; Auto vars:     Size  Location     Type
   630 ;;  data            1    0[COMMON] unsigned char 
   631 ;; Return value:  Size  Location     Type
   632 ;;                  1    wreg      void 
   633 ;; Registers used:
   634 ;;		wreg
   635 ;; Tracked objects:
   636 ;;		On entry : 0/0
   637 ;;		On exit  : 0/0
   638 ;;		Unchanged: 0/0
   639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   640 ;;      Params:         0       0       0       0       0
   641 ;;      Locals:         1       0       0       0       0
   642 ;;      Temps:          0       0       0       0       0
   643 ;;      Totals:         1       0       0       0       0
   644 ;;Total ram usage:        1 bytes
   645 ;; Hardware stack levels used: 1
   646 ;; This function calls:
   647 ;;		Nothing
   648 ;; This function is called by:
   649 ;;		_UART_Write_String
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653     0735                     _UART_Write:	
   654                           ;psect for function _UART_Write
   655                           
   656                           
   657                           ;incstack = 0
   658                           ; Regs used in _UART_Write: [wreg]
   659                           ;UART_Write@data stored from wreg
   660     0735  00F0               	movwf	UART_Write@data
   661     0736                     l615:
   662     0736                     l56:	
   663                           ;main_TX.c: 72: void UART_Write(uint8_t data);main_TX.c: 73: {;main_TX.c: 74:   while(!T
      +                          RMT);
   664                           
   665     0736  1683               	bsf	3,5	;RP0=1, select bank1
   666     0737  1303               	bcf	3,6	;RP1=0, select bank1
   667     0738  1C98               	btfss	24,1	;volatile
   668     0739  2F3B               	goto	u11
   669     073A  2F3C               	goto	u10
   670     073B                     u11:
   671     073B  2F36               	goto	l56
   672     073C                     u10:
   673     073C                     l617:
   674                           
   675                           ;main_TX.c: 75:   TXREG = data;
   676     073C  0870               	movf	UART_Write@data,w
   677     073D  1283               	bcf	3,5	;RP0=0, select bank0
   678     073E  1303               	bcf	3,6	;RP1=0, select bank0
   679     073F  0099               	movwf	25	;volatile
   680     0740                     l59:
   681     0740  0008               	return
   682     0741                     __end_of_UART_Write:
   683                           
   684                           	psect	text4
   685     074E                     __ptext4:	
   686 ;; *************** function _UART_TX_Init *****************
   687 ;; Defined at:
   688 ;;		line 57 in file "main_TX.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;		None
   691 ;; Auto vars:     Size  Location     Type
   692 ;;		None
   693 ;; Return value:  Size  Location     Type
   694 ;;                  1    wreg      void 
   695 ;; Registers used:
   696 ;;		wreg
   697 ;; Tracked objects:
   698 ;;		On entry : 0/0
   699 ;;		On exit  : 0/0
   700 ;;		Unchanged: 0/0
   701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   702 ;;      Params:         0       0       0       0       0
   703 ;;      Locals:         0       0       0       0       0
   704 ;;      Temps:          0       0       0       0       0
   705 ;;      Totals:         0       0       0       0       0
   706 ;;Total ram usage:        0 bytes
   707 ;; Hardware stack levels used: 1
   708 ;; This function calls:
   709 ;;		Nothing
   710 ;; This function is called by:
   711 ;;		_main
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715     074E                     _UART_TX_Init:	
   716                           ;psect for function _UART_TX_Init
   717                           
   718     074E                     l621:	
   719                           ;incstack = 0
   720                           ; Regs used in _UART_TX_Init: [wreg]
   721                           
   722                           
   723                           ;main_TX.c: 59:     BRGH = 1;
   724     074E  1683               	bsf	3,5	;RP0=1, select bank1
   725     074F  1303               	bcf	3,6	;RP1=0, select bank1
   726     0750  1518               	bsf	24,2	;volatile
   727     0751                     l623:
   728                           
   729                           ;main_TX.c: 60:     SPBRG = 25;
   730     0751  3019               	movlw	25
   731     0752  0099               	movwf	25	;volatile
   732     0753                     l625:
   733                           
   734                           ;main_TX.c: 63:     SYNC = 0;
   735     0753  1218               	bcf	24,4	;volatile
   736     0754                     l627:
   737                           
   738                           ;main_TX.c: 64:     SPEN = 1;
   739     0754  1283               	bcf	3,5	;RP0=0, select bank0
   740     0755  1303               	bcf	3,6	;RP1=0, select bank0
   741     0756  1798               	bsf	24,7	;volatile
   742     0757                     l629:
   743                           
   744                           ;main_TX.c: 67:     TRISC6 = 1;
   745     0757  1683               	bsf	3,5	;RP0=1, select bank1
   746     0758  1303               	bcf	3,6	;RP1=0, select bank1
   747     0759  1707               	bsf	7,6	;volatile
   748     075A                     l631:
   749                           
   750                           ;main_TX.c: 68:     TRISC7 = 1;
   751     075A  1787               	bsf	7,7	;volatile
   752     075B                     l633:
   753                           
   754                           ;main_TX.c: 69:     TXEN = 1;
   755     075B  1698               	bsf	24,5	;volatile
   756     075C                     l53:
   757     075C  0008               	return
   758     075D                     __end_of_UART_TX_Init:
   759                           
   760                           	psect	text5
   761     0741                     __ptext5:	
   762 ;; *************** function _Port_Init *****************
   763 ;; Defined at:
   764 ;;		line 26 in file "main_TX.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;		None
   767 ;; Auto vars:     Size  Location     Type
   768 ;;		None
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      void 
   771 ;; Registers used:
   772 ;;		wreg, status,2, status,0, btemp+1
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   778 ;;      Params:         0       0       0       0       0
   779 ;;      Locals:         0       0       0       0       0
   780 ;;      Temps:          0       0       0       0       0
   781 ;;      Totals:         0       0       0       0       0
   782 ;;Total ram usage:        0 bytes
   783 ;; Hardware stack levels used: 1
   784 ;; This function calls:
   785 ;;		Nothing
   786 ;; This function is called by:
   787 ;;		_main
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791     0741                     _Port_Init:	
   792                           ;psect for function _Port_Init
   793                           
   794     0741                     l619:	
   795                           ;incstack = 0
   796                           ; Regs used in _Port_Init: [wreg+status,2+status,0+btemp+1]
   797                           
   798                           
   799                           ;main_TX.c: 27:    TRISB|=0x07;
   800     0741  3007               	movlw	7
   801     0742  00FF               	movwf	btemp+1
   802     0743  087F               	movf	btemp+1,w
   803     0744  1683               	bsf	3,5	;RP0=1, select bank1
   804     0745  1303               	bcf	3,6	;RP1=0, select bank1
   805     0746  0486               	iorwf	6,f	;volatile
   806                           
   807                           ;main_TX.c: 28:    PORTB&=~0x07;
   808     0747  30F8               	movlw	248
   809     0748  00FF               	movwf	btemp+1
   810     0749  087F               	movf	btemp+1,w
   811     074A  1283               	bcf	3,5	;RP0=0, select bank0
   812     074B  1303               	bcf	3,6	;RP1=0, select bank0
   813     074C  0586               	andwf	6,f	;volatile
   814     074D                     l39:
   815     074D  0008               	return
   816     074E                     __end_of_Port_Init:
   817     007E                     btemp	set	126	;btemp
   818     007E                     wtemp0	set	126
   819                           
   820                           	psect	config
   821                           
   822                           ;Config register CONFIG @ 0x2007
   823                           ;	Oscillator Selection bits
   824                           ;	FOSC = XT, XT oscillator
   825                           ;	Watchdog Timer Enable bit
   826                           ;	WDTE = OFF, WDT disabled
   827                           ;	Power-up Timer Enable bit
   828                           ;	PWRTE = ON, PWRT enabled
   829                           ;	Brown-out Reset Enable bit
   830                           ;	BOREN = ON, BOR enabled
   831                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   832                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   833                           ;	Data EEPROM Memory Code Protection bit
   834                           ;	CPD = OFF, Data EEPROM code protection off
   835                           ;	Flash Program Memory Write Enable bits
   836                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   837                           ;	In-Circuit Debugger Mode bit
   838                           ;	DEBUG = 0x1, unprogrammed default
   839                           ;	Flash Program Memory Code Protection bit
   840                           ;	CP = OFF, Code protection off
   841     2007                     	org	8199
   842     2007  3F71               	dw	16241

Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     25      25
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sp__strcpy	PTR unsigned char  size(1) Largest target is 25
		 -> main@string(BANK0[25]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 25
		 -> main@string(BANK0[25]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 25
		 -> main@string(BANK0[25]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_1(CODE[6]), STR_2(CODE[7]), 

    UART_Write_String@text	PTR unsigned char  size(1) Largest target is 25
		 -> main@string(BANK0[25]), 


Critical Paths under _main in COMMON

    _main->_UART_Write_String
    _UART_Write_String->_UART_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0     466
                                              5 COMMON     3     3      0
                                              0 BANK0     25    25      0
                          _Port_Init
                       _UART_TX_Init
                  _UART_Write_String
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     291
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _UART_Write_String                                    4     4      0     105
                                              1 COMMON     4     4      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Port_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Port_Init
   _UART_TX_Init
   _UART_Write_String
     _UART_Write
   _strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      19       5       31.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sun May 26 23:28:50 2024

                        pc 0002                         l53 075C                         l39 074D  
                       l56 0736                         l65 079E                         l59 0740  
                       u10 073C                         u11 073B                         u30 0798  
                       u31 0797                         u70 0777                         u71 0776  
                       u80 07AF                         u81 07AE                         u90 07CA  
                       u91 07C9                         fsr 0004                        l621 074E  
                      l613 0777                        l631 075A                        l623 0751  
                      l615 0736                        l633 075B                        l625 0753  
                      l617 073C                        l641 077C                        l619 0741  
                      l627 0754                        l643 0787                        l629 0757  
                      l645 078D                        l647 0798                        l639 0779  
                      l671 075E                        l673 0760                        l681 07AF  
                      l691 07DF                        l683 07B7                        l675 079F  
                      l693 07E5                        l685 07C4                        l677 07A4  
                      l695 07EB                        l687 07CA                        l679 07A9  
                      l689 07D2                        _RB0 0030                        _RB1 0031  
                      _RB2 0032                        u100 07E5                        u101 07E4  
                      u117 07BD                        u127 07D8                        u137 07F1  
                      fsr0 0004                        indf 0000                       STR_1 0010  
                     STR_2 0009                       _BRGH 04C2                       _SPEN 00C7  
                     _TRMT 04C1                       _TXEN 04C5                       _SYNC 04C4  
                     _main 079F                       btemp 007E                       start 0000  
                    ?_main 0070                      _SPBRG 0099                      _PORTB 0006  
                    _TRISB 0086                      _TXREG 0019                ?_UART_Write 0070  
                    pclath 000A                      status 0003                      wtemp0 007E  
          __initialization 07FC               __end_of_main 07FC                     ??_main 0075  
                   _TRISC6 043E                     _TRISC7 043F                     _strcpy 075D  
  __end_of__initialization 07FC             __pcstackCOMMON 0070          __end_of_Port_Init 074E  
               __pmaintext 079F                    ?_strcpy 0070               ??_UART_Write 0070  
            ?_UART_TX_Init 0070                 __stringtab 0003         __end_of_UART_Write 0741  
                  __ptext1 075D                    __ptext2 0778                    __ptext3 0735  
                  __ptext4 074E                    __ptext5 0741             ??_UART_TX_Init 0070  
     end_of_initialization 07FC                    strcpy@d 0071             UART_Write@data 0070  
    UART_Write_String@text 0074                 main@string 0020             __end_of_strcpy 0778  
      start_initialization 07FC                  _Port_Init 0741       __end_of_UART_TX_Init 075D  
                 ??_strcpy 0071                  ___latbits 0002              __pcstackBANK0 0020  
               ?_Port_Init 0070                  __pstrings 0003                __stringbase 0008  
              ??_Port_Init 0070         __end_of__stringtab 0009          _UART_Write_String 0778  
       ?_UART_Write_String 0070               _UART_TX_Init 074E                 strcpy@dest 0072  
      ??_UART_Write_String 0071  __end_of_UART_Write_String 079F                  strcpy@src 0070  
                stringcode 0003         UART_Write_String@i 0072                   stringdir 0003  
                 stringtab 0003                 _UART_Write 0735  
