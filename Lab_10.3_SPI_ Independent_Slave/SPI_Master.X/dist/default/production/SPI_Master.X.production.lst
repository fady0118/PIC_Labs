

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sun May 26 01:24:04 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 12/10/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0000                     	;# 
    54     0001                     	;# 
    55     0002                     	;# 
    56     0003                     	;# 
    57     0004                     	;# 
    58     0005                     	;# 
    59     0006                     	;# 
    60     0007                     	;# 
    61     0008                     	;# 
    62     0009                     	;# 
    63     000A                     	;# 
    64     000B                     	;# 
    65     000C                     	;# 
    66     000D                     	;# 
    67     000E                     	;# 
    68     000E                     	;# 
    69     000F                     	;# 
    70     0010                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0013                     	;# 
    74     0014                     	;# 
    75     0015                     	;# 
    76     0015                     	;# 
    77     0016                     	;# 
    78     0017                     	;# 
    79     0018                     	;# 
    80     0019                     	;# 
    81     001A                     	;# 
    82     001B                     	;# 
    83     001B                     	;# 
    84     001C                     	;# 
    85     001D                     	;# 
    86     001E                     	;# 
    87     001F                     	;# 
    88     0081                     	;# 
    89     0085                     	;# 
    90     0086                     	;# 
    91     0087                     	;# 
    92     0088                     	;# 
    93     0089                     	;# 
    94     008C                     	;# 
    95     008D                     	;# 
    96     008E                     	;# 
    97     0091                     	;# 
    98     0092                     	;# 
    99     0093                     	;# 
   100     0094                     	;# 
   101     0098                     	;# 
   102     0099                     	;# 
   103     009C                     	;# 
   104     009D                     	;# 
   105     009E                     	;# 
   106     009F                     	;# 
   107     010C                     	;# 
   108     010D                     	;# 
   109     010E                     	;# 
   110     010F                     	;# 
   111     018C                     	;# 
   112     018D                     	;# 
   113     0000                     	;# 
   114     0001                     	;# 
   115     0002                     	;# 
   116     0003                     	;# 
   117     0004                     	;# 
   118     0005                     	;# 
   119     0006                     	;# 
   120     0007                     	;# 
   121     0008                     	;# 
   122     0009                     	;# 
   123     000A                     	;# 
   124     000B                     	;# 
   125     000C                     	;# 
   126     000D                     	;# 
   127     000E                     	;# 
   128     000E                     	;# 
   129     000F                     	;# 
   130     0010                     	;# 
   131     0011                     	;# 
   132     0012                     	;# 
   133     0013                     	;# 
   134     0014                     	;# 
   135     0015                     	;# 
   136     0015                     	;# 
   137     0016                     	;# 
   138     0017                     	;# 
   139     0018                     	;# 
   140     0019                     	;# 
   141     001A                     	;# 
   142     001B                     	;# 
   143     001B                     	;# 
   144     001C                     	;# 
   145     001D                     	;# 
   146     001E                     	;# 
   147     001F                     	;# 
   148     0081                     	;# 
   149     0085                     	;# 
   150     0086                     	;# 
   151     0087                     	;# 
   152     0088                     	;# 
   153     0089                     	;# 
   154     008C                     	;# 
   155     008D                     	;# 
   156     008E                     	;# 
   157     0091                     	;# 
   158     0092                     	;# 
   159     0093                     	;# 
   160     0094                     	;# 
   161     0098                     	;# 
   162     0099                     	;# 
   163     009C                     	;# 
   164     009D                     	;# 
   165     009E                     	;# 
   166     009F                     	;# 
   167     010C                     	;# 
   168     010D                     	;# 
   169     010E                     	;# 
   170     010F                     	;# 
   171     018C                     	;# 
   172     018D                     	;# 
   173     0013                     _SSPBUF	set	19
   174     0006                     _PORTB	set	6
   175     0008                     _PORTD	set	8
   176     00A4                     _CKP	set	164
   177     00A5                     _SSPEN	set	165
   178     00A0                     _SSPM0	set	160
   179     00A1                     _SSPM1	set	161
   180     00A2                     _SSPM2	set	162
   181     00A3                     _SSPM3	set	163
   182     0033                     _RB3	set	51
   183     0032                     _RB2	set	50
   184     0031                     _RB1	set	49
   185     0030                     _RB0	set	48
   186     0088                     _TRISD	set	136
   187     0086                     _TRISB	set	134
   188     043B                     _TRISC3	set	1083
   189     043C                     _TRISC4	set	1084
   190     043D                     _TRISC5	set	1085
   191     04A7                     _SMP	set	1191
   192     04A6                     _CKE	set	1190
   193                           
   194                           	psect	strings
   195     0003                     __pstrings:
   196     0003                     stringtab:
   197     0003                     __stringtab:
   198     0003                     stringcode:	
   199                           ;	String table - string pointers are 1 byte each
   200                           
   201     0003                     stringdir:
   202     0003  3000               	movlw	high stringdir
   203     0004  008A               	movwf	10
   204     0005  0804               	movf	4,w
   205     0006  0A84               	incf	4,f
   206     0007  0782               	addwf	2,f
   207     0008                     __stringbase:
   208     0008  3400               	retlw	0
   209     0009                     __end_of__stringtab:
   210     0009                     STR_2:
   211     0009  3446               	retlw	70	;'F'
   212     000A  3452               	retlw	82	;'R'
   213     000B  3449               	retlw	73	;'I'
   214     000C  3445               	retlw	69	;'E'
   215     000D  344E               	retlw	78	;'N'
   216     000E  3444               	retlw	68	;'D'
   217     000F  344F               	retlw	79	;'O'
   218     0010  3400               	retlw	0
   219     0011                     STR_1:
   220     0011  3442               	retlw	66	;'B'
   221     0012  3445               	retlw	69	;'E'
   222     0013  3453               	retlw	83	;'S'
   223     0014  3454               	retlw	84	;'T'
   224     0015  344F               	retlw	79	;'O'
   225     0016  3400               	retlw	0
   226                           
   227                           	psect	cinit
   228     07FC                     start_initialization:	
   229                           ; #config settings
   230                           
   231     07FC                     __initialization:
   232     07FC                     end_of_initialization:	
   233                           ;End of C runtime variable initialization code
   234                           
   235     07FC                     __end_of__initialization:
   236     07FC  0183               	clrf	3
   237     07FD  120A  118A  2F76   	ljmp	_main	;jump to C main() function
   238                           
   239                           	psect	cstackCOMMON
   240     0070                     __pcstackCOMMON:
   241     0070                     ?_Port_Init:
   242     0070                     ??_Port_Init:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0070                     ?_SPI_Master_Init:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ??_SPI_Master_Init:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ?_strcpy:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0070                     ?_Shift_String_Right_Add_Length:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0070                     ?_SPI_Write_String:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     0070                     ?_main:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     0070                     ?_Write_data:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     0070                     ??_Write_data:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     0070                     ?_strlen:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     0070                     Write_data@data:	
   273                           ; 2 bytes @ 0x0
   274                           
   275     0070                     strcpy@src:	
   276                           ; 1 bytes @ 0x0
   277                           
   278                           
   279                           ; 1 bytes @ 0x0
   280     0070                     	ds	1
   281     0071                     ??_strcpy:
   282     0071                     ??_SPI_Write_String:	
   283                           ; 1 bytes @ 0x1
   284                           
   285     0071                     strcpy@d:	
   286                           ; 1 bytes @ 0x1
   287                           
   288                           
   289                           ; 1 bytes @ 0x1
   290     0071                     	ds	1
   291     0072                     ??_strlen:
   292     0072                     strcpy@dest:	
   293                           ; 1 bytes @ 0x2
   294                           
   295     0072                     strlen@a:	
   296                           ; 1 bytes @ 0x2
   297                           
   298                           
   299                           ; 1 bytes @ 0x2
   300     0072                     	ds	1
   301     0073                     SPI_Write_String@i:
   302     0073                     strlen@s:	
   303                           ; 1 bytes @ 0x3
   304                           
   305                           
   306                           ; 1 bytes @ 0x3
   307     0073                     	ds	1
   308     0074                     ??_Shift_String_Right_Add_Length:
   309     0074                     SPI_Write_String@Text:	
   310                           ; 1 bytes @ 0x4
   311                           
   312                           
   313                           ; 1 bytes @ 0x4
   314     0074                     	ds	2
   315     0076                     Shift_String_Right_Add_Length@len:
   316                           
   317                           ; 1 bytes @ 0x6
   318     0076                     	ds	1
   319     0077                     Shift_String_Right_Add_Length@i_97:
   320                           
   321                           ; 2 bytes @ 0x7
   322     0077                     	ds	2
   323     0079                     Shift_String_Right_Add_Length@str:
   324                           
   325                           ; 1 bytes @ 0x9
   326     0079                     	ds	1
   327     007A                     ??_main:
   328                           
   329                           ; 1 bytes @ 0xA
   330     007A                     	ds	3
   331                           
   332                           	psect	cstackBANK0
   333     0020                     __pcstackBANK0:
   334     0020                     main@buffer:
   335                           
   336                           ; 20 bytes @ 0x0
   337     0020                     	ds	20
   338                           
   339                           	psect	maintext
   340     0776                     __pmaintext:	
   341 ;;
   342 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   343 ;;
   344 ;; *************** function _main *****************
   345 ;; Defined at:
   346 ;;		line 27 in file "main.c"
   347 ;; Parameters:    Size  Location     Type
   348 ;;		None
   349 ;; Auto vars:     Size  Location     Type
   350 ;;  buffer         20    0[BANK0 ] unsigned char [20]
   351 ;; Return value:  Size  Location     Type
   352 ;;                  1    wreg      void 
   353 ;; Registers used:
   354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   355 ;; Tracked objects:
   356 ;;		On entry : B00/0
   357 ;;		On exit  : 0/0
   358 ;;		Unchanged: 0/0
   359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   360 ;;      Params:         0       0       0       0       0
   361 ;;      Locals:         0      20       0       0       0
   362 ;;      Temps:          3       0       0       0       0
   363 ;;      Totals:         3      20       0       0       0
   364 ;;Total ram usage:       23 bytes
   365 ;; Hardware stack levels required when called: 2
   366 ;; This function calls:
   367 ;;		_Port_Init
   368 ;;		_SPI_Master_Init
   369 ;;		_SPI_Write_String
   370 ;;		_Shift_String_Right_Add_Length
   371 ;;		_strcpy
   372 ;; This function is called by:
   373 ;;		Startup code after reset
   374 ;; This function uses a non-reentrant model
   375 ;;
   376                           
   377     0776                     _main:	
   378                           ;psect for function _main
   379                           
   380     0776                     l750:	
   381                           ;incstack = 0
   382                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   383                           
   384                           
   385                           ;main.c: 28:     Port_Init();
   386     0776  120A  118A  26E9  120A  118A  	fcall	_Port_Init
   387     077B                     l752:
   388                           
   389                           ;main.c: 29:     SPI_Master_Init();
   390     077B  120A  118A  26C2  120A  118A  	fcall	_SPI_Master_Init
   391     0780                     l754:
   392                           
   393                           ;main.c: 33:     if(RB0){
   394     0780  1283               	bcf	3,5	;RP0=0, select bank0
   395     0781  1303               	bcf	3,6	;RP1=0, select bank0
   396     0782  1C06               	btfss	6,0	;volatile
   397     0783  2F85               	goto	u121
   398     0784  2F86               	goto	u120
   399     0785                     u121:
   400     0785  2FA1               	goto	l760
   401     0786                     u120:
   402     0786                     l756:
   403                           
   404                           ;main.c: 37:     strcpy(buffer,"BESTO");
   405     0786  3009               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   406     0787  00F0               	movwf	strcpy@src
   407     0788  3020               	movlw	(low (main@buffer| 0))& (0+255)
   408     0789  120A  118A  2702  120A  118A  	fcall	_strcpy
   409                           
   410                           ;main.c: 39:     Shift_String_Right_Add_Length(buffer);
   411     078E  3020               	movlw	(low (main@buffer| 0))& (0+255)
   412     078F  120A  118A  2744  120A  118A  	fcall	_Shift_String_Right_Add_Length
   413     0794                     l758:
   414                           
   415                           ;main.c: 40:     _delay((unsigned long)((350)*(4000000/4000.0)));
   416     0794  3002               	movlw	2
   417     0795  00FC               	movwf	??_main+2
   418     0796  30C7               	movlw	199
   419     0797  00FB               	movwf	??_main+1
   420     0798  3088               	movlw	136
   421     0799  00FA               	movwf	??_main
   422     079A                     u167:
   423     079A  0BFA               	decfsz	??_main,f
   424     079B  2F9A               	goto	u167
   425     079C  0BFB               	decfsz	??_main+1,f
   426     079D  2F9A               	goto	u167
   427     079E  0BFC               	decfsz	??_main+2,f
   428     079F  2F9A               	goto	u167
   429     07A0  0000               	nop
   430     07A1                     l760:
   431                           
   432                           ;main.c: 42:     if(RB1){
   433     07A1  1283               	bcf	3,5	;RP0=0, select bank0
   434     07A2  1303               	bcf	3,6	;RP1=0, select bank0
   435     07A3  1C86               	btfss	6,1	;volatile
   436     07A4  2FA6               	goto	u131
   437     07A5  2FA7               	goto	u130
   438     07A6                     u131:
   439     07A6  2FC2               	goto	l766
   440     07A7                     u130:
   441     07A7                     l762:
   442                           
   443                           ;main.c: 46:     strcpy(buffer,"FRIENDO");
   444     07A7  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   445     07A8  00F0               	movwf	strcpy@src
   446     07A9  3020               	movlw	(low (main@buffer| 0))& (0+255)
   447     07AA  120A  118A  2702  120A  118A  	fcall	_strcpy
   448                           
   449                           ;main.c: 48:     Shift_String_Right_Add_Length(buffer);
   450     07AF  3020               	movlw	(low (main@buffer| 0))& (0+255)
   451     07B0  120A  118A  2744  120A  118A  	fcall	_Shift_String_Right_Add_Length
   452     07B5                     l764:
   453                           
   454                           ;main.c: 49:     _delay((unsigned long)((350)*(4000000/4000.0)));
   455     07B5  3002               	movlw	2
   456     07B6  00FC               	movwf	??_main+2
   457     07B7  30C7               	movlw	199
   458     07B8  00FB               	movwf	??_main+1
   459     07B9  3088               	movlw	136
   460     07BA  00FA               	movwf	??_main
   461     07BB                     u177:
   462     07BB  0BFA               	decfsz	??_main,f
   463     07BC  2FBB               	goto	u177
   464     07BD  0BFB               	decfsz	??_main+1,f
   465     07BE  2FBB               	goto	u177
   466     07BF  0BFC               	decfsz	??_main+2,f
   467     07C0  2FBB               	goto	u177
   468     07C1  0000               	nop
   469     07C2                     l766:
   470                           
   471                           ;main.c: 51:     if(RB2){
   472     07C2  1283               	bcf	3,5	;RP0=0, select bank0
   473     07C3  1303               	bcf	3,6	;RP1=0, select bank0
   474     07C4  1D06               	btfss	6,2	;volatile
   475     07C5  2FC7               	goto	u141
   476     07C6  2FC8               	goto	u140
   477     07C7                     u141:
   478     07C7  2FDD               	goto	l774
   479     07C8                     u140:
   480     07C8                     l768:
   481                           
   482                           ;main.c: 52:     PORTD=0x02;
   483     07C8  3002               	movlw	2
   484     07C9  0088               	movwf	8	;volatile
   485     07CA                     l770:
   486                           
   487                           ;main.c: 53:     SPI_Write_String(buffer);
   488     07CA  3020               	movlw	(low (main@buffer| 0))& (0+255)
   489     07CB  120A  118A  271D  120A  118A  	fcall	_SPI_Write_String
   490     07D0                     l772:
   491                           
   492                           ;main.c: 54:       _delay((unsigned long)((350)*(4000000/4000.0)));
   493     07D0  3002               	movlw	2
   494     07D1  00FC               	movwf	??_main+2
   495     07D2  30C7               	movlw	199
   496     07D3  00FB               	movwf	??_main+1
   497     07D4  3088               	movlw	136
   498     07D5  00FA               	movwf	??_main
   499     07D6                     u187:
   500     07D6  0BFA               	decfsz	??_main,f
   501     07D7  2FD6               	goto	u187
   502     07D8  0BFB               	decfsz	??_main+1,f
   503     07D9  2FD6               	goto	u187
   504     07DA  0BFC               	decfsz	??_main+2,f
   505     07DB  2FD6               	goto	u187
   506     07DC  0000               	nop
   507     07DD                     l774:
   508                           
   509                           ;main.c: 56:     if(RB3){
   510     07DD  1283               	bcf	3,5	;RP0=0, select bank0
   511     07DE  1303               	bcf	3,6	;RP1=0, select bank0
   512     07DF  1D86               	btfss	6,3	;volatile
   513     07E0  2FE2               	goto	u151
   514     07E1  2FE3               	goto	u150
   515     07E2                     u151:
   516     07E2  2F80               	goto	l754
   517     07E3                     u150:
   518     07E3                     l776:
   519                           
   520                           ;main.c: 57:     PORTD=0x01;
   521     07E3  3001               	movlw	1
   522     07E4  0088               	movwf	8	;volatile
   523     07E5                     l778:
   524                           
   525                           ;main.c: 58:     SPI_Write_String(buffer);
   526     07E5  3020               	movlw	(low (main@buffer| 0))& (0+255)
   527     07E6  120A  118A  271D  120A  118A  	fcall	_SPI_Write_String
   528     07EB                     l780:
   529                           
   530                           ;main.c: 59:       _delay((unsigned long)((350)*(4000000/4000.0)));
   531     07EB  3002               	movlw	2
   532     07EC  00FC               	movwf	??_main+2
   533     07ED  30C7               	movlw	199
   534     07EE  00FB               	movwf	??_main+1
   535     07EF  3088               	movlw	136
   536     07F0  00FA               	movwf	??_main
   537     07F1                     u197:
   538     07F1  0BFA               	decfsz	??_main,f
   539     07F2  2FF1               	goto	u197
   540     07F3  0BFB               	decfsz	??_main+1,f
   541     07F4  2FF1               	goto	u197
   542     07F5  0BFC               	decfsz	??_main+2,f
   543     07F6  2FF1               	goto	u197
   544     07F7  0000               	nop
   545     07F8  2F80               	goto	l754
   546     07F9  120A  118A  2800   	ljmp	start
   547     07FC                     __end_of_main:
   548                           
   549                           	psect	text1
   550     0702                     __ptext1:	
   551 ;; *************** function _strcpy *****************
   552 ;; Defined at:
   553 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\strcpy.c"
   554 ;; Parameters:    Size  Location     Type
   555 ;;  dest            1    wreg     PTR unsigned char 
   556 ;;		 -> main@buffer(20), 
   557 ;;  src             1    0[COMMON] PTR const unsigned char 
   558 ;;		 -> STR_2(8), STR_1(6), 
   559 ;; Auto vars:     Size  Location     Type
   560 ;;  dest            1    2[COMMON] PTR unsigned char 
   561 ;;		 -> main@buffer(20), 
   562 ;;  d               1    1[COMMON] PTR unsigned char 
   563 ;;		 -> main@buffer(20), 
   564 ;; Return value:  Size  Location     Type
   565 ;;                  1    wreg      PTR unsigned char 
   566 ;; Registers used:
   567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   568 ;; Tracked objects:
   569 ;;		On entry : 0/0
   570 ;;		On exit  : 0/0
   571 ;;		Unchanged: 0/0
   572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   573 ;;      Params:         1       0       0       0       0
   574 ;;      Locals:         2       0       0       0       0
   575 ;;      Temps:          0       0       0       0       0
   576 ;;      Totals:         3       0       0       0       0
   577 ;;Total ram usage:        3 bytes
   578 ;; Hardware stack levels used: 2
   579 ;; This function calls:
   580 ;;		Nothing
   581 ;; This function is called by:
   582 ;;		_main
   583 ;; This function uses a non-reentrant model
   584 ;;
   585                           
   586     0702                     _strcpy:	
   587                           ;psect for function _strcpy
   588                           
   589                           
   590                           ;incstack = 0
   591                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   592                           ;strcpy@dest stored from wreg
   593     0702  00F2               	movwf	strcpy@dest
   594     0703                     l730:
   595     0703  0872               	movf	strcpy@dest,w
   596     0704  00F1               	movwf	strcpy@d
   597     0705                     l732:
   598     0705  3001               	movlw	1
   599     0706  07F0               	addwf	strcpy@src,f
   600     0707  30FF               	movlw	-1
   601     0708  0770               	addwf	strcpy@src,w
   602     0709  0084               	movwf	4
   603     070A  120A  118A  2003  120A  118A  	fcall	stringdir
   604     070F  00FF               	movwf	btemp+1
   605     0710  0871               	movf	strcpy@d,w
   606     0711  0084               	movwf	4
   607     0712  3001               	movlw	1
   608     0713  07F1               	addwf	strcpy@d,f
   609     0714  087F               	movf	btemp+1,w
   610     0715  1383               	bcf	3,7	;select IRP bank0
   611     0716  0080               	movwf	0
   612     0717  0800               	movf	0,w
   613     0718  1D03               	btfss	3,2
   614     0719  2F1B               	goto	u101
   615     071A  2F1C               	goto	u100
   616     071B                     u101:
   617     071B  2F05               	goto	l732
   618     071C                     u100:
   619     071C                     l634:
   620     071C  0008               	return
   621     071D                     __end_of_strcpy:
   622                           
   623                           	psect	text2
   624     0744                     __ptext2:	
   625 ;; *************** function _Shift_String_Right_Add_Length *****************
   626 ;; Defined at:
   627 ;;		line 105 in file "main.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;  str             1    wreg     PTR unsigned char 
   630 ;;		 -> main@buffer(20), 
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  str             1    9[COMMON] PTR unsigned char 
   633 ;;		 -> main@buffer(20), 
   634 ;;  i               2    7[COMMON] int 
   635 ;;  i               4    0        long 
   636 ;;  len             1    6[COMMON] unsigned char 
   637 ;; Return value:  Size  Location     Type
   638 ;;                  1    wreg      void 
   639 ;; Registers used:
   640 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   641 ;; Tracked objects:
   642 ;;		On entry : 0/0
   643 ;;		On exit  : 0/0
   644 ;;		Unchanged: 0/0
   645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   646 ;;      Params:         0       0       0       0       0
   647 ;;      Locals:         4       0       0       0       0
   648 ;;      Temps:          2       0       0       0       0
   649 ;;      Totals:         6       0       0       0       0
   650 ;;Total ram usage:        6 bytes
   651 ;; Hardware stack levels used: 1
   652 ;; Hardware stack levels required when called: 1
   653 ;; This function calls:
   654 ;;		_strlen
   655 ;; This function is called by:
   656 ;;		_main
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660     0744                     _Shift_String_Right_Add_Length:	
   661                           ;psect for function _Shift_String_Right_Add_Length
   662                           
   663                           
   664                           ;incstack = 0
   665                           ; Regs used in _Shift_String_Right_Add_Length: [wreg-fsr0h+status,2+status,0+btemp+1+pcl
      +                          ath+cstack]
   666                           ;Shift_String_Right_Add_Length@str stored from wreg
   667     0744  00F9               	movwf	Shift_String_Right_Add_Length@str
   668     0745                     l734:
   669                           
   670                           ;main.c: 106:     int32_t i;;main.c: 107:     char len = strlen(str);
   671     0745  0879               	movf	Shift_String_Right_Add_Length@str,w
   672     0746  120A  118A  26D2  120A  118A  	fcall	_strlen
   673     074B  0870               	movf	?_strlen,w
   674     074C  00F6               	movwf	Shift_String_Right_Add_Length@len
   675     074D                     l736:
   676                           
   677                           ;main.c: 109:     for (int i = len; i >= 0; --i) {
   678     074D  0876               	movf	Shift_String_Right_Add_Length@len,w
   679     074E  00F4               	movwf	??_Shift_String_Right_Add_Length
   680     074F  01F5               	clrf	??_Shift_String_Right_Add_Length+1
   681     0750  0874               	movf	??_Shift_String_Right_Add_Length,w
   682     0751  00F7               	movwf	Shift_String_Right_Add_Length@i_97
   683     0752  0875               	movf	??_Shift_String_Right_Add_Length+1,w
   684     0753  00F8               	movwf	Shift_String_Right_Add_Length@i_97+1
   685     0754                     l738:
   686     0754  1FF8               	btfss	Shift_String_Right_Add_Length@i_97+1,7
   687     0755  2F57               	goto	u111
   688     0756  2F58               	goto	u110
   689     0757                     u111:
   690     0757  2F59               	goto	l742
   691     0758                     u110:
   692     0758  2F6F               	goto	l748
   693     0759                     l742:
   694                           
   695                           ;main.c: 110:         str[i + 1] = str[i];
   696     0759  0877               	movf	Shift_String_Right_Add_Length@i_97,w
   697     075A  0779               	addwf	Shift_String_Right_Add_Length@str,w
   698     075B  00F4               	movwf	??_Shift_String_Right_Add_Length
   699     075C  0874               	movf	??_Shift_String_Right_Add_Length,w
   700     075D  0084               	movwf	4
   701     075E  1383               	bcf	3,7	;select IRP bank0
   702     075F  0800               	movf	0,w
   703     0760  00FF               	movwf	btemp+1
   704     0761  0877               	movf	Shift_String_Right_Add_Length@i_97,w
   705     0762  0779               	addwf	Shift_String_Right_Add_Length@str,w
   706     0763  00F5               	movwf	??_Shift_String_Right_Add_Length+1
   707     0764  0A75               	incf	??_Shift_String_Right_Add_Length+1,w
   708     0765  0084               	movwf	4
   709     0766  087F               	movf	btemp+1,w
   710     0767  0080               	movwf	0
   711     0768                     l744:
   712                           
   713                           ;main.c: 111:     }
   714     0768  30FF               	movlw	255
   715     0769  07F7               	addwf	Shift_String_Right_Add_Length@i_97,f
   716     076A  1803               	skipnc
   717     076B  0AF8               	incf	Shift_String_Right_Add_Length@i_97+1,f
   718     076C  30FF               	movlw	255
   719     076D  07F8               	addwf	Shift_String_Right_Add_Length@i_97+1,f
   720     076E  2F54               	goto	l738
   721     076F                     l748:
   722                           
   723                           ;main.c: 112: str[0]=len+0x30;
   724     076F  0879               	movf	Shift_String_Right_Add_Length@str,w
   725     0770  0084               	movwf	4
   726     0771  0876               	movf	Shift_String_Right_Add_Length@len,w
   727     0772  3E30               	addlw	48
   728     0773  1383               	bcf	3,7	;select IRP bank0
   729     0774  0080               	movwf	0
   730     0775                     l86:
   731     0775  0008               	return
   732     0776                     __end_of_Shift_String_Right_Add_Length:
   733                           
   734                           	psect	text3
   735     06D2                     __ptext3:	
   736 ;; *************** function _strlen *****************
   737 ;; Defined at:
   738 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\strlen.c"
   739 ;; Parameters:    Size  Location     Type
   740 ;;  s               1    wreg     PTR const unsigned char 
   741 ;;		 -> main@buffer(20), 
   742 ;; Auto vars:     Size  Location     Type
   743 ;;  s               1    3[COMMON] PTR const unsigned char 
   744 ;;		 -> main@buffer(20), 
   745 ;;  a               1    2[COMMON] PTR const unsigned char 
   746 ;;		 -> main@buffer(20), 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  2    0[COMMON] unsigned int 
   749 ;; Registers used:
   750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   756 ;;      Params:         2       0       0       0       0
   757 ;;      Locals:         2       0       0       0       0
   758 ;;      Temps:          0       0       0       0       0
   759 ;;      Totals:         4       0       0       0       0
   760 ;;Total ram usage:        4 bytes
   761 ;; Hardware stack levels used: 1
   762 ;; This function calls:
   763 ;;		Nothing
   764 ;; This function is called by:
   765 ;;		_Shift_String_Right_Add_Length
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769     06D2                     _strlen:	
   770                           ;psect for function _strlen
   771                           
   772                           
   773                           ;incstack = 0
   774                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+btemp+1]
   775                           ;strlen@s stored from wreg
   776     06D2  00F3               	movwf	strlen@s
   777     06D3                     l720:
   778     06D3  0873               	movf	strlen@s,w
   779     06D4  00F2               	movwf	strlen@a
   780     06D5  2EDA               	goto	l724
   781     06D6                     l722:
   782     06D6  3001               	movlw	1
   783     06D7  00FF               	movwf	btemp+1
   784     06D8  087F               	movf	btemp+1,w
   785     06D9  07F3               	addwf	strlen@s,f
   786     06DA                     l724:
   787     06DA  0873               	movf	strlen@s,w
   788     06DB  0084               	movwf	4
   789     06DC  1383               	bcf	3,7	;select IRP bank0
   790     06DD  0800               	movf	0,w
   791     06DE  1D03               	btfss	3,2
   792     06DF  2EE1               	goto	u91
   793     06E0  2EE2               	goto	u90
   794     06E1                     u91:
   795     06E1  2ED6               	goto	l722
   796     06E2                     u90:
   797     06E2                     l726:
   798     06E2  0872               	movf	strlen@a,w
   799     06E3  0273               	subwf	strlen@s,w
   800     06E4  00F0               	movwf	?_strlen
   801     06E5  01F1               	clrf	?_strlen+1
   802     06E6  1BF0               	btfsc	?_strlen,7
   803     06E7  03F1               	decf	?_strlen+1,f
   804     06E8                     l640:
   805     06E8  0008               	return
   806     06E9                     __end_of_strlen:
   807                           
   808                           	psect	text4
   809     071D                     __ptext4:	
   810 ;; *************** function _SPI_Write_String *****************
   811 ;; Defined at:
   812 ;;		line 97 in file "main.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;  Text            1    wreg     PTR unsigned char 
   815 ;;		 -> main@buffer(20), 
   816 ;; Auto vars:     Size  Location     Type
   817 ;;  Text            1    4[COMMON] PTR unsigned char 
   818 ;;		 -> main@buffer(20), 
   819 ;;  i               1    3[COMMON] unsigned char 
   820 ;; Return value:  Size  Location     Type
   821 ;;                  1    wreg      void 
   822 ;; Registers used:
   823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   829 ;;      Params:         0       0       0       0       0
   830 ;;      Locals:         2       0       0       0       0
   831 ;;      Temps:          2       0       0       0       0
   832 ;;      Totals:         4       0       0       0       0
   833 ;;Total ram usage:        4 bytes
   834 ;; Hardware stack levels used: 1
   835 ;; Hardware stack levels required when called: 1
   836 ;; This function calls:
   837 ;;		_Write_data
   838 ;; This function is called by:
   839 ;;		_main
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843     071D                     _SPI_Write_String:	
   844                           ;psect for function _SPI_Write_String
   845                           
   846                           
   847                           ;incstack = 0
   848                           ; Regs used in _SPI_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   849                           ;SPI_Write_String@Text stored from wreg
   850     071D  00F4               	movwf	SPI_Write_String@Text
   851     071E                     l678:
   852                           
   853                           ;main.c: 98:     uint8_t i;;main.c: 99:     for(i=0;Text[i]!='\0';i++){
   854     071E  01F3               	clrf	SPI_Write_String@i
   855     071F  2F38               	goto	l686
   856     0720                     l680:
   857                           
   858                           ;main.c: 100:     Write_data(Text[i]);
   859     0720  0873               	movf	SPI_Write_String@i,w
   860     0721  0774               	addwf	SPI_Write_String@Text,w
   861     0722  00F1               	movwf	??_SPI_Write_String
   862     0723  0871               	movf	??_SPI_Write_String,w
   863     0724  0084               	movwf	4
   864     0725  0800               	movf	0,w
   865     0726  120A  118A  26BC  120A  118A  	fcall	_Write_data
   866     072B                     l682:
   867                           
   868                           ;main.c: 101:      _delay((unsigned long)((100)*(4000000/4000.0)));
   869     072B  3082               	movlw	130
   870     072C  00F2               	movwf	??_SPI_Write_String+1
   871     072D  30DD               	movlw	221
   872     072E  00F1               	movwf	??_SPI_Write_String
   873     072F                     u207:
   874     072F  0BF1               	decfsz	??_SPI_Write_String,f
   875     0730  2F2F               	goto	u207
   876     0731  0BF2               	decfsz	??_SPI_Write_String+1,f
   877     0732  2F2F               	goto	u207
   878     0733  2F34               	nop2
   879     0734                     l684:
   880                           
   881                           ;main.c: 102:     }
   882     0734  3001               	movlw	1
   883     0735  00FF               	movwf	btemp+1
   884     0736  087F               	movf	btemp+1,w
   885     0737  07F3               	addwf	SPI_Write_String@i,f
   886     0738                     l686:
   887     0738  0873               	movf	SPI_Write_String@i,w
   888     0739  0774               	addwf	SPI_Write_String@Text,w
   889     073A  00F1               	movwf	??_SPI_Write_String
   890     073B  0871               	movf	??_SPI_Write_String,w
   891     073C  0084               	movwf	4
   892     073D  1383               	bcf	3,7	;select IRP bank0
   893     073E  0800               	movf	0,w
   894     073F  1D03               	btfss	3,2
   895     0740  2F42               	goto	u41
   896     0741  2F43               	goto	u40
   897     0742                     u41:
   898     0742  2F20               	goto	l680
   899     0743                     u40:
   900     0743                     l81:
   901     0743  0008               	return
   902     0744                     __end_of_SPI_Write_String:
   903                           
   904                           	psect	text5
   905     06BC                     __ptext5:	
   906 ;; *************** function _Write_data *****************
   907 ;; Defined at:
   908 ;;		line 93 in file "main.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;  data            1    wreg     unsigned char 
   911 ;; Auto vars:     Size  Location     Type
   912 ;;  data            1    0[COMMON] unsigned char 
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   922 ;;      Params:         0       0       0       0       0
   923 ;;      Locals:         1       0       0       0       0
   924 ;;      Temps:          0       0       0       0       0
   925 ;;      Totals:         1       0       0       0       0
   926 ;;Total ram usage:        1 bytes
   927 ;; Hardware stack levels used: 1
   928 ;; This function calls:
   929 ;;		Nothing
   930 ;; This function is called by:
   931 ;;		_SPI_Write_String
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935     06BC                     _Write_data:	
   936                           ;psect for function _Write_data
   937                           
   938                           
   939                           ;incstack = 0
   940                           ; Regs used in _Write_data: [wreg]
   941                           ;Write_data@data stored from wreg
   942     06BC  00F0               	movwf	Write_data@data
   943     06BD                     l642:
   944                           
   945                           ;main.c: 94: SSPBUF=data;
   946     06BD  0870               	movf	Write_data@data,w
   947     06BE  1283               	bcf	3,5	;RP0=0, select bank0
   948     06BF  1303               	bcf	3,6	;RP1=0, select bank0
   949     06C0  0093               	movwf	19	;volatile
   950     06C1                     l75:
   951     06C1  0008               	return
   952     06C2                     __end_of_Write_data:
   953                           
   954                           	psect	text6
   955     06C2                     __ptext6:	
   956 ;; *************** function _SPI_Master_Init *****************
   957 ;; Defined at:
   958 ;;		line 76 in file "main.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;		None
   961 ;; Auto vars:     Size  Location     Type
   962 ;;		None
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      void 
   965 ;; Registers used:
   966 ;;		None
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   972 ;;      Params:         0       0       0       0       0
   973 ;;      Locals:         0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0
   975 ;;      Totals:         0       0       0       0       0
   976 ;;Total ram usage:        0 bytes
   977 ;; Hardware stack levels used: 1
   978 ;; This function calls:
   979 ;;		Nothing
   980 ;; This function is called by:
   981 ;;		_main
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985     06C2                     _SPI_Master_Init:	
   986                           ;psect for function _SPI_Master_Init
   987                           
   988     06C2                     l656:	
   989                           ;incstack = 0
   990                           ; Regs used in _SPI_Master_Init: []
   991                           
   992                           
   993                           ;main.c: 78: SSPM3=0;
   994     06C2  1283               	bcf	3,5	;RP0=0, select bank0
   995     06C3  1303               	bcf	3,6	;RP1=0, select bank0
   996     06C4  1194               	bcf	20,3	;volatile
   997                           
   998                           ;main.c: 79: SSPM2=0;
   999     06C5  1114               	bcf	20,2	;volatile
  1000                           
  1001                           ;main.c: 80: SSPM1=0;
  1002     06C6  1094               	bcf	20,1	;volatile
  1003                           
  1004                           ;main.c: 81: SSPM0=0;
  1005     06C7  1014               	bcf	20,0	;volatile
  1006                           
  1007                           ;main.c: 83: SSPEN=1;
  1008     06C8  1694               	bsf	20,5	;volatile
  1009                           
  1010                           ;main.c: 84: CKP=0;
  1011     06C9  1214               	bcf	20,4	;volatile
  1012                           
  1013                           ;main.c: 85: CKE=0;
  1014     06CA  1683               	bsf	3,5	;RP0=1, select bank1
  1015     06CB  1303               	bcf	3,6	;RP1=0, select bank1
  1016     06CC  1314               	bcf	20,6	;volatile
  1017                           
  1018                           ;main.c: 86: SMP=0;
  1019     06CD  1394               	bcf	20,7	;volatile
  1020                           
  1021                           ;main.c: 88: TRISC5=0;
  1022     06CE  1287               	bcf	7,5	;volatile
  1023                           
  1024                           ;main.c: 89: TRISC4=1;
  1025     06CF  1607               	bsf	7,4	;volatile
  1026                           
  1027                           ;main.c: 90: TRISC3=0;
  1028     06D0  1187               	bcf	7,3	;volatile
  1029     06D1                     l72:
  1030     06D1  0008               	return
  1031     06D2                     __end_of_SPI_Master_Init:
  1032                           
  1033                           	psect	text7
  1034     06E9                     __ptext7:	
  1035 ;; *************** function _Port_Init *****************
  1036 ;; Defined at:
  1037 ;;		line 69 in file "main.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;		None
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;		None
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  1    wreg      void 
  1044 ;; Registers used:
  1045 ;;		wreg, status,2, status,0, btemp+1
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1051 ;;      Params:         0       0       0       0       0
  1052 ;;      Locals:         0       0       0       0       0
  1053 ;;      Temps:          0       0       0       0       0
  1054 ;;      Totals:         0       0       0       0       0
  1055 ;;Total ram usage:        0 bytes
  1056 ;; Hardware stack levels used: 1
  1057 ;; This function calls:
  1058 ;;		Nothing
  1059 ;; This function is called by:
  1060 ;;		_main
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064     06E9                     _Port_Init:	
  1065                           ;psect for function _Port_Init
  1066                           
  1067     06E9                     l654:	
  1068                           ;incstack = 0
  1069                           ; Regs used in _Port_Init: [wreg+status,2+status,0+btemp+1]
  1070                           
  1071                           
  1072                           ;main.c: 70:    TRISB|=0x0F;
  1073     06E9  300F               	movlw	15
  1074     06EA  00FF               	movwf	btemp+1
  1075     06EB  087F               	movf	btemp+1,w
  1076     06EC  1683               	bsf	3,5	;RP0=1, select bank1
  1077     06ED  1303               	bcf	3,6	;RP1=0, select bank1
  1078     06EE  0486               	iorwf	6,f	;volatile
  1079                           
  1080                           ;main.c: 71:    PORTB&=~0x0F;
  1081     06EF  30F0               	movlw	240
  1082     06F0  00FF               	movwf	btemp+1
  1083     06F1  087F               	movf	btemp+1,w
  1084     06F2  1283               	bcf	3,5	;RP0=0, select bank0
  1085     06F3  1303               	bcf	3,6	;RP1=0, select bank0
  1086     06F4  0586               	andwf	6,f	;volatile
  1087                           
  1088                           ;main.c: 72:    TRISD&=~0x03;
  1089     06F5  30FC               	movlw	252
  1090     06F6  00FF               	movwf	btemp+1
  1091     06F7  087F               	movf	btemp+1,w
  1092     06F8  1683               	bsf	3,5	;RP0=1, select bank1
  1093     06F9  1303               	bcf	3,6	;RP1=0, select bank1
  1094     06FA  0588               	andwf	8,f	;volatile
  1095                           
  1096                           ;main.c: 73:    PORTD|=0x03;
  1097     06FB  3003               	movlw	3
  1098     06FC  00FF               	movwf	btemp+1
  1099     06FD  087F               	movf	btemp+1,w
  1100     06FE  1283               	bcf	3,5	;RP0=0, select bank0
  1101     06FF  1303               	bcf	3,6	;RP1=0, select bank0
  1102     0700  0488               	iorwf	8,f	;volatile
  1103     0701                     l69:
  1104     0701  0008               	return
  1105     0702                     __end_of_Port_Init:
  1106     007E                     btemp	set	126	;btemp
  1107     007E                     wtemp0	set	126
  1108                           
  1109                           	psect	config
  1110                           
  1111                           ;Config register CONFIG @ 0x2007
  1112                           ;	Oscillator Selection bits
  1113                           ;	FOSC = XT, XT oscillator
  1114                           ;	Watchdog Timer Enable bit
  1115                           ;	WDTE = OFF, WDT disabled
  1116                           ;	Power-up Timer Enable bit
  1117                           ;	PWRTE = ON, PWRT enabled
  1118                           ;	Brown-out Reset Enable bit
  1119                           ;	BOREN = ON, BOR enabled
  1120                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1121                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1122                           ;	Data EEPROM Memory Code Protection bit
  1123                           ;	CPD = OFF, Data EEPROM code protection off
  1124                           ;	Flash Program Memory Write Enable bits
  1125                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1126                           ;	In-Circuit Debugger Mode bit
  1127                           ;	DEBUG = 0x1, unprogrammed default
  1128                           ;	Flash Program Memory Code Protection bit
  1129                           ;	CP = OFF, Code protection off
  1130     2007                     	org	8199
  1131     2007  3F71               	dw	16241

Data Sizes:
    Strings     14
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     20      20
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Shift_String_Right_Add_Length@str	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    SPI_Write_String@Text	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[6]), STR_2(CODE[8]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 


Critical Paths under _main in COMMON

    _main->_Shift_String_Right_Add_Length
    _Shift_String_Right_Add_Length->_strlen
    _SPI_Write_String->_Write_data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0     980
                                             10 COMMON     3     3      0
                                              0 BANK0     20    20      0
                          _Port_Init
                    _SPI_Master_Init
                   _SPI_Write_String
      _Shift_String_Right_Add_Length
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     291
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _Shift_String_Right_Add_Length                       10    10      0     412
                                              4 COMMON     6     6      0
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     123
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _SPI_Write_String                                     4     4      0     135
                                              1 COMMON     4     4      0
                         _Write_data
 ---------------------------------------------------------------------------------
 (2) _Write_data                                           1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPI_Master_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Port_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Port_Init
   _SPI_Master_Init
   _SPI_Write_String
     _Write_data
   _Shift_String_Right_Add_Length
     _strlen
   _strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      14       5       25.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sun May 26 01:24:04 2024

                      _SPI_Master_Init 06C2                                      pc 0002  
                                   l72 06D1                                     l81 0743  
                                   l75 06C1                                     l69 0701  
                                   l86 0775                                     u40 0743  
                                   u41 0742                                     u90 06E2  
                                   u91 06E1                                     fsr 0004  
                                  l640 06E8                                    l720 06D3  
                                  l642 06BD                                    l722 06D6  
                                  l634 071C                                    l730 0703  
                                  l724 06DA                                    l732 0705  
                                  l654 06E9                                    l726 06E2  
                                  l742 0759                                    l734 0745  
                                  l750 0776                                    l656 06C2  
                                  l680 0720                                    l744 0768  
                                  l736 074D                                    l760 07A1  
                                  l752 077B                                    l682 072B  
                                  l738 0754                                    l770 07CA  
                                  l762 07A7                                    l754 0780  
                                  l684 0734                                    l748 076F  
                                  l780 07EB                                    l772 07D0  
                                  l764 07B5                                    l756 0786  
                                  l686 0738                                    l678 071E  
                                  l774 07DD                                    l766 07C2  
                                  l758 0794                                    _CKE 04A6  
                                  l776 07E3                                    l768 07C8  
                                  l778 07E5                                    _CKP 00A4  
                                  _RB0 0030                                    _RB1 0031  
                                  _RB2 0032                                    _RB3 0033  
                                  u100 071C                                    u101 071B  
                                  u110 0758                                    u111 0757  
                                  u120 0786                                    u121 0785  
                                  u130 07A7                                    u131 07A6  
                                  u140 07C8                                    u141 07C7  
                                  u150 07E3                                    u207 072F  
                                  u151 07E2                                    u167 079A  
                                  u177 07BB                                    u187 07D6  
                                  u197 07F1                                    _SMP 04A7  
                                  fsr0 0004                                    indf 0000  
                    ?_SPI_Write_String 0070                                   STR_1 0011  
                                 STR_2 0009                     ??_SPI_Write_String 0071  
                                 _main 0776                                   btemp 007E  
                                 start 0000                                  ?_main 0070  
                                _PORTB 0006                                  _PORTD 0008  
                                _SSPM0 00A0                                  _SSPM1 00A1  
                                _SSPM2 00A2                                  _SSPM3 00A3  
                                _TRISB 0086                                  _TRISD 0088  
                                _SSPEN 00A5                                  pclath 000A  
                                status 0003                                  wtemp0 007E  
              __end_of_SPI_Master_Init 06D2                        __initialization 07FC  
                         __end_of_main 07FC                                 ??_main 007A  
                               _TRISC3 043B                                 _TRISC4 043C  
                               _TRISC5 043D                                 _SSPBUF 0013  
                               _strcpy 0702                                 _strlen 06D2  
      ??_Shift_String_Right_Add_Length 0074                __end_of__initialization 07FC  
                     ?_SPI_Master_Init 0070                         __pcstackCOMMON 0070  
                           _Write_data 06BC                      __end_of_Port_Init 0702  
                           __pmaintext 0776                                ?_strcpy 0070  
                              ?_strlen 0070                             __stringtab 0003  
__end_of_Shift_String_Right_Add_Length 0776          _Shift_String_Right_Add_Length 0744  
     Shift_String_Right_Add_Length@len 0076       Shift_String_Right_Add_Length@str 0079  
                       Write_data@data 0070                            ?_Write_data 0070  
                              __ptext1 0702                                __ptext2 0744  
                              __ptext3 06D2                                __ptext4 071D  
                              __ptext5 06BC                                __ptext6 06C2  
                              __ptext7 06E9                   end_of_initialization 07FC  
                    SPI_Write_String@i 0073                                strcpy@d 0071  
                              strlen@a 0072                                strlen@s 0073  
                           main@buffer 0020         ?_Shift_String_Right_Add_Length 0070  
                     _SPI_Write_String 071D                         __end_of_strcpy 071D  
                       __end_of_strlen 06E9                    start_initialization 07FC  
                            _Port_Init 06E9                               ??_strcpy 0071  
                             ??_strlen 0072                              ___latbits 0002  
                        __pcstackBANK0 0020                             ?_Port_Init 0070  
                         ??_Write_data 0070                              __pstrings 0003  
                   __end_of_Write_data 06C2                            __stringbase 0008  
                 SPI_Write_String@Text 0074                      ??_SPI_Master_Init 0070  
             __end_of_SPI_Write_String 0744      Shift_String_Right_Add_Length@i_97 0077  
                          ??_Port_Init 0070                     __end_of__stringtab 0009  
                           strcpy@dest 0072                              strcpy@src 0070  
                            stringcode 0003                               stringdir 0003  
                             stringtab 0003  
