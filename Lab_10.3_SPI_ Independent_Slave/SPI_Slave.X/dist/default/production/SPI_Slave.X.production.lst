

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sat May 25 23:28:44 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24     0000                     
    25                           ; Generated 12/10/2023 GMT
    26                           ; 
    27                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F877A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59     0000                     	;# 
    60     0001                     	;# 
    61     0002                     	;# 
    62     0003                     	;# 
    63     0004                     	;# 
    64     0005                     	;# 
    65     0006                     	;# 
    66     0007                     	;# 
    67     0008                     	;# 
    68     0009                     	;# 
    69     000A                     	;# 
    70     000B                     	;# 
    71     000C                     	;# 
    72     000D                     	;# 
    73     000E                     	;# 
    74     000E                     	;# 
    75     000F                     	;# 
    76     0010                     	;# 
    77     0011                     	;# 
    78     0012                     	;# 
    79     0013                     	;# 
    80     0014                     	;# 
    81     0015                     	;# 
    82     0015                     	;# 
    83     0016                     	;# 
    84     0017                     	;# 
    85     0018                     	;# 
    86     0019                     	;# 
    87     001A                     	;# 
    88     001B                     	;# 
    89     001B                     	;# 
    90     001C                     	;# 
    91     001D                     	;# 
    92     001E                     	;# 
    93     001F                     	;# 
    94     0081                     	;# 
    95     0085                     	;# 
    96     0086                     	;# 
    97     0087                     	;# 
    98     0088                     	;# 
    99     0089                     	;# 
   100     008C                     	;# 
   101     008D                     	;# 
   102     008E                     	;# 
   103     0091                     	;# 
   104     0092                     	;# 
   105     0093                     	;# 
   106     0094                     	;# 
   107     0098                     	;# 
   108     0099                     	;# 
   109     009C                     	;# 
   110     009D                     	;# 
   111     009E                     	;# 
   112     009F                     	;# 
   113     010C                     	;# 
   114     010D                     	;# 
   115     010E                     	;# 
   116     010F                     	;# 
   117     018C                     	;# 
   118     018D                     	;# 
   119     0000                     	;# 
   120     0001                     	;# 
   121     0002                     	;# 
   122     0003                     	;# 
   123     0004                     	;# 
   124     0005                     	;# 
   125     0006                     	;# 
   126     0007                     	;# 
   127     0008                     	;# 
   128     0009                     	;# 
   129     000A                     	;# 
   130     000B                     	;# 
   131     000C                     	;# 
   132     000D                     	;# 
   133     000E                     	;# 
   134     000E                     	;# 
   135     000F                     	;# 
   136     0010                     	;# 
   137     0011                     	;# 
   138     0012                     	;# 
   139     0013                     	;# 
   140     0014                     	;# 
   141     0015                     	;# 
   142     0015                     	;# 
   143     0016                     	;# 
   144     0017                     	;# 
   145     0018                     	;# 
   146     0019                     	;# 
   147     001A                     	;# 
   148     001B                     	;# 
   149     001B                     	;# 
   150     001C                     	;# 
   151     001D                     	;# 
   152     001E                     	;# 
   153     001F                     	;# 
   154     0081                     	;# 
   155     0085                     	;# 
   156     0086                     	;# 
   157     0087                     	;# 
   158     0088                     	;# 
   159     0089                     	;# 
   160     008C                     	;# 
   161     008D                     	;# 
   162     008E                     	;# 
   163     0091                     	;# 
   164     0092                     	;# 
   165     0093                     	;# 
   166     0094                     	;# 
   167     0098                     	;# 
   168     0099                     	;# 
   169     009C                     	;# 
   170     009D                     	;# 
   171     009E                     	;# 
   172     009F                     	;# 
   173     010C                     	;# 
   174     010D                     	;# 
   175     010E                     	;# 
   176     010F                     	;# 
   177     018C                     	;# 
   178     018D                     	;# 
   179     0000                     	;# 
   180     0001                     	;# 
   181     0002                     	;# 
   182     0003                     	;# 
   183     0004                     	;# 
   184     0005                     	;# 
   185     0006                     	;# 
   186     0007                     	;# 
   187     0008                     	;# 
   188     0009                     	;# 
   189     000A                     	;# 
   190     000B                     	;# 
   191     000C                     	;# 
   192     000D                     	;# 
   193     000E                     	;# 
   194     000E                     	;# 
   195     000F                     	;# 
   196     0010                     	;# 
   197     0011                     	;# 
   198     0012                     	;# 
   199     0013                     	;# 
   200     0014                     	;# 
   201     0015                     	;# 
   202     0015                     	;# 
   203     0016                     	;# 
   204     0017                     	;# 
   205     0018                     	;# 
   206     0019                     	;# 
   207     001A                     	;# 
   208     001B                     	;# 
   209     001B                     	;# 
   210     001C                     	;# 
   211     001D                     	;# 
   212     001E                     	;# 
   213     001F                     	;# 
   214     0081                     	;# 
   215     0085                     	;# 
   216     0086                     	;# 
   217     0087                     	;# 
   218     0088                     	;# 
   219     0089                     	;# 
   220     008C                     	;# 
   221     008D                     	;# 
   222     008E                     	;# 
   223     0091                     	;# 
   224     0092                     	;# 
   225     0093                     	;# 
   226     0094                     	;# 
   227     0098                     	;# 
   228     0099                     	;# 
   229     009C                     	;# 
   230     009D                     	;# 
   231     009E                     	;# 
   232     009F                     	;# 
   233     010C                     	;# 
   234     010D                     	;# 
   235     010E                     	;# 
   236     010F                     	;# 
   237     018C                     	;# 
   238     018D                     	;# 
   239     0013                     _SSPBUF	set	19
   240     0063                     _SSPIF	set	99
   241     005F                     _GIE	set	95
   242     005E                     _PEIE	set	94
   243     00A4                     _CKP	set	164
   244     00A5                     _SSPEN	set	165
   245     00A3                     _SSPM3	set	163
   246     00A2                     _SSPM2	set	162
   247     00A1                     _SSPM1	set	161
   248     00A0                     _SSPM0	set	160
   249     0038                     _RC0	set	56
   250     0033                     _RB3	set	51
   251     0032                     _RB2	set	50
   252     0031                     _RB1	set	49
   253     0030                     _RB0	set	48
   254     0034                     _RB4	set	52
   255     0035                     _RB5	set	53
   256     0086                     _TRISB	set	134
   257     0463                     _SSPIE	set	1123
   258     042D                     _TRISA5	set	1069
   259     04FB                     _PCFG3	set	1275
   260     04FA                     _PCFG2	set	1274
   261     04F9                     _PCFG1	set	1273
   262     04F8                     _PCFG0	set	1272
   263     043D                     _TRISC5	set	1085
   264     043C                     _TRISC4	set	1084
   265     043B                     _TRISC3	set	1083
   266     04A7                     _SMP	set	1191
   267     04A6                     _CKE	set	1190
   268     0434                     _TRISB4	set	1076
   269     0435                     _TRISB5	set	1077
   270                           
   271                           	psect	cinit
   272     0013                     start_initialization:	
   273                           ; #config settings
   274                           
   275     0013                     __initialization:
   276                           
   277                           ; Clear objects allocated to COMMON
   278     0013  01F7               	clrf	__pbssCOMMON& (0+127)
   279     0014  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   280     0015  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   281                           
   282                           ; Clear objects allocated to BANK0
   283     0016  1383               	bcf	3,7	;select IRP bank0
   284     0017  3020               	movlw	low __pbssBANK0
   285     0018  0084               	movwf	4
   286     0019  3034               	movlw	low (__pbssBANK0+20)
   287     001A  120A  118A  2244  120A  118A  	fcall	clear_ram0
   288     001F                     end_of_initialization:	
   289                           ;End of C runtime variable initialization code
   290                           
   291     001F                     __end_of__initialization:
   292     001F  0183               	clrf	3
   293     0020  120A  118A  288E   	ljmp	_main	;jump to C main() function
   294                           
   295                           	psect	bssCOMMON
   296     0077                     __pbssCOMMON:
   297     0077                     _LEN:
   298     0077                     	ds	1
   299     0078                     _LCD_Flag:
   300     0078                     	ds	1
   301     0079                     _i:
   302     0079                     	ds	1
   303                           
   304                           	psect	bssBANK0
   305     0020                     __pbssBANK0:
   306     0020                     _string:
   307     0020                     	ds	20
   308                           
   309                           	psect	clrtext
   310     0244                     clear_ram0:	
   311                           ;	Called with FSR containing the base address, and
   312                           ;	W with the last address+1
   313                           
   314     0244  0064               	clrwdt	;clear the watchdog before getting into this loop
   315     0245                     clrloop0:
   316     0245  0180               	clrf	0	;clear RAM location pointed to by FSR
   317     0246  0A84               	incf	4,f	;increment pointer
   318     0247  0604               	xorwf	4,w	;XOR with final address
   319     0248  1903               	btfsc	3,2	;have we reached the end yet?
   320     0249  3400               	retlw	0	;all done for this memory range, return
   321     024A  0604               	xorwf	4,w	;XOR again to restore value
   322     024B  2A45               	goto	clrloop0	;do the next byte
   323                           
   324                           	psect	cstackCOMMON
   325     0070                     __pcstackCOMMON:
   326     0070                     ?_LCD_DATA:
   327     0070                     ?_SPI_Slave_Init:	
   328                           ; 1 bytes @ 0x0
   329                           
   330     0070                     ?_Shift_String_Left:	
   331                           ; 1 bytes @ 0x0
   332                           
   333     0070                     ?_LCD_Command:	
   334                           ; 1 bytes @ 0x0
   335                           
   336     0070                     ?_LCD_Init:	
   337                           ; 1 bytes @ 0x0
   338                           
   339     0070                     ?_LCD_Clear:	
   340                           ; 1 bytes @ 0x0
   341                           
   342     0070                     ?_LCD_Write_Char:	
   343                           ; 1 bytes @ 0x0
   344                           
   345     0070                     ?_LCD_Write_String:	
   346                           ; 1 bytes @ 0x0
   347                           
   348     0070                     ?_main:	
   349                           ; 1 bytes @ 0x0
   350                           
   351     0070                     ?_ISR:	
   352                           ; 1 bytes @ 0x0
   353                           
   354     0070                     ??_ISR:	
   355                           ; 1 bytes @ 0x0
   356                           
   357                           
   358                           ; 1 bytes @ 0x0
   359     0070                     	ds	4
   360     0074                     ??_LCD_DATA:
   361     0074                     ??_SPI_Slave_Init:	
   362                           ; 1 bytes @ 0x4
   363                           
   364     0074                     ??_Shift_String_Left:	
   365                           ; 1 bytes @ 0x4
   366                           
   367     0074                     LCD_DATA@Data:	
   368                           ; 1 bytes @ 0x4
   369                           
   370                           
   371                           ; 1 bytes @ 0x4
   372     0074                     	ds	1
   373     0075                     ??_LCD_Command:
   374     0075                     ??_LCD_Write_Char:	
   375                           ; 1 bytes @ 0x5
   376                           
   377                           
   378                           ; 1 bytes @ 0x5
   379     0075                     	ds	1
   380     0076                     ??_LCD_Write_String:
   381     0076                     LCD_Command@CMD:	
   382                           ; 1 bytes @ 0x6
   383                           
   384                           
   385                           ; 1 bytes @ 0x6
   386     0076                     	ds	1
   387     0077                     ??_LCD_Clear:
   388     0077                     ??_main:	
   389                           ; 1 bytes @ 0x7
   390                           
   391                           
   392                           	psect	cstackBANK0
   393     0034                     __pcstackBANK0:	
   394                           ; 1 bytes @ 0x7
   395                           
   396     0034                     ??_LCD_Init:
   397     0034                     ?_LCD_Set_Cursor:	
   398                           ; 1 bytes @ 0x0
   399                           
   400     0034                     LCD_Set_Cursor@c:	
   401                           ; 1 bytes @ 0x0
   402                           
   403     0034                     LCD_Write_Char@Low4:	
   404                           ; 1 bytes @ 0x0
   405                           
   406     0034                     Shift_String_Left@i:	
   407                           ; 1 bytes @ 0x0
   408                           
   409                           
   410                           ; 2 bytes @ 0x0
   411     0034                     	ds	1
   412     0035                     ??_LCD_Set_Cursor:
   413     0035                     LCD_Write_Char@High4:	
   414                           ; 1 bytes @ 0x1
   415                           
   416                           
   417                           ; 1 bytes @ 0x1
   418     0035                     	ds	1
   419     0036                     LCD_Set_Cursor@r:
   420     0036                     LCD_Write_Char@Data:	
   421                           ; 1 bytes @ 0x2
   422                           
   423     0036                     Shift_String_Left@str:	
   424                           ; 1 bytes @ 0x2
   425                           
   426                           
   427                           ; 1 bytes @ 0x2
   428     0036                     	ds	1
   429     0037                     LCD_Set_Cursor@Low4:
   430     0037                     LCD_Write_String@str:	
   431                           ; 1 bytes @ 0x3
   432                           
   433                           
   434                           ; 1 bytes @ 0x3
   435     0037                     	ds	1
   436     0038                     LCD_Set_Cursor@High4:
   437     0038                     LCD_Write_String@i:	
   438                           ; 1 bytes @ 0x4
   439                           
   440                           
   441                           ; 2 bytes @ 0x4
   442     0038                     	ds	1
   443     0039                     LCD_Set_Cursor@Temp:
   444                           
   445                           ; 1 bytes @ 0x5
   446     0039                     	ds	1
   447                           
   448                           	psect	maintext
   449     008E                     __pmaintext:	
   450 ;;
   451 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   452 ;;
   453 ;; *************** function _main *****************
   454 ;; Defined at:
   455 ;;		line 24 in file "main.c"
   456 ;; Parameters:    Size  Location     Type
   457 ;;		None
   458 ;; Auto vars:     Size  Location     Type
   459 ;;		None
   460 ;; Return value:  Size  Location     Type
   461 ;;                  1    wreg      void 
   462 ;; Registers used:
   463 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   464 ;; Tracked objects:
   465 ;;		On entry : B00/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   469 ;;      Params:         0       0       0       0       0
   470 ;;      Locals:         0       0       0       0       0
   471 ;;      Temps:          0       0       0       0       0
   472 ;;      Totals:         0       0       0       0       0
   473 ;;Total ram usage:        0 bytes
   474 ;; Hardware stack levels required when called: 4
   475 ;; This function calls:
   476 ;;		_LCD_Clear
   477 ;;		_LCD_Init
   478 ;;		_LCD_Set_Cursor
   479 ;;		_LCD_Write_String
   480 ;;		_SPI_Slave_Init
   481 ;;		_Shift_String_Left
   482 ;; This function is called by:
   483 ;;		Startup code after reset
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487     008E                     _main:	
   488                           ;psect for function _main
   489                           
   490     008E                     l1122:	
   491                           ;incstack = 0
   492                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   493                           
   494                           
   495                           ;main.c: 25:     SPI_Slave_Init();
   496     008E  120A  118A  2209  120A  118A  	fcall	_SPI_Slave_Init
   497     0093                     l1124:
   498                           
   499                           ;main.c: 26:     LCD_Init();
   500     0093  120A  118A  2023  120A  118A  	fcall	_LCD_Init
   501     0098                     l1126:
   502                           
   503                           ;main.c: 27:     LCD_Clear();
   504     0098  120A  118A  2237  120A  118A  	fcall	_LCD_Clear
   505     009D                     l1128:
   506                           
   507                           ;main.c: 28:     LCD_Set_Cursor(1,1);
   508     009D  1283               	bcf	3,5	;RP0=0, select bank0
   509     009E  1303               	bcf	3,6	;RP1=0, select bank0
   510     009F  01B4               	clrf	LCD_Set_Cursor@c
   511     00A0  0AB4               	incf	LCD_Set_Cursor@c,f
   512     00A1  3001               	movlw	1
   513     00A2  120A  118A  20DC  120A  118A  	fcall	_LCD_Set_Cursor
   514     00A7                     l1130:
   515                           
   516                           ;main.c: 30:         if(RC0){
   517     00A7  1283               	bcf	3,5	;RP0=0, select bank0
   518     00A8  1303               	bcf	3,6	;RP1=0, select bank0
   519     00A9  1C07               	btfss	7,0	;volatile
   520     00AA  28AC               	goto	u391
   521     00AB  28AD               	goto	u390
   522     00AC                     u391:
   523     00AC  28BC               	goto	l1134
   524     00AD                     u390:
   525     00AD                     l1132:
   526                           
   527                           ;main.c: 31:         LCD_Clear();
   528     00AD  120A  118A  2237  120A  118A  	fcall	_LCD_Clear
   529                           
   530                           ;main.c: 32:         LCD_Set_Cursor(1,1);
   531     00B2  1283               	bcf	3,5	;RP0=0, select bank0
   532     00B3  1303               	bcf	3,6	;RP1=0, select bank0
   533     00B4  01B4               	clrf	LCD_Set_Cursor@c
   534     00B5  0AB4               	incf	LCD_Set_Cursor@c,f
   535     00B6  3001               	movlw	1
   536     00B7  120A  118A  20DC  120A  118A  	fcall	_LCD_Set_Cursor
   537     00BC                     l1134:
   538                           
   539                           ;main.c: 35:         if(LCD_Flag==1){
   540     00BC  0378               	decf	_LCD_Flag,w
   541     00BD  1D03               	btfss	3,2
   542     00BE  28C0               	goto	u401
   543     00BF  28C1               	goto	u400
   544     00C0                     u401:
   545     00C0  28A7               	goto	l1130
   546     00C1                     u400:
   547     00C1                     l1136:
   548                           
   549                           ;main.c: 36:         Shift_String_Left(string);
   550     00C1  3020               	movlw	(low (_string| 0))& (0+255)
   551     00C2  120A  118A  216A  120A  118A  	fcall	_Shift_String_Left
   552     00C7                     l1138:
   553                           
   554                           ;main.c: 37:         LCD_Set_Cursor(1,1);
   555     00C7  1283               	bcf	3,5	;RP0=0, select bank0
   556     00C8  1303               	bcf	3,6	;RP1=0, select bank0
   557     00C9  01B4               	clrf	LCD_Set_Cursor@c
   558     00CA  0AB4               	incf	LCD_Set_Cursor@c,f
   559     00CB  3001               	movlw	1
   560     00CC  120A  118A  20DC  120A  118A  	fcall	_LCD_Set_Cursor
   561     00D1                     l1140:
   562                           
   563                           ;main.c: 38:         LCD_Write_String(string);
   564     00D1  3020               	movlw	(low (_string| 0))& (0+255)
   565     00D2  120A  118A  21C2  120A  118A  	fcall	_LCD_Write_String
   566     00D7                     l1142:
   567                           
   568                           ;main.c: 39:         LCD_Flag=0;
   569     00D7  01F8               	clrf	_LCD_Flag
   570     00D8  28A7               	goto	l1130
   571     00D9  120A  118A  2810   	ljmp	start
   572     00DC                     __end_of_main:
   573                           
   574                           	psect	text1
   575     016A                     __ptext1:	
   576 ;; *************** function _Shift_String_Left *****************
   577 ;; Defined at:
   578 ;;		line 90 in file "main.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;  str             1    wreg     PTR unsigned char 
   581 ;;		 -> string(20), 
   582 ;; Auto vars:     Size  Location     Type
   583 ;;  str             1    2[BANK0 ] PTR unsigned char 
   584 ;;		 -> string(20), 
   585 ;;  i               2    0[BANK0 ] int 
   586 ;; Return value:  Size  Location     Type
   587 ;;                  1    wreg      void 
   588 ;; Registers used:
   589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   590 ;; Tracked objects:
   591 ;;		On entry : 0/0
   592 ;;		On exit  : 0/0
   593 ;;		Unchanged: 0/0
   594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   595 ;;      Params:         0       0       0       0       0
   596 ;;      Locals:         0       3       0       0       0
   597 ;;      Temps:          2       0       0       0       0
   598 ;;      Totals:         2       3       0       0       0
   599 ;;Total ram usage:        5 bytes
   600 ;; Hardware stack levels used: 1
   601 ;; Hardware stack levels required when called: 1
   602 ;; This function calls:
   603 ;;		Nothing
   604 ;; This function is called by:
   605 ;;		_main
   606 ;; This function uses a non-reentrant model
   607 ;;
   608                           
   609     016A                     _Shift_String_Left:	
   610                           ;psect for function _Shift_String_Left
   611                           
   612                           
   613                           ;incstack = 0
   614                           ; Regs used in _Shift_String_Left: [wreg-fsr0h+status,2+status,0+btemp+1]
   615                           ;Shift_String_Left@str stored from wreg
   616     016A  1283               	bcf	3,5	;RP0=0, select bank0
   617     016B  1303               	bcf	3,6	;RP1=0, select bank0
   618     016C  00B6               	movwf	Shift_String_Left@str
   619     016D                     l1108:
   620                           
   621                           ;main.c: 91:         int i;;main.c: 92:         for(i=0;str[i+1]!='\0';i++){
   622     016D  01B4               	clrf	Shift_String_Left@i
   623     016E  01B5               	clrf	Shift_String_Left@i+1
   624     016F  2984               	goto	l1114
   625     0170                     l1110:
   626                           
   627                           ;main.c: 94:             str[i]=str[i+1];
   628     0170  0834               	movf	Shift_String_Left@i,w
   629     0171  0736               	addwf	Shift_String_Left@str,w
   630     0172  00F4               	movwf	??_Shift_String_Left
   631     0173  0A74               	incf	??_Shift_String_Left,w
   632     0174  0084               	movwf	4
   633     0175  0800               	movf	0,w
   634     0176  00FF               	movwf	btemp+1
   635     0177  0834               	movf	Shift_String_Left@i,w
   636     0178  0736               	addwf	Shift_String_Left@str,w
   637     0179  00F5               	movwf	??_Shift_String_Left+1
   638     017A  0875               	movf	??_Shift_String_Left+1,w
   639     017B  0084               	movwf	4
   640     017C  087F               	movf	btemp+1,w
   641     017D  0080               	movwf	0
   642     017E                     l1112:
   643                           
   644                           ;main.c: 95:         }
   645     017E  3001               	movlw	1
   646     017F  07B4               	addwf	Shift_String_Left@i,f
   647     0180  1803               	skipnc
   648     0181  0AB5               	incf	Shift_String_Left@i+1,f
   649     0182  3000               	movlw	0
   650     0183  07B5               	addwf	Shift_String_Left@i+1,f
   651     0184                     l1114:
   652     0184  0834               	movf	Shift_String_Left@i,w
   653     0185  0736               	addwf	Shift_String_Left@str,w
   654     0186  00F4               	movwf	??_Shift_String_Left
   655     0187  0A74               	incf	??_Shift_String_Left,w
   656     0188  0084               	movwf	4
   657     0189  1383               	bcf	3,7	;select IRP bank0
   658     018A  0800               	movf	0,w
   659     018B  1D03               	btfss	3,2
   660     018C  298E               	goto	u381
   661     018D  298F               	goto	u380
   662     018E                     u381:
   663     018E  2970               	goto	l1110
   664     018F                     u380:
   665     018F                     l1116:
   666                           
   667                           ;main.c: 96:         str[i]='\0';
   668     018F  0834               	movf	Shift_String_Left@i,w
   669     0190  0736               	addwf	Shift_String_Left@str,w
   670     0191  00F4               	movwf	??_Shift_String_Left
   671     0192  0874               	movf	??_Shift_String_Left,w
   672     0193  0084               	movwf	4
   673     0194  0180               	clrf	0
   674     0195                     l152:
   675     0195  0008               	return
   676     0196                     __end_of_Shift_String_Left:
   677                           
   678                           	psect	text2
   679     0209                     __ptext2:	
   680 ;; *************** function _SPI_Slave_Init *****************
   681 ;; Defined at:
   682 ;;		line 46 in file "main.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;		None
   685 ;; Auto vars:     Size  Location     Type
   686 ;;		None
   687 ;; Return value:  Size  Location     Type
   688 ;;                  1    wreg      void 
   689 ;; Registers used:
   690 ;;		None
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   696 ;;      Params:         0       0       0       0       0
   697 ;;      Locals:         0       0       0       0       0
   698 ;;      Temps:          0       0       0       0       0
   699 ;;      Totals:         0       0       0       0       0
   700 ;;Total ram usage:        0 bytes
   701 ;; Hardware stack levels used: 1
   702 ;; Hardware stack levels required when called: 1
   703 ;; This function calls:
   704 ;;		Nothing
   705 ;; This function is called by:
   706 ;;		_main
   707 ;; This function uses a non-reentrant model
   708 ;;
   709                           
   710     0209                     _SPI_Slave_Init:	
   711                           ;psect for function _SPI_Slave_Init
   712                           
   713     0209                     l806:	
   714                           ;incstack = 0
   715                           ; Regs used in _SPI_Slave_Init: []
   716                           
   717                           
   718                           ;main.c: 48:     SSPM0=0;
   719     0209  1283               	bcf	3,5	;RP0=0, select bank0
   720     020A  1303               	bcf	3,6	;RP1=0, select bank0
   721     020B  1014               	bcf	20,0	;volatile
   722                           
   723                           ;main.c: 49:     SSPM1=0;
   724     020C  1094               	bcf	20,1	;volatile
   725                           
   726                           ;main.c: 50:     SSPM2=1;
   727     020D  1514               	bsf	20,2	;volatile
   728                           
   729                           ;main.c: 51:     SSPM3=0;
   730     020E  1194               	bcf	20,3	;volatile
   731                           
   732                           ;main.c: 53:     SSPEN=1;
   733     020F  1694               	bsf	20,5	;volatile
   734                           
   735                           ;main.c: 54:     CKP=0;
   736     0210  1214               	bcf	20,4	;volatile
   737                           
   738                           ;main.c: 55:     CKE=0;
   739     0211  1683               	bsf	3,5	;RP0=1, select bank1
   740     0212  1303               	bcf	3,6	;RP1=0, select bank1
   741     0213  1314               	bcf	20,6	;volatile
   742                           
   743                           ;main.c: 57:     SMP=0;
   744     0214  1394               	bcf	20,7	;volatile
   745                           
   746                           ;main.c: 59:     TRISC3=1;
   747     0215  1587               	bsf	7,3	;volatile
   748                           
   749                           ;main.c: 60:     TRISC4=1;
   750     0216  1607               	bsf	7,4	;volatile
   751                           
   752                           ;main.c: 61:     TRISC5=0;
   753     0217  1287               	bcf	7,5	;volatile
   754                           
   755                           ;main.c: 63:     PCFG0=0;
   756     0218  101F               	bcf	31,0	;volatile
   757                           
   758                           ;main.c: 64:     PCFG1=0;
   759     0219  109F               	bcf	31,1	;volatile
   760                           
   761                           ;main.c: 65:     PCFG2=1;
   762     021A  151F               	bsf	31,2	;volatile
   763                           
   764                           ;main.c: 66:     PCFG3=0;
   765     021B  119F               	bcf	31,3	;volatile
   766                           
   767                           ;main.c: 67:     TRISA5=1;
   768     021C  1685               	bsf	5,5	;volatile
   769                           
   770                           ;main.c: 69:     SSPIE=1;
   771     021D  158C               	bsf	12,3	;volatile
   772                           
   773                           ;main.c: 70:     PEIE=1;
   774     021E  170B               	bsf	11,6	;volatile
   775                           
   776                           ;main.c: 71:     GIE=1;
   777     021F  178B               	bsf	11,7	;volatile
   778     0220                     l139:
   779     0220  0008               	return
   780     0221                     __end_of_SPI_Slave_Init:
   781                           
   782                           	psect	text3
   783     01C2                     __ptext3:	
   784 ;; *************** function _LCD_Write_String *****************
   785 ;; Defined at:
   786 ;;		line 110 in file "LCD.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;  str             1    wreg     PTR unsigned char 
   789 ;;		 -> string(20), 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  str             1    3[BANK0 ] PTR unsigned char 
   792 ;;		 -> string(20), 
   793 ;;  i               2    4[BANK0 ] int 
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   803 ;;      Params:         0       0       0       0       0
   804 ;;      Locals:         0       3       0       0       0
   805 ;;      Temps:          1       0       0       0       0
   806 ;;      Totals:         1       3       0       0       0
   807 ;;Total ram usage:        4 bytes
   808 ;; Hardware stack levels used: 1
   809 ;; Hardware stack levels required when called: 3
   810 ;; This function calls:
   811 ;;		_LCD_Write_Char
   812 ;; This function is called by:
   813 ;;		_main
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817     01C2                     _LCD_Write_String:	
   818                           ;psect for function _LCD_Write_String
   819                           
   820                           
   821                           ;incstack = 0
   822                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   823                           ;LCD_Write_String@str stored from wreg
   824     01C2  1283               	bcf	3,5	;RP0=0, select bank0
   825     01C3  1303               	bcf	3,6	;RP1=0, select bank0
   826     01C4  00B7               	movwf	LCD_Write_String@str
   827     01C5                     l1100:
   828                           
   829                           ;LCD.c: 110: void LCD_Write_String(char *str);LCD.c: 111: {;LCD.c: 112:     int i;;LCD.c
      +                          : 113:     for(i=0;str[i]!='\0';i++)
   830     01C5  01B8               	clrf	LCD_Write_String@i
   831     01C6  01B9               	clrf	LCD_Write_String@i+1
   832     01C7  29DB               	goto	l1106
   833     01C8                     l1102:
   834                           
   835                           ;LCD.c: 114:        LCD_Write_Char(str[i]);
   836     01C8  0838               	movf	LCD_Write_String@i,w
   837     01C9  0737               	addwf	LCD_Write_String@str,w
   838     01CA  00F6               	movwf	??_LCD_Write_String
   839     01CB  0876               	movf	??_LCD_Write_String,w
   840     01CC  0084               	movwf	4
   841     01CD  0800               	movf	0,w
   842     01CE  120A  118A  2129  120A  118A  	fcall	_LCD_Write_Char
   843     01D3                     l1104:
   844     01D3  3001               	movlw	1
   845     01D4  1283               	bcf	3,5	;RP0=0, select bank0
   846     01D5  1303               	bcf	3,6	;RP1=0, select bank0
   847     01D6  07B8               	addwf	LCD_Write_String@i,f
   848     01D7  1803               	skipnc
   849     01D8  0AB9               	incf	LCD_Write_String@i+1,f
   850     01D9  3000               	movlw	0
   851     01DA  07B9               	addwf	LCD_Write_String@i+1,f
   852     01DB                     l1106:
   853     01DB  0838               	movf	LCD_Write_String@i,w
   854     01DC  0737               	addwf	LCD_Write_String@str,w
   855     01DD  00F6               	movwf	??_LCD_Write_String
   856     01DE  0876               	movf	??_LCD_Write_String,w
   857     01DF  0084               	movwf	4
   858     01E0  1383               	bcf	3,7	;select IRP bank0
   859     01E1  0800               	movf	0,w
   860     01E2  1D03               	btfss	3,2
   861     01E3  29E5               	goto	u371
   862     01E4  29E6               	goto	u370
   863     01E5                     u371:
   864     01E5  29C8               	goto	l1102
   865     01E6                     u370:
   866     01E6                     l56:
   867     01E6  0008               	return
   868     01E7                     __end_of_LCD_Write_String:
   869                           
   870                           	psect	text4
   871     0129                     __ptext4:	
   872 ;; *************** function _LCD_Write_Char *****************
   873 ;; Defined at:
   874 ;;		line 92 in file "LCD.c"
   875 ;; Parameters:    Size  Location     Type
   876 ;;  Data            1    wreg     unsigned char 
   877 ;; Auto vars:     Size  Location     Type
   878 ;;  Data            1    2[BANK0 ] unsigned char 
   879 ;;  High4           1    1[BANK0 ] unsigned char 
   880 ;;  Low4            1    0[BANK0 ] unsigned char 
   881 ;; Return value:  Size  Location     Type
   882 ;;                  1    wreg      void 
   883 ;; Registers used:
   884 ;;		wreg, status,2, status,0, pclath, cstack
   885 ;; Tracked objects:
   886 ;;		On entry : 0/0
   887 ;;		On exit  : 0/0
   888 ;;		Unchanged: 0/0
   889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   890 ;;      Params:         0       0       0       0       0
   891 ;;      Locals:         0       3       0       0       0
   892 ;;      Temps:          1       0       0       0       0
   893 ;;      Totals:         1       3       0       0       0
   894 ;;Total ram usage:        4 bytes
   895 ;; Hardware stack levels used: 1
   896 ;; Hardware stack levels required when called: 2
   897 ;; This function calls:
   898 ;;		_LCD_DATA
   899 ;; This function is called by:
   900 ;;		_LCD_Write_String
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904     0129                     _LCD_Write_Char:	
   905                           ;psect for function _LCD_Write_Char
   906                           
   907                           
   908                           ;incstack = 0
   909                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   910                           ;LCD_Write_Char@Data stored from wreg
   911     0129  1283               	bcf	3,5	;RP0=0, select bank0
   912     012A  1303               	bcf	3,6	;RP1=0, select bank0
   913     012B  00B6               	movwf	LCD_Write_Char@Data
   914     012C                     l1018:
   915                           
   916                           ;LCD.c: 92: void LCD_Write_Char(char Data);LCD.c: 93: {;LCD.c: 94:    char Low4,High4;;L
      +                          CD.c: 95:    Low4 = Data & 0x0F;
   917     012C  0836               	movf	LCD_Write_Char@Data,w
   918     012D  390F               	andlw	15
   919     012E  00B4               	movwf	LCD_Write_Char@Low4
   920                           
   921                           ;LCD.c: 96:    High4 = Data & 0xF0;
   922     012F  0836               	movf	LCD_Write_Char@Data,w
   923     0130  39F0               	andlw	240
   924     0131  00B5               	movwf	LCD_Write_Char@High4
   925     0132                     l1020:
   926                           
   927                           ;LCD.c: 97:    RB5 = 1;
   928     0132  1686               	bsf	6,5	;volatile
   929     0133                     l1022:
   930                           
   931                           ;LCD.c: 98:    LCD_DATA(High4>>4);
   932     0133  0835               	movf	LCD_Write_Char@High4,w
   933     0134  00F5               	movwf	??_LCD_Write_Char
   934     0135  3004               	movlw	4
   935     0136                     u325:
   936     0136  1003               	clrc
   937     0137  0CF5               	rrf	??_LCD_Write_Char,f
   938     0138  3EFF               	addlw	-1
   939     0139  1D03               	skipz
   940     013A  2936               	goto	u325
   941     013B  0875               	movf	??_LCD_Write_Char,w
   942     013C  120A  118A  21E7  120A  118A  	fcall	_LCD_DATA
   943     0141                     l1024:
   944                           
   945                           ;LCD.c: 99:    RB4 = 1;
   946     0141  1283               	bcf	3,5	;RP0=0, select bank0
   947     0142  1303               	bcf	3,6	;RP1=0, select bank0
   948     0143  1606               	bsf	6,4	;volatile
   949     0144                     l1026:
   950                           
   951                           ;LCD.c: 100:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   952     0144  30A6               	movlw	166
   953     0145  00F5               	movwf	??_LCD_Write_Char
   954     0146                     u417:
   955     0146  0BF5               	decfsz	??_LCD_Write_Char,f
   956     0147  2946               	goto	u417
   957     0148  0000               	nop
   958     0149                     l1028:
   959                           
   960                           ;LCD.c: 101:    RB4 = 0;
   961     0149  1283               	bcf	3,5	;RP0=0, select bank0
   962     014A  1303               	bcf	3,6	;RP1=0, select bank0
   963     014B  1206               	bcf	6,4	;volatile
   964     014C                     l1030:
   965                           
   966                           ;LCD.c: 102:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   967     014C  30A6               	movlw	166
   968     014D  00F5               	movwf	??_LCD_Write_Char
   969     014E                     u427:
   970     014E  0BF5               	decfsz	??_LCD_Write_Char,f
   971     014F  294E               	goto	u427
   972     0150  0000               	nop
   973     0151                     l1032:
   974                           
   975                           ;LCD.c: 103:    LCD_DATA(Low4);
   976     0151  1283               	bcf	3,5	;RP0=0, select bank0
   977     0152  1303               	bcf	3,6	;RP1=0, select bank0
   978     0153  0834               	movf	LCD_Write_Char@Low4,w
   979     0154  120A  118A  21E7  120A  118A  	fcall	_LCD_DATA
   980     0159                     l1034:
   981                           
   982                           ;LCD.c: 104:    RB4 = 1;
   983     0159  1283               	bcf	3,5	;RP0=0, select bank0
   984     015A  1303               	bcf	3,6	;RP1=0, select bank0
   985     015B  1606               	bsf	6,4	;volatile
   986     015C                     l1036:
   987                           
   988                           ;LCD.c: 105:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   989     015C  30A6               	movlw	166
   990     015D  00F5               	movwf	??_LCD_Write_Char
   991     015E                     u437:
   992     015E  0BF5               	decfsz	??_LCD_Write_Char,f
   993     015F  295E               	goto	u437
   994     0160  0000               	nop
   995     0161                     l1038:
   996                           
   997                           ;LCD.c: 106:    RB4 = 0;
   998     0161  1283               	bcf	3,5	;RP0=0, select bank0
   999     0162  1303               	bcf	3,6	;RP1=0, select bank0
  1000     0163  1206               	bcf	6,4	;volatile
  1001     0164                     l1040:
  1002                           
  1003                           ;LCD.c: 107:    _delay((unsigned long)((500)*(4000000/4000000.0)));
  1004     0164  30A6               	movlw	166
  1005     0165  00F5               	movwf	??_LCD_Write_Char
  1006     0166                     u447:
  1007     0166  0BF5               	decfsz	??_LCD_Write_Char,f
  1008     0167  2966               	goto	u447
  1009     0168  0000               	nop
  1010     0169                     l50:
  1011     0169  0008               	return
  1012     016A                     __end_of_LCD_Write_Char:
  1013                           
  1014                           	psect	text5
  1015     00DC                     __ptext5:	
  1016 ;; *************** function _LCD_Set_Cursor *****************
  1017 ;; Defined at:
  1018 ;;		line 72 in file "LCD.c"
  1019 ;; Parameters:    Size  Location     Type
  1020 ;;  r               1    wreg     unsigned char 
  1021 ;;  c               1    0[BANK0 ] unsigned char 
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;  r               1    2[BANK0 ] unsigned char 
  1024 ;;  Temp            1    5[BANK0 ] unsigned char 
  1025 ;;  High4           1    4[BANK0 ] unsigned char 
  1026 ;;  Low4            1    3[BANK0 ] unsigned char 
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		wreg, status,2, status,0, pclath, cstack
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1036 ;;      Params:         0       1       0       0       0
  1037 ;;      Locals:         0       4       0       0       0
  1038 ;;      Temps:          0       1       0       0       0
  1039 ;;      Totals:         0       6       0       0       0
  1040 ;;Total ram usage:        6 bytes
  1041 ;; Hardware stack levels used: 1
  1042 ;; Hardware stack levels required when called: 3
  1043 ;; This function calls:
  1044 ;;		_LCD_Command
  1045 ;; This function is called by:
  1046 ;;		_main
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050     00DC                     _LCD_Set_Cursor:	
  1051                           ;psect for function _LCD_Set_Cursor
  1052                           
  1053                           
  1054                           ;incstack = 0
  1055                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1056                           ;LCD_Set_Cursor@r stored from wreg
  1057     00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1058     00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1059     00DE  00B6               	movwf	LCD_Set_Cursor@r
  1060     00DF                     l1080:
  1061                           
  1062                           ;LCD.c: 73:     unsigned char Temp,Low4,High4;;LCD.c: 74:     if(r == 1)
  1063     00DF  0336               	decf	LCD_Set_Cursor@r,w
  1064     00E0  1D03               	btfss	3,2
  1065     00E1  28E3               	goto	u331
  1066     00E2  28E4               	goto	u330
  1067     00E3                     u331:
  1068     00E3  2902               	goto	l1090
  1069     00E4                     u330:
  1070     00E4                     l1082:
  1071                           
  1072                           ;LCD.c: 75:     {;LCD.c: 76:       Temp = 0x80 + c - 1;
  1073     00E4  0834               	movf	LCD_Set_Cursor@c,w
  1074     00E5  3E7F               	addlw	127
  1075     00E6  00B9               	movwf	LCD_Set_Cursor@Temp
  1076                           
  1077                           ;LCD.c: 77:       High4 = Temp >> 4;
  1078     00E7  0839               	movf	LCD_Set_Cursor@Temp,w
  1079     00E8  00B5               	movwf	??_LCD_Set_Cursor
  1080     00E9  3004               	movlw	4
  1081     00EA                     u345:
  1082     00EA  1003               	clrc
  1083     00EB  0CB5               	rrf	??_LCD_Set_Cursor,f
  1084     00EC  3EFF               	addlw	-1
  1085     00ED  1D03               	skipz
  1086     00EE  28EA               	goto	u345
  1087     00EF  0835               	movf	??_LCD_Set_Cursor,w
  1088     00F0  00B8               	movwf	LCD_Set_Cursor@High4
  1089     00F1                     l1084:
  1090                           
  1091                           ;LCD.c: 78:       Low4 = Temp & 0x0F;
  1092     00F1  0839               	movf	LCD_Set_Cursor@Temp,w
  1093     00F2  390F               	andlw	15
  1094     00F3  00B7               	movwf	LCD_Set_Cursor@Low4
  1095     00F4                     l1086:
  1096                           
  1097                           ;LCD.c: 79:       LCD_Command(High4);
  1098     00F4  0838               	movf	LCD_Set_Cursor@High4,w
  1099     00F5  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1100     00FA                     l1088:
  1101                           
  1102                           ;LCD.c: 80:       LCD_Command(Low4);
  1103     00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1104     00FB  1303               	bcf	3,6	;RP1=0, select bank0
  1105     00FC  0837               	movf	LCD_Set_Cursor@Low4,w
  1106     00FD  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1107     0102                     l1090:
  1108                           
  1109                           ;LCD.c: 82:     if(r == 2)
  1110     0102  3002               	movlw	2
  1111     0103  1283               	bcf	3,5	;RP0=0, select bank0
  1112     0104  1303               	bcf	3,6	;RP1=0, select bank0
  1113     0105  0636               	xorwf	LCD_Set_Cursor@r,w
  1114     0106  1D03               	btfss	3,2
  1115     0107  2909               	goto	u351
  1116     0108  290A               	goto	u350
  1117     0109                     u351:
  1118     0109  2928               	goto	l47
  1119     010A                     u350:
  1120     010A                     l1092:
  1121                           
  1122                           ;LCD.c: 83:     {;LCD.c: 84:       Temp = 0xC0 + c - 1;
  1123     010A  0834               	movf	LCD_Set_Cursor@c,w
  1124     010B  3EBF               	addlw	191
  1125     010C  00B9               	movwf	LCD_Set_Cursor@Temp
  1126                           
  1127                           ;LCD.c: 85:       High4 = Temp >> 4;
  1128     010D  0839               	movf	LCD_Set_Cursor@Temp,w
  1129     010E  00B5               	movwf	??_LCD_Set_Cursor
  1130     010F  3004               	movlw	4
  1131     0110                     u365:
  1132     0110  1003               	clrc
  1133     0111  0CB5               	rrf	??_LCD_Set_Cursor,f
  1134     0112  3EFF               	addlw	-1
  1135     0113  1D03               	skipz
  1136     0114  2910               	goto	u365
  1137     0115  0835               	movf	??_LCD_Set_Cursor,w
  1138     0116  00B8               	movwf	LCD_Set_Cursor@High4
  1139     0117                     l1094:
  1140                           
  1141                           ;LCD.c: 86:       Low4 = Temp & 0x0F;
  1142     0117  0839               	movf	LCD_Set_Cursor@Temp,w
  1143     0118  390F               	andlw	15
  1144     0119  00B7               	movwf	LCD_Set_Cursor@Low4
  1145     011A                     l1096:
  1146                           
  1147                           ;LCD.c: 87:       LCD_Command(High4);
  1148     011A  0838               	movf	LCD_Set_Cursor@High4,w
  1149     011B  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1150     0120                     l1098:
  1151                           
  1152                           ;LCD.c: 88:       LCD_Command(Low4);
  1153     0120  1283               	bcf	3,5	;RP0=0, select bank0
  1154     0121  1303               	bcf	3,6	;RP1=0, select bank0
  1155     0122  0837               	movf	LCD_Set_Cursor@Low4,w
  1156     0123  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1157     0128                     l47:
  1158     0128  0008               	return
  1159     0129                     __end_of_LCD_Set_Cursor:
  1160                           
  1161                           	psect	text6
  1162     0023                     __ptext6:	
  1163 ;; *************** function _LCD_Init *****************
  1164 ;; Defined at:
  1165 ;;		line 43 in file "LCD.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;		None
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;		None
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2, status,0, pclath, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1179 ;;      Params:         0       0       0       0       0
  1180 ;;      Locals:         0       0       0       0       0
  1181 ;;      Temps:          0       2       0       0       0
  1182 ;;      Totals:         0       2       0       0       0
  1183 ;;Total ram usage:        2 bytes
  1184 ;; Hardware stack levels used: 1
  1185 ;; Hardware stack levels required when called: 3
  1186 ;; This function calls:
  1187 ;;		_LCD_Command
  1188 ;;		_LCD_DATA
  1189 ;; This function is called by:
  1190 ;;		_main
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194     0023                     _LCD_Init:	
  1195                           ;psect for function _LCD_Init
  1196                           
  1197     0023                     l1042:	
  1198                           ;incstack = 0
  1199                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1200                           
  1201                           
  1202                           ;LCD.c: 46:   TRISB = 0x00;
  1203     0023  1683               	bsf	3,5	;RP0=1, select bank1
  1204     0024  1303               	bcf	3,6	;RP1=0, select bank1
  1205     0025  0186               	clrf	6	;volatile
  1206     0026                     l1044:
  1207                           
  1208                           ;LCD.c: 47:   TRISB5 = 0;
  1209     0026  1286               	bcf	6,5	;volatile
  1210     0027                     l1046:
  1211                           
  1212                           ;LCD.c: 48:   TRISB4 = 0;
  1213     0027  1206               	bcf	6,4	;volatile
  1214     0028                     l1048:
  1215                           
  1216                           ;LCD.c: 50:   LCD_DATA(0x00);
  1217     0028  3000               	movlw	0
  1218     0029  120A  118A  21E7  120A  118A  	fcall	_LCD_DATA
  1219     002E                     l1050:
  1220                           
  1221                           ;LCD.c: 51:   _delay((unsigned long)((30)*(4000000/4000.0)));
  1222     002E  3027               	movlw	39
  1223     002F  1283               	bcf	3,5	;RP0=0, select bank0
  1224     0030  1303               	bcf	3,6	;RP1=0, select bank0
  1225     0031  00B5               	movwf	??_LCD_Init+1
  1226     0032  30F4               	movlw	244
  1227     0033  00B4               	movwf	??_LCD_Init
  1228     0034                     u457:
  1229     0034  0BB4               	decfsz	??_LCD_Init,f
  1230     0035  2834               	goto	u457
  1231     0036  0BB5               	decfsz	??_LCD_Init+1,f
  1232     0037  2834               	goto	u457
  1233     0038  0000               	nop
  1234     0039                     l1052:
  1235                           
  1236                           ;LCD.c: 52:   _delay((unsigned long)((500)*(4000000/4000000.0)));
  1237     0039  30A5               	movlw	165
  1238     003A  1283               	bcf	3,5	;RP0=0, select bank0
  1239     003B  1303               	bcf	3,6	;RP1=0, select bank0
  1240     003C  00B4               	movwf	??_LCD_Init
  1241     003D                     u467:
  1242     003D  0BB4               	decfsz	??_LCD_Init,f
  1243     003E  283D               	goto	u467
  1244     003F  2840               	nop2
  1245     0040                     l1054:
  1246                           
  1247                           ;LCD.c: 53:   LCD_Command(0x03);
  1248     0040  3003               	movlw	3
  1249     0041  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1250     0046                     l1056:
  1251                           
  1252                           ;LCD.c: 54:   _delay((unsigned long)((5)*(4000000/4000.0)));
  1253     0046  3007               	movlw	7
  1254     0047  1283               	bcf	3,5	;RP0=0, select bank0
  1255     0048  1303               	bcf	3,6	;RP1=0, select bank0
  1256     0049  00B5               	movwf	??_LCD_Init+1
  1257     004A  307C               	movlw	124
  1258     004B  00B4               	movwf	??_LCD_Init
  1259     004C                     u477:
  1260     004C  0BB4               	decfsz	??_LCD_Init,f
  1261     004D  284C               	goto	u477
  1262     004E  0BB5               	decfsz	??_LCD_Init+1,f
  1263     004F  284C               	goto	u477
  1264     0050  0000               	nop
  1265     0051                     l1058:
  1266                           
  1267                           ;LCD.c: 55:   LCD_Command(0x03);
  1268     0051  3003               	movlw	3
  1269     0052  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1270     0057                     l1060:
  1271                           
  1272                           ;LCD.c: 56:   _delay((unsigned long)((150)*(4000000/4000000.0)));
  1273     0057  3031               	movlw	49
  1274     0058  1283               	bcf	3,5	;RP0=0, select bank0
  1275     0059  1303               	bcf	3,6	;RP1=0, select bank0
  1276     005A  00B4               	movwf	??_LCD_Init
  1277     005B                     u487:
  1278     005B  0BB4               	decfsz	??_LCD_Init,f
  1279     005C  285B               	goto	u487
  1280     005D                     l1062:
  1281                           
  1282                           ;LCD.c: 57:   LCD_Command(0x03);
  1283     005D  3003               	movlw	3
  1284     005E  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1285     0063                     l1064:
  1286                           
  1287                           ;LCD.c: 58:   LCD_Command(0x02);
  1288     0063  3002               	movlw	2
  1289     0064  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1290     0069                     l1066:
  1291                           
  1292                           ;LCD.c: 59:   LCD_Command(0x02);
  1293     0069  3002               	movlw	2
  1294     006A  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1295     006F                     l1068:
  1296                           
  1297                           ;LCD.c: 60:   LCD_Command(0x08);
  1298     006F  3008               	movlw	8
  1299     0070  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1300     0075                     l1070:
  1301                           
  1302                           ;LCD.c: 61:   LCD_Command(0x00);
  1303     0075  3000               	movlw	0
  1304     0076  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1305     007B                     l1072:
  1306                           
  1307                           ;LCD.c: 62:   LCD_Command(0x0C);
  1308     007B  300C               	movlw	12
  1309     007C  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1310     0081                     l1074:
  1311                           
  1312                           ;LCD.c: 63:   LCD_Command(0x00);
  1313     0081  3000               	movlw	0
  1314     0082  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1315     0087                     l1076:
  1316                           
  1317                           ;LCD.c: 64:   LCD_Command(0x06);
  1318     0087  3006               	movlw	6
  1319     0088  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1320     008D                     l39:
  1321     008D  0008               	return
  1322     008E                     __end_of_LCD_Init:
  1323                           
  1324                           	psect	text7
  1325     0237                     __ptext7:	
  1326 ;; *************** function _LCD_Clear *****************
  1327 ;; Defined at:
  1328 ;;		line 67 in file "LCD.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;		None
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;		None
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		wreg, status,2, status,0, pclath, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1342 ;;      Params:         0       0       0       0       0
  1343 ;;      Locals:         0       0       0       0       0
  1344 ;;      Temps:          0       0       0       0       0
  1345 ;;      Totals:         0       0       0       0       0
  1346 ;;Total ram usage:        0 bytes
  1347 ;; Hardware stack levels used: 1
  1348 ;; Hardware stack levels required when called: 3
  1349 ;; This function calls:
  1350 ;;		_LCD_Command
  1351 ;; This function is called by:
  1352 ;;		_main
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356     0237                     _LCD_Clear:	
  1357                           ;psect for function _LCD_Clear
  1358                           
  1359     0237                     l1078:	
  1360                           ;incstack = 0
  1361                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1362                           
  1363                           
  1364                           ;LCD.c: 68:     LCD_Command(0);
  1365     0237  3000               	movlw	0
  1366     0238  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1367                           
  1368                           ;LCD.c: 69:     LCD_Command(1);
  1369     023D  3001               	movlw	1
  1370     023E  120A  118A  2221  120A  118A  	fcall	_LCD_Command
  1371     0243                     l42:
  1372     0243  0008               	return
  1373     0244                     __end_of_LCD_Clear:
  1374                           
  1375                           	psect	text8
  1376     0221                     __ptext8:	
  1377 ;; *************** function _LCD_Command *****************
  1378 ;; Defined at:
  1379 ;;		line 12 in file "LCD.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;  CMD             1    wreg     unsigned char 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  CMD             1    6[COMMON] unsigned char 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      void 
  1386 ;; Registers used:
  1387 ;;		wreg, status,2, status,0, pclath, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1393 ;;      Params:         0       0       0       0       0
  1394 ;;      Locals:         1       0       0       0       0
  1395 ;;      Temps:          1       0       0       0       0
  1396 ;;      Totals:         2       0       0       0       0
  1397 ;;Total ram usage:        2 bytes
  1398 ;; Hardware stack levels used: 1
  1399 ;; Hardware stack levels required when called: 2
  1400 ;; This function calls:
  1401 ;;		_LCD_DATA
  1402 ;; This function is called by:
  1403 ;;		_LCD_Init
  1404 ;;		_LCD_Clear
  1405 ;;		_LCD_Set_Cursor
  1406 ;;		_LCD_SL
  1407 ;;		_LCD_SR
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411     0221                     _LCD_Command:	
  1412                           ;psect for function _LCD_Command
  1413                           
  1414                           
  1415                           ;incstack = 0
  1416                           ; Regs used in _LCD_Command: [wreg+status,2+status,0+pclath+cstack]
  1417                           ;LCD_Command@CMD stored from wreg
  1418     0221  00F6               	movwf	LCD_Command@CMD
  1419     0222                     l1008:
  1420                           
  1421                           ;LCD.c: 14:     RB5 = 0;
  1422     0222  1283               	bcf	3,5	;RP0=0, select bank0
  1423     0223  1303               	bcf	3,6	;RP1=0, select bank0
  1424     0224  1286               	bcf	6,5	;volatile
  1425     0225                     l1010:
  1426                           
  1427                           ;LCD.c: 16:     LCD_DATA(CMD);
  1428     0225  0876               	movf	LCD_Command@CMD,w
  1429     0226  120A  118A  21E7  120A  118A  	fcall	_LCD_DATA
  1430     022B                     l1012:
  1431                           
  1432                           ;LCD.c: 18:     RB4 = 1;
  1433     022B  1283               	bcf	3,5	;RP0=0, select bank0
  1434     022C  1303               	bcf	3,6	;RP1=0, select bank0
  1435     022D  1606               	bsf	6,4	;volatile
  1436     022E                     l1014:
  1437                           
  1438                           ;LCD.c: 19:     _delay((unsigned long)((500)*(4000000/4000000.0)));
  1439     022E  30A6               	movlw	166
  1440     022F  00F5               	movwf	??_LCD_Command
  1441     0230                     u497:
  1442     0230  0BF5               	decfsz	??_LCD_Command,f
  1443     0231  2A30               	goto	u497
  1444     0232  0000               	nop
  1445     0233                     l1016:
  1446                           
  1447                           ;LCD.c: 20:     RB4 = 0;
  1448     0233  1283               	bcf	3,5	;RP0=0, select bank0
  1449     0234  1303               	bcf	3,6	;RP1=0, select bank0
  1450     0235  1206               	bcf	6,4	;volatile
  1451     0236                     l25:
  1452     0236  0008               	return
  1453     0237                     __end_of_LCD_Command:
  1454                           
  1455                           	psect	text9
  1456     01E7                     __ptext9:	
  1457 ;; *************** function _LCD_DATA *****************
  1458 ;; Defined at:
  1459 ;;		line 23 in file "LCD.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  Data            1    wreg     unsigned char 
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;  Data            1    4[COMMON] unsigned char 
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      void 
  1466 ;; Registers used:
  1467 ;;		wreg
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1473 ;;      Params:         0       0       0       0       0
  1474 ;;      Locals:         1       0       0       0       0
  1475 ;;      Temps:          0       0       0       0       0
  1476 ;;      Totals:         1       0       0       0       0
  1477 ;;Total ram usage:        1 bytes
  1478 ;; Hardware stack levels used: 1
  1479 ;; Hardware stack levels required when called: 1
  1480 ;; This function calls:
  1481 ;;		Nothing
  1482 ;; This function is called by:
  1483 ;;		_LCD_Command
  1484 ;;		_LCD_Init
  1485 ;;		_LCD_Write_Char
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489     01E7                     _LCD_DATA:	
  1490                           ;psect for function _LCD_DATA
  1491                           
  1492                           
  1493                           ;incstack = 0
  1494                           ; Regs used in _LCD_DATA: [wreg]
  1495                           ;LCD_DATA@Data stored from wreg
  1496     01E7  00F4               	movwf	LCD_DATA@Data
  1497     01E8                     l998:
  1498                           
  1499                           ;LCD.c: 25:   if(Data & 1)
  1500     01E8  1C74               	btfss	LCD_DATA@Data,0
  1501     01E9  29EB               	goto	u281
  1502     01EA  29EC               	goto	u280
  1503     01EB                     u281:
  1504     01EB  29F0               	goto	l28
  1505     01EC                     u280:
  1506     01EC                     l1000:
  1507                           
  1508                           ;LCD.c: 26:     RB0 = 1;
  1509     01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1510     01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1511     01EE  1406               	bsf	6,0	;volatile
  1512     01EF  29F3               	goto	l29
  1513     01F0                     l28:	
  1514                           ;LCD.c: 27:   else
  1515                           
  1516                           
  1517                           ;LCD.c: 28:     RB0 = 0;
  1518     01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1519     01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1520     01F2  1006               	bcf	6,0	;volatile
  1521     01F3                     l29:
  1522                           
  1523                           ;LCD.c: 29:   if(Data & 2)
  1524     01F3  1CF4               	btfss	LCD_DATA@Data,1
  1525     01F4  29F6               	goto	u291
  1526     01F5  29F7               	goto	u290
  1527     01F6                     u291:
  1528     01F6  29F9               	goto	l30
  1529     01F7                     u290:
  1530     01F7                     l1002:
  1531                           
  1532                           ;LCD.c: 30:     RB1 = 1;
  1533     01F7  1486               	bsf	6,1	;volatile
  1534     01F8  29FA               	goto	l31
  1535     01F9                     l30:	
  1536                           ;LCD.c: 31:   else
  1537                           
  1538                           
  1539                           ;LCD.c: 32:     RB1 = 0;
  1540     01F9  1086               	bcf	6,1	;volatile
  1541     01FA                     l31:
  1542                           
  1543                           ;LCD.c: 33:   if(Data & 4)
  1544     01FA  1D74               	btfss	LCD_DATA@Data,2
  1545     01FB  29FD               	goto	u301
  1546     01FC  29FE               	goto	u300
  1547     01FD                     u301:
  1548     01FD  2A00               	goto	l32
  1549     01FE                     u300:
  1550     01FE                     l1004:
  1551                           
  1552                           ;LCD.c: 34:     RB2 = 1;
  1553     01FE  1506               	bsf	6,2	;volatile
  1554     01FF  2A01               	goto	l33
  1555     0200                     l32:	
  1556                           ;LCD.c: 35:   else
  1557                           
  1558                           
  1559                           ;LCD.c: 36:     RB2 = 0;
  1560     0200  1106               	bcf	6,2	;volatile
  1561     0201                     l33:
  1562                           
  1563                           ;LCD.c: 37:   if(Data & 8)
  1564     0201  1DF4               	btfss	LCD_DATA@Data,3
  1565     0202  2A04               	goto	u311
  1566     0203  2A05               	goto	u310
  1567     0204                     u311:
  1568     0204  2A07               	goto	l34
  1569     0205                     u310:
  1570     0205                     l1006:
  1571                           
  1572                           ;LCD.c: 38:     RB3 = 1;
  1573     0205  1586               	bsf	6,3	;volatile
  1574     0206  2A08               	goto	l36
  1575     0207                     l34:	
  1576                           ;LCD.c: 39:   else
  1577                           
  1578                           
  1579                           ;LCD.c: 40:     RB3 = 0;
  1580     0207  1186               	bcf	6,3	;volatile
  1581     0208                     l36:
  1582     0208  0008               	return
  1583     0209                     __end_of_LCD_DATA:
  1584                           
  1585                           	psect	text10
  1586     0196                     __ptext10:	
  1587 ;; *************** function _ISR *****************
  1588 ;; Defined at:
  1589 ;;		line 76 in file "main.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;		None
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      void 
  1596 ;; Registers used:
  1597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1603 ;;      Params:         0       0       0       0       0
  1604 ;;      Locals:         0       0       0       0       0
  1605 ;;      Temps:          4       0       0       0       0
  1606 ;;      Totals:         4       0       0       0       0
  1607 ;;Total ram usage:        4 bytes
  1608 ;; Hardware stack levels used: 1
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		Interrupt level 1
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616     0196                     _ISR:	
  1617                           ;psect for function _ISR
  1618                           
  1619     0196                     i1l844:
  1620                           
  1621                           ;main.c: 77:     if(SSPIF){
  1622     0196  1283               	bcf	3,5	;RP0=0, select bank0
  1623     0197  1303               	bcf	3,6	;RP1=0, select bank0
  1624     0198  1D8C               	btfss	12,3	;volatile
  1625     0199  299B               	goto	u14_21
  1626     019A  299C               	goto	u14_20
  1627     019B                     u14_21:
  1628     019B  29B7               	goto	i1l146
  1629     019C                     u14_20:
  1630     019C                     i1l846:
  1631                           
  1632                           ;main.c: 78:     SSPIF=0;
  1633     019C  118C               	bcf	12,3	;volatile
  1634     019D                     i1l848:
  1635                           
  1636                           ;main.c: 79:         string[i]=SSPBUF;
  1637     019D  0879               	movf	_i,w
  1638     019E  3E20               	addlw	(low (_string| 0))& (0+255)
  1639     019F  0084               	movwf	4
  1640     01A0  0813               	movf	19,w	;volatile
  1641     01A1  1383               	bcf	3,7	;select IRP bank0
  1642     01A2  0080               	movwf	0
  1643     01A3                     i1l850:
  1644                           
  1645                           ;main.c: 80:         i++;
  1646     01A3  3001               	movlw	1
  1647     01A4  00FF               	movwf	btemp+1
  1648     01A5  087F               	movf	btemp+1,w
  1649     01A6  07F9               	addwf	_i,f
  1650     01A7                     i1l852:
  1651                           
  1652                           ;main.c: 81:         LEN=string[0]-0x30;
  1653     01A7  0820               	movf	_string,w
  1654     01A8  3ED0               	addlw	208
  1655     01A9  00F7               	movwf	_LEN
  1656     01AA                     i1l854:
  1657                           
  1658                           ;main.c: 82:         if(i>LEN){
  1659     01AA  0879               	movf	_i,w
  1660     01AB  0277               	subwf	_LEN,w
  1661     01AC  1803               	skipnc
  1662     01AD  29AF               	goto	u15_21
  1663     01AE  29B0               	goto	u15_20
  1664     01AF                     u15_21:
  1665     01AF  29B7               	goto	i1l146
  1666     01B0                     u15_20:
  1667     01B0                     i1l856:
  1668                           
  1669                           ;main.c: 83:             string[i]='\0';
  1670     01B0  0879               	movf	_i,w
  1671     01B1  3E20               	addlw	(low (_string| 0))& (0+255)
  1672     01B2  0084               	movwf	4
  1673     01B3  0180               	clrf	0
  1674     01B4                     i1l858:
  1675                           
  1676                           ;main.c: 84:             LCD_Flag=1;
  1677     01B4  01F8               	clrf	_LCD_Flag
  1678     01B5  0AF8               	incf	_LCD_Flag,f
  1679     01B6                     i1l860:
  1680                           
  1681                           ;main.c: 85:             i=0;
  1682     01B6  01F9               	clrf	_i
  1683     01B7                     i1l146:
  1684     01B7  0873               	movf	??_ISR+3,w
  1685     01B8  00FF               	movwf	btemp+1
  1686     01B9  0872               	movf	??_ISR+2,w
  1687     01BA  008A               	movwf	10
  1688     01BB  0871               	movf	??_ISR+1,w
  1689     01BC  0084               	movwf	4
  1690     01BD  0E70               	swapf	??_ISR,w
  1691     01BE  0083               	movwf	3
  1692     01BF  0EFE               	swapf	btemp,f
  1693     01C0  0E7E               	swapf	btemp,w
  1694     01C1  0009               	retfie
  1695     01C2                     __end_of_ISR:
  1696     007E                     btemp	set	126	;btemp
  1697     007E                     wtemp0	set	126
  1698                           
  1699                           	psect	intentry
  1700     0004                     __pintentry:	
  1701                           ;incstack = 0
  1702                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  1703                           
  1704     0004                     interrupt_function:
  1705     007E                     saved_w	set	btemp
  1706     0004  00FE               	movwf	btemp
  1707     0005  0E03               	swapf	3,w
  1708     0006  00F0               	movwf	??_ISR
  1709     0007  0804               	movf	4,w
  1710     0008  00F1               	movwf	??_ISR+1
  1711     0009  080A               	movf	10,w
  1712     000A  00F2               	movwf	??_ISR+2
  1713     000B  087F               	movf	btemp+1,w
  1714     000C  00F3               	movwf	??_ISR+3
  1715     000D  120A  118A  2996   	ljmp	_ISR
  1716                           
  1717                           	psect	config
  1718                           
  1719                           ;Config register CONFIG @ 0x2007
  1720                           ;	Oscillator Selection bits
  1721                           ;	FOSC = XT, XT oscillator
  1722                           ;	Watchdog Timer Enable bit
  1723                           ;	WDTE = OFF, WDT disabled
  1724                           ;	Power-up Timer Enable bit
  1725                           ;	PWRTE = ON, PWRT enabled
  1726                           ;	Brown-out Reset Enable bit
  1727                           ;	BOREN = ON, BOR enabled
  1728                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1729                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1730                           ;	Data EEPROM Memory Code Protection bit
  1731                           ;	CPD = OFF, Data EEPROM code protection off
  1732                           ;	Flash Program Memory Write Enable bits
  1733                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1734                           ;	In-Circuit Debugger Mode bit
  1735                           ;	DEBUG = 0x1, unprogrammed default
  1736                           ;	Flash Program Memory Code Protection bit
  1737                           ;	CP = OFF, Code protection off
  1738     2007                     	org	8199
  1739     2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80      6      26
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@str	PTR unsigned char  size(1) Largest target is 20
		 -> string(BANK0[20]), 

    Shift_String_Left@str	PTR unsigned char  size(1) Largest target is 20
		 -> string(BANK0[20]), 


Critical Paths under _main in COMMON

    _main->_LCD_Write_String
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_Command
    _LCD_Init->_LCD_Command
    _LCD_Clear->_LCD_Command
    _LCD_Command->_LCD_DATA

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_LCD_Set_Cursor
    _main->_LCD_Write_String
    _LCD_Write_String->_LCD_Write_Char

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1880
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                     _SPI_Slave_Init
                  _Shift_String_Left
 ---------------------------------------------------------------------------------
 (1) _Shift_String_Left                                    5     5      0     211
                                              4 COMMON     2     2      0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SPI_Slave_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     4     4      0     420
                                              6 COMMON     1     1      0
                                              3 BANK0      3     3      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       4     4      0     254
                                              5 COMMON     1     1      0
                                              0 BANK0      3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       6     5      1     815
                                              0 BANK0      6     5      1
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     279
                                              0 BANK0      2     2      0
                        _LCD_Command
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     155
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0     155
                                              5 COMMON     2     2      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (3) _LCD_DATA                                             1     1      0     124
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_Command
       _LCD_DATA
   _LCD_Init
     _LCD_Command
     _LCD_DATA
   _LCD_Set_Cursor
     _LCD_Command
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_DATA
   _SPI_Slave_Init
   _Shift_String_Left

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      24       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      6      1A       5       32.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      24      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sat May 25 23:28:44 2024

                        _i 0079               ?_LCD_Command 0070                         l30 01F9  
                       l31 01FA                         l32 0200                         l33 0201  
                       l25 0236                         l34 0207                         l42 0243  
                       l50 0169                         l36 0208                         l28 01F0  
                       l29 01F3                         l39 008D                         l47 0128  
                       l56 01E6                         fsr 0004                        l152 0195  
                      l139 0220                        l806 0209                        _CKE 04A6  
                      _CKP 00A4                        _GIE 005F                        l998 01E8  
                      _RB0 0030                        _RB1 0031                        _RB2 0032  
                      _RC0 0038                        _RB3 0033                        _RB4 0034  
                      _RB5 0035                        _LEN 0077                        u300 01FE  
                      u301 01FD                        u310 0205                        u311 0204  
                      u400 00C1                        u401 00C0                        u330 00E4  
                      u331 00E3                        u325 0136                        u350 010A  
                      u351 0109                        u280 01EC                        u281 01EB  
                      u345 00EA                        u417 0146                        u290 01F7  
                      u370 01E6                        u291 01F6                        u427 014E  
                      u371 01E5                        u380 018F                        _ISR 0196  
                      u365 0110                        u437 015E                        u381 018E  
                      u390 00AD                        u447 0166                        u391 00AC  
                      u457 0034                        u467 003D                        u477 004C  
                      u487 005B                        u497 0230                        _SMP 04A7  
                      fsr0 0004                        indf 0000                       ?_ISR 0070  
           _LCD_Set_Cursor 00DC                       l1000 01EC                       l1002 01F7  
                     l1010 0225                       l1004 01FE                       l1012 022B  
                     l1020 0132                       l1100 01C5                       l1006 0205  
                     l1014 022E                       l1030 014C                       l1022 0133  
                     l1102 01C8                       l1110 0170                       l1016 0233  
                     l1008 0222                       l1040 0164                       l1032 0151  
                     l1024 0141                       l1104 01D3                       l1112 017E  
                     l1050 002E                       l1042 0023                       l1034 0159  
                     l1026 0144                       l1018 012C                       l1106 01DB  
                     l1114 0184                       l1130 00A7                       l1122 008E  
                     l1060 0057                       l1052 0039                       l1044 0026  
                     l1036 015C                       l1028 0149                       l1116 018F  
                     l1108 016D                       l1140 00D1                       l1132 00AD  
                     l1124 0093                       l1070 0075                       l1062 005D  
                     l1054 0040                       l1046 0027                       l1038 0161  
                     l1142 00D7                       l1134 00BC                       l1126 0098  
                     l1072 007B                       l1064 0063                       l1056 0046  
                     l1048 0028                       l1080 00DF                       l1136 00C1  
                     l1128 009D                       l1074 0081                       l1066 0069  
                     l1058 0051                       l1082 00E4                       l1090 0102  
                     l1138 00C7                       l1076 0087                       l1068 006F  
                     l1092 010A                       l1084 00F1                       l1078 0237  
                     l1094 0117                       l1086 00F4                       l1096 011A  
                     l1088 00FA                       l1098 0120        LCD_Write_String@str 0037  
                     _PEIE 005E          ?_LCD_Write_String 0070                       _main 008E  
                     btemp 007E             _SPI_Slave_Init 0209                       start 0010  
       ??_LCD_Write_String 0076                      ??_ISR 0070           __end_of_LCD_DATA 0209  
         __end_of_LCD_Init 008E                      ?_main 0070                      _PCFG0 04F8  
                    _PCFG1 04F9                      _PCFG2 04FA                      _PCFG3 04FB  
                    i1l146 01B7                      i1l850 01A3                      i1l860 01B6  
                    i1l852 01A7                      i1l844 0196                      i1l854 01AA  
                    i1l846 019C                      i1l856 01B0                      i1l848 019D  
                    i1l858 01B4                      u14_20 019C                      u14_21 019B  
                    u15_20 01B0                      u15_21 01AF                      _SSPM0 00A0  
                    _SSPM1 00A1                      _SSPM2 00A2                      _SSPM3 00A3  
                    _TRISB 0086                      _SSPIE 0463                      _SSPEN 00A5  
                    _SSPIF 0063     __end_of_LCD_Set_Cursor 0129                      pclath 000A  
   __end_of_SPI_Slave_Init 0221                      status 0003                      wtemp0 007E  
           _LCD_Write_Char 0129            __initialization 0013               __end_of_main 00DC  
                   ??_main 0077          __end_of_LCD_Clear 0244            ?_LCD_Set_Cursor 0034  
          ?_SPI_Slave_Init 0070                     _TRISA5 042D                     _TRISB4 0434  
                   _TRISB5 0435                     _TRISC3 043B                     _TRISC4 043C  
                   _TRISC5 043D                     _SSPBUF 0013     __end_of_LCD_Write_Char 016A  
     Shift_String_Left@str 0036                     _string 0020                     saved_w 007E  
          LCD_Set_Cursor@c 0034            LCD_Set_Cursor@r 0036                  ?_LCD_DATA 0070  
  __end_of__initialization 001F                  ?_LCD_Init 0070            ?_LCD_Write_Char 0070  
           __pcstackCOMMON 0070                 __pbssBANK0 0020                 ??_LCD_DATA 0074  
               ??_LCD_Init 0034                 __pmaintext 008E                 __pintentry 0004  
         ??_LCD_Set_Cursor 0035                    __ptext1 016A                    __ptext2 0209  
                  __ptext3 01C2                    __ptext4 0129                    __ptext5 00DC  
                  __ptext6 0023                    __ptext7 0237                    __ptext8 0221  
                  __ptext9 01E7                  _LCD_Clear 0237           ??_SPI_Slave_Init 0074  
                  clrloop0 0245       end_of_initialization 001F             LCD_Command@CMD 0076  
               ?_LCD_Clear 0070          LCD_Write_String@i 0038           ??_LCD_Write_Char 0075  
            ??_LCD_Command 0075           _LCD_Write_String 01C2         Shift_String_Left@i 0034  
      start_initialization 0013                __end_of_ISR 01C2        __end_of_LCD_Command 0237  
              __pbssCOMMON 0077                  ___latbits 0002              __pcstackBANK0 0034  
              ??_LCD_Clear 0077                   _LCD_DATA 01E7                   _LCD_Flag 0078  
        interrupt_function 0004                   _LCD_Init 0023                  clear_ram0 0244  
        _Shift_String_Left 016A         ?_Shift_String_Left 0070                _LCD_Command 0221  
      ??_Shift_String_Left 0074   __end_of_LCD_Write_String 01E7  __end_of_Shift_String_Left 0196  
      LCD_Write_Char@High4 0035                   __ptext10 0196        LCD_Set_Cursor@High4 0038  
       LCD_Write_Char@Data 0036         LCD_Write_Char@Low4 0034                   intlevel1 0000  
       LCD_Set_Cursor@Low4 0037         LCD_Set_Cursor@Temp 0039               LCD_DATA@Data 0074  
