

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sun May 19 18:29:05 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     0008                     	;# 
    60     0009                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     000E                     	;# 
    66     000E                     	;# 
    67     000F                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001B                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     0087                     	;# 
    90     0088                     	;# 
    91     0089                     	;# 
    92     008C                     	;# 
    93     008D                     	;# 
    94     008E                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0098                     	;# 
   100     0099                     	;# 
   101     009C                     	;# 
   102     009D                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     010F                     	;# 
   109     018C                     	;# 
   110     018D                     	;# 
   111     0000                     	;# 
   112     0001                     	;# 
   113     0002                     	;# 
   114     0003                     	;# 
   115     0004                     	;# 
   116     0005                     	;# 
   117     0006                     	;# 
   118     0007                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     000C                     	;# 
   124     000D                     	;# 
   125     000E                     	;# 
   126     000E                     	;# 
   127     000F                     	;# 
   128     0010                     	;# 
   129     0011                     	;# 
   130     0012                     	;# 
   131     0013                     	;# 
   132     0014                     	;# 
   133     0015                     	;# 
   134     0015                     	;# 
   135     0016                     	;# 
   136     0017                     	;# 
   137     0018                     	;# 
   138     0019                     	;# 
   139     001A                     	;# 
   140     001B                     	;# 
   141     001B                     	;# 
   142     001C                     	;# 
   143     001D                     	;# 
   144     001E                     	;# 
   145     001F                     	;# 
   146     0081                     	;# 
   147     0085                     	;# 
   148     0086                     	;# 
   149     0087                     	;# 
   150     0088                     	;# 
   151     0089                     	;# 
   152     008C                     	;# 
   153     008D                     	;# 
   154     008E                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0094                     	;# 
   159     0098                     	;# 
   160     0099                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009E                     	;# 
   164     009F                     	;# 
   165     010C                     	;# 
   166     010D                     	;# 
   167     010E                     	;# 
   168     010F                     	;# 
   169     018C                     	;# 
   170     018D                     	;# 
   171     001E                     _ADRESH	set	30
   172     0015                     _CCPR1L	set	21
   173     001F                     _ADCON0	set	31
   174     0012                     _T2CON	set	18
   175     0017                     _CCP1CON	set	23
   176     00BD                     _CCP1X	set	189
   177     00BC                     _CCP1Y	set	188
   178     005F                     _GIE	set	95
   179     005E                     _PEIE	set	94
   180     0066                     _ADIF	set	102
   181     009E                     _ADRESL	set	158
   182     009F                     _ADCON1	set	159
   183     0087                     _TRISC	set	135
   184     0092                     _PR2	set	146
   185     0466                     _ADIE	set	1126
   186                           
   187                           	psect	cinit
   188     000F                     start_initialization:	
   189                           ; #config settings
   190                           
   191     000F                     __initialization:
   192                           
   193                           ; Clear objects allocated to COMMON
   194     000F  01F7               	clrf	__pbssCOMMON& (0+127)
   195     0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   196     0011                     end_of_initialization:	
   197                           ;End of C runtime variable initialization code
   198                           
   199     0011                     __end_of__initialization:
   200     0011  0183               	clrf	3
   201     0012  120A  118A  2815   	ljmp	_main	;jump to C main() function
   202                           
   203                           	psect	bssCOMMON
   204     0077                     __pbssCOMMON:
   205     0077                     _result:
   206     0077                     	ds	2
   207                           
   208                           	psect	cstackCOMMON
   209     0070                     __pcstackCOMMON:
   210     0070                     ?_ADC_Read:
   211     0070                     ?_CCP_PWM:	
   212                           ; 1 bytes @ 0x0
   213                           
   214     0070                     ?_ADC_Init:	
   215                           ; 1 bytes @ 0x0
   216                           
   217     0070                     ?_main:	
   218                           ; 1 bytes @ 0x0
   219                           
   220     0070                     ?_ISR:	
   221                           ; 1 bytes @ 0x0
   222                           
   223     0070                     ??_ISR:	
   224                           ; 1 bytes @ 0x0
   225                           
   226                           
   227                           ; 1 bytes @ 0x0
   228     0070                     	ds	2
   229     0072                     ?_PWM_duty_cycle:
   230     0072                     ??_ADC_Read:	
   231                           ; 1 bytes @ 0x2
   232                           
   233     0072                     ??_ADC_Init:	
   234                           ; 1 bytes @ 0x2
   235                           
   236     0072                     PWM_duty_cycle@DC:	
   237                           ; 1 bytes @ 0x2
   238                           
   239                           
   240                           ; 2 bytes @ 0x2
   241     0072                     	ds	1
   242     0073                     ADC_Read@AN:
   243                           
   244                           ; 1 bytes @ 0x3
   245     0073                     	ds	1
   246     0074                     ??_PWM_duty_cycle:
   247                           
   248                           ; 1 bytes @ 0x4
   249     0074                     	ds	2
   250     0076                     ??_CCP_PWM:
   251     0076                     ??_main:	
   252                           ; 1 bytes @ 0x6
   253                           
   254                           
   255                           ; 1 bytes @ 0x6
   256     0076                     	ds	1
   257                           
   258                           	psect	maintext
   259     0015                     __pmaintext:	
   260 ;;
   261 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   262 ;;
   263 ;; *************** function _main *****************
   264 ;; Defined at:
   265 ;;		line 49 in file "main.c"
   266 ;; Parameters:    Size  Location     Type
   267 ;;		None
   268 ;; Auto vars:     Size  Location     Type
   269 ;;		None
   270 ;; Return value:  Size  Location     Type
   271 ;;                  1    wreg      void 
   272 ;; Registers used:
   273 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   274 ;; Tracked objects:
   275 ;;		On entry : B00/0
   276 ;;		On exit  : 0/0
   277 ;;		Unchanged: 0/0
   278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   279 ;;      Params:         0       0       0       0       0
   280 ;;      Locals:         0       0       0       0       0
   281 ;;      Temps:          1       0       0       0       0
   282 ;;      Totals:         1       0       0       0       0
   283 ;;Total ram usage:        1 bytes
   284 ;; Hardware stack levels required when called: 3
   285 ;; This function calls:
   286 ;;		_ADC_Init
   287 ;;		_ADC_Read
   288 ;;		_CCP_PWM
   289 ;;		_PWM_duty_cycle
   290 ;; This function is called by:
   291 ;;		Startup code after reset
   292 ;; This function uses a non-reentrant model
   293 ;;
   294                           
   295     0015                     _main:	
   296                           ;psect for function _main
   297                           
   298     0015                     l679:	
   299                           ;incstack = 0
   300                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   301                           
   302                           
   303                           ;main.c: 50: CCP_PWM();
   304     0015  120A  118A  2077  120A  118A  	fcall	_CCP_PWM
   305     001A                     l681:
   306                           
   307                           ;main.c: 51: ADC_Init();
   308     001A  120A  118A  20A4  120A  118A  	fcall	_ADC_Init
   309     001F                     l683:
   310                           
   311                           ;main.c: 53: ADC_Read(0);
   312     001F  3000               	movlw	0
   313     0020  120A  118A  205A  120A  118A  	fcall	_ADC_Read
   314                           
   315                           ;main.c: 54: PWM_duty_cycle(result);
   316     0025  0878               	movf	_result+1,w
   317     0026  00F3               	movwf	PWM_duty_cycle@DC+1
   318     0027  0877               	movf	_result,w
   319     0028  00F2               	movwf	PWM_duty_cycle@DC
   320     0029  120A  118A  2039  120A  118A  	fcall	_PWM_duty_cycle
   321     002E                     l685:
   322                           
   323                           ;main.c: 55: _delay((unsigned long)((1)*(4000000/4000.0)));
   324     002E  30C7               	movlw	199
   325     002F  00F6               	movwf	??_main
   326     0030                     u97:
   327     0030  2831               	nop2
   328     0031  0BF6               	decfsz	??_main,f
   329     0032  2830               	goto	u97
   330     0033  2834               	nop2
   331     0034  2835               	nop2
   332     0035  281F               	goto	l683
   333     0036  120A  118A  280C   	ljmp	start
   334     0039                     __end_of_main:
   335                           
   336                           	psect	text1
   337     0077                     __ptext1:	
   338 ;; *************** function _CCP_PWM *****************
   339 ;; Defined at:
   340 ;;		line 29 in file "main.c"
   341 ;; Parameters:    Size  Location     Type
   342 ;;		None
   343 ;; Auto vars:     Size  Location     Type
   344 ;;		None
   345 ;; Return value:  Size  Location     Type
   346 ;;                  1    wreg      void 
   347 ;; Registers used:
   348 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   349 ;; Tracked objects:
   350 ;;		On entry : 0/0
   351 ;;		On exit  : 0/0
   352 ;;		Unchanged: 0/0
   353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   354 ;;      Params:         0       0       0       0       0
   355 ;;      Locals:         0       0       0       0       0
   356 ;;      Temps:          0       0       0       0       0
   357 ;;      Totals:         0       0       0       0       0
   358 ;;Total ram usage:        0 bytes
   359 ;; Hardware stack levels used: 1
   360 ;; Hardware stack levels required when called: 2
   361 ;; This function calls:
   362 ;;		_PWM_duty_cycle
   363 ;; This function is called by:
   364 ;;		_main
   365 ;; This function uses a non-reentrant model
   366 ;;
   367                           
   368     0077                     _CCP_PWM:	
   369                           ;psect for function _CCP_PWM
   370                           
   371     0077                     l667:	
   372                           ;incstack = 0
   373                           ; Regs used in _CCP_PWM: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   374                           
   375                           
   376                           ;main.c: 30: PR2=255;
   377     0077  30FF               	movlw	255
   378     0078  1683               	bsf	3,5	;RP0=1, select bank1
   379     0079  1303               	bcf	3,6	;RP1=0, select bank1
   380     007A  0092               	movwf	18	;volatile
   381     007B                     l669:
   382                           
   383                           ;main.c: 31: TRISC&=~0x04;
   384     007B  30FB               	movlw	251
   385     007C  00FF               	movwf	btemp+1
   386     007D  087F               	movf	btemp+1,w
   387     007E  0587               	andwf	7,f	;volatile
   388     007F                     l671:
   389                           
   390                           ;main.c: 32: CCP1CON|=0x0C;
   391     007F  300C               	movlw	12
   392     0080  00FF               	movwf	btemp+1
   393     0081  087F               	movf	btemp+1,w
   394     0082  1283               	bcf	3,5	;RP0=0, select bank0
   395     0083  1303               	bcf	3,6	;RP1=0, select bank0
   396     0084  0497               	iorwf	23,f	;volatile
   397     0085                     l673:
   398                           
   399                           ;main.c: 33: T2CON|=0x01;
   400     0085  1412               	bsf	18,0	;volatile
   401     0086                     l675:
   402                           
   403                           ;main.c: 34: T2CON|=0x04;
   404     0086  1512               	bsf	18,2	;volatile
   405     0087                     l677:
   406                           
   407                           ;main.c: 35: PWM_duty_cycle(0);
   408     0087  3000               	movlw	0
   409     0088  00F2               	movwf	PWM_duty_cycle@DC
   410     0089  00F3               	movwf	PWM_duty_cycle@DC+1
   411     008A  120A  118A  2039  120A  118A  	fcall	_PWM_duty_cycle
   412     008F                     l41:
   413     008F  0008               	return
   414     0090                     __end_of_CCP_PWM:
   415                           
   416                           	psect	text2
   417     0039                     __ptext2:	
   418 ;; *************** function _PWM_duty_cycle *****************
   419 ;; Defined at:
   420 ;;		line 61 in file "main.c"
   421 ;; Parameters:    Size  Location     Type
   422 ;;  DC              2    2[COMMON] unsigned short 
   423 ;; Auto vars:     Size  Location     Type
   424 ;;		None
   425 ;; Return value:  Size  Location     Type
   426 ;;                  1    wreg      void 
   427 ;; Registers used:
   428 ;;		wreg, status,2, status,0
   429 ;; Tracked objects:
   430 ;;		On entry : 0/0
   431 ;;		On exit  : 0/0
   432 ;;		Unchanged: 0/0
   433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   434 ;;      Params:         2       0       0       0       0
   435 ;;      Locals:         0       0       0       0       0
   436 ;;      Temps:          2       0       0       0       0
   437 ;;      Totals:         4       0       0       0       0
   438 ;;Total ram usage:        4 bytes
   439 ;; Hardware stack levels used: 1
   440 ;; Hardware stack levels required when called: 1
   441 ;; This function calls:
   442 ;;		Nothing
   443 ;; This function is called by:
   444 ;;		_CCP_PWM
   445 ;;		_main
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449     0039                     _PWM_duty_cycle:	
   450                           ;psect for function _PWM_duty_cycle
   451                           
   452     0039                     l661:	
   453                           ;incstack = 0
   454                           ; Regs used in _PWM_duty_cycle: [wreg+status,2+status,0]
   455                           
   456                           
   457                           ;main.c: 62:     if(DC<1024){
   458     0039  3004               	movlw	4
   459     003A  0273               	subwf	PWM_duty_cycle@DC+1,w
   460     003B  3000               	movlw	0
   461     003C  1903               	skipnz
   462     003D  0272               	subwf	PWM_duty_cycle@DC,w
   463     003E  1803               	skipnc
   464     003F  2841               	goto	u61
   465     0040  2842               	goto	u60
   466     0041                     u61:
   467     0041  2859               	goto	l56
   468     0042                     u60:
   469     0042                     l663:
   470                           
   471                           ;main.c: 63:     CCP1Y = DC & 1;
   472     0042  1872               	btfsc	PWM_duty_cycle@DC,0
   473     0043  2845               	goto	u71
   474     0044  2849               	goto	u70
   475     0045                     u71:
   476     0045  1283               	bcf	3,5	;RP0=0, select bank0
   477     0046  1303               	bcf	3,6	;RP1=0, select bank0
   478     0047  1617               	bsf	23,4	;volatile
   479     0048  284C               	goto	u84
   480     0049                     u70:
   481     0049  1283               	bcf	3,5	;RP0=0, select bank0
   482     004A  1303               	bcf	3,6	;RP1=0, select bank0
   483     004B  1217               	bcf	23,4	;volatile
   484     004C                     u84:
   485                           
   486                           ;main.c: 64:     CCP1X = DC & 2;
   487     004C  1297               	bcf	23,5	;volatile
   488     004D                     l665:
   489                           
   490                           ;main.c: 65:     CCPR1L = DC >> 2;
   491     004D  0873               	movf	PWM_duty_cycle@DC+1,w
   492     004E  00F5               	movwf	??_PWM_duty_cycle+1
   493     004F  0872               	movf	PWM_duty_cycle@DC,w
   494     0050  00F4               	movwf	??_PWM_duty_cycle
   495     0051  1003               	clrc
   496     0052  0CF5               	rrf	??_PWM_duty_cycle+1,f
   497     0053  0CF4               	rrf	??_PWM_duty_cycle,f
   498     0054  1003               	clrc
   499     0055  0CF5               	rrf	??_PWM_duty_cycle+1,f
   500     0056  0CF4               	rrf	??_PWM_duty_cycle,f
   501     0057  0874               	movf	??_PWM_duty_cycle,w
   502     0058  0095               	movwf	21	;volatile
   503     0059                     l56:
   504     0059  0008               	return
   505     005A                     __end_of_PWM_duty_cycle:
   506                           
   507                           	psect	text3
   508     005A                     __ptext3:	
   509 ;; *************** function _ADC_Read *****************
   510 ;; Defined at:
   511 ;;		line 71 in file "main.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;  AN              1    wreg     unsigned char 
   514 ;; Auto vars:     Size  Location     Type
   515 ;;  AN              1    3[COMMON] unsigned char 
   516 ;; Return value:  Size  Location     Type
   517 ;;                  1    wreg      void 
   518 ;; Registers used:
   519 ;;		wreg, status,2, status,0, btemp+1
   520 ;; Tracked objects:
   521 ;;		On entry : 0/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   525 ;;      Params:         0       0       0       0       0
   526 ;;      Locals:         1       0       0       0       0
   527 ;;      Temps:          1       0       0       0       0
   528 ;;      Totals:         2       0       0       0       0
   529 ;;Total ram usage:        2 bytes
   530 ;; Hardware stack levels used: 1
   531 ;; Hardware stack levels required when called: 1
   532 ;; This function calls:
   533 ;;		Nothing
   534 ;; This function is called by:
   535 ;;		_main
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539     005A                     _ADC_Read:	
   540                           ;psect for function _ADC_Read
   541                           
   542                           
   543                           ;incstack = 0
   544                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+btemp+1]
   545                           ;ADC_Read@AN stored from wreg
   546     005A  00F3               	movwf	ADC_Read@AN
   547     005B                     l639:
   548                           
   549                           ;main.c: 73: ADCON0&=~0x38;
   550     005B  30C7               	movlw	199
   551     005C  00FF               	movwf	btemp+1
   552     005D  087F               	movf	btemp+1,w
   553     005E  1283               	bcf	3,5	;RP0=0, select bank0
   554     005F  1303               	bcf	3,6	;RP1=0, select bank0
   555     0060  059F               	andwf	31,f	;volatile
   556                           
   557                           ;main.c: 74: ADCON0|=AN<<3;
   558     0061  0873               	movf	ADC_Read@AN,w	;volatile
   559     0062  00F2               	movwf	??_ADC_Read
   560     0063  3002               	movlw	2
   561     0064                     u45:
   562     0064  1003               	clrc
   563     0065  0DF2               	rlf	??_ADC_Read,f
   564     0066  3EFF               	addlw	-1
   565     0067  1D03               	skipz
   566     0068  2864               	goto	u45
   567     0069  1003               	clrc
   568     006A  0D72               	rlf	??_ADC_Read,w
   569     006B  00FF               	movwf	btemp+1
   570     006C  087F               	movf	btemp+1,w
   571     006D  049F               	iorwf	31,f	;volatile
   572     006E                     l641:
   573                           
   574                           ;main.c: 75: _delay((unsigned long)((30)*(4000000/4000000.0)));
   575     006E  3009               	movlw	9
   576     006F  00F2               	movwf	??_ADC_Read
   577     0070                     u107:
   578     0070  0BF2               	decfsz	??_ADC_Read,f
   579     0071  2870               	goto	u107
   580     0072  2873               	nop2
   581     0073                     l643:
   582                           
   583                           ;main.c: 76: ADCON0|=0x04;
   584     0073  1283               	bcf	3,5	;RP0=0, select bank0
   585     0074  1303               	bcf	3,6	;RP1=0, select bank0
   586     0075  151F               	bsf	31,2	;volatile
   587     0076                     l61:	
   588                           ;main.c: 77: }
   589                           
   590     0076  0008               	return
   591     0077                     __end_of_ADC_Read:
   592                           
   593                           	psect	text4
   594     00A4                     __ptext4:	
   595 ;; *************** function _ADC_Init *****************
   596 ;; Defined at:
   597 ;;		line 38 in file "main.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;		None
   602 ;; Return value:  Size  Location     Type
   603 ;;                  1    wreg      void 
   604 ;; Registers used:
   605 ;;		wreg
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   611 ;;      Params:         0       0       0       0       0
   612 ;;      Locals:         0       0       0       0       0
   613 ;;      Temps:          0       0       0       0       0
   614 ;;      Totals:         0       0       0       0       0
   615 ;;Total ram usage:        0 bytes
   616 ;; Hardware stack levels used: 1
   617 ;; Hardware stack levels required when called: 1
   618 ;; This function calls:
   619 ;;		Nothing
   620 ;; This function is called by:
   621 ;;		_main
   622 ;; This function uses a non-reentrant model
   623 ;;
   624                           
   625     00A4                     _ADC_Init:	
   626                           ;psect for function _ADC_Init
   627                           
   628     00A4                     l629:	
   629                           ;incstack = 0
   630                           ; Regs used in _ADC_Init: [wreg]
   631                           
   632                           
   633                           ;main.c: 39:     ADCON0 = 0x41;
   634     00A4  3041               	movlw	65
   635     00A5  1283               	bcf	3,5	;RP0=0, select bank0
   636     00A6  1303               	bcf	3,6	;RP1=0, select bank0
   637     00A7  009F               	movwf	31	;volatile
   638                           
   639                           ;main.c: 40:     ADCON1 = 0x80;
   640     00A8  3080               	movlw	128
   641     00A9  1683               	bsf	3,5	;RP0=1, select bank1
   642     00AA  1303               	bcf	3,6	;RP1=0, select bank1
   643     00AB  009F               	movwf	31	;volatile
   644     00AC                     l631:
   645                           
   646                           ;main.c: 43:     ADIF=0;
   647     00AC  1283               	bcf	3,5	;RP0=0, select bank0
   648     00AD  1303               	bcf	3,6	;RP1=0, select bank0
   649     00AE  130C               	bcf	12,6	;volatile
   650     00AF                     l633:
   651                           
   652                           ;main.c: 44:     ADIE=1;
   653     00AF  1683               	bsf	3,5	;RP0=1, select bank1
   654     00B0  1303               	bcf	3,6	;RP1=0, select bank1
   655     00B1  170C               	bsf	12,6	;volatile
   656     00B2                     l635:
   657                           
   658                           ;main.c: 45:     PEIE=1;
   659     00B2  170B               	bsf	11,6	;volatile
   660     00B3                     l637:
   661                           
   662                           ;main.c: 46:     GIE=1;
   663     00B3  178B               	bsf	11,7	;volatile
   664     00B4                     l44:
   665     00B4  0008               	return
   666     00B5                     __end_of_ADC_Init:
   667                           
   668                           	psect	text5
   669     0090                     __ptext5:	
   670 ;; *************** function _ISR *****************
   671 ;; Defined at:
   672 ;;		line 81 in file "main.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;		None
   675 ;; Auto vars:     Size  Location     Type
   676 ;;		None
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   686 ;;      Params:         0       0       0       0       0
   687 ;;      Locals:         0       0       0       0       0
   688 ;;      Temps:          2       0       0       0       0
   689 ;;      Totals:         2       0       0       0       0
   690 ;;Total ram usage:        2 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; This function calls:
   693 ;;		Nothing
   694 ;; This function is called by:
   695 ;;		Interrupt level 1
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699     0090                     _ISR:	
   700                           ;psect for function _ISR
   701                           
   702     0090                     i1l655:
   703                           
   704                           ;main.c: 82:     if(ADIF){
   705     0090  1283               	bcf	3,5	;RP0=0, select bank0
   706     0091  1303               	bcf	3,6	;RP1=0, select bank0
   707     0092  1F0C               	btfss	12,6	;volatile
   708     0093  2895               	goto	u5_21
   709     0094  2896               	goto	u5_20
   710     0095                     u5_21:
   711     0095  289D               	goto	i1l67
   712     0096                     u5_20:
   713     0096                     i1l657:
   714                           
   715                           ;main.c: 83:         ADIF=0;
   716     0096  130C               	bcf	12,6	;volatile
   717     0097                     i1l659:
   718                           
   719                           ;main.c: 84:         result=(ADRESH<<8)+ADRESL;
   720     0097  081E               	movf	30,w	;volatile
   721     0098  00F8               	movwf	_result+1
   722     0099  1683               	bsf	3,5	;RP0=1, select bank1
   723     009A  1303               	bcf	3,6	;RP1=0, select bank1
   724     009B  081E               	movf	30,w	;volatile
   725     009C  00F7               	movwf	_result
   726     009D                     i1l67:
   727     009D  0871               	movf	??_ISR+1,w
   728     009E  008A               	movwf	10
   729     009F  0E70               	swapf	??_ISR,w
   730     00A0  0083               	movwf	3
   731     00A1  0EFE               	swapf	btemp,f
   732     00A2  0E7E               	swapf	btemp,w
   733     00A3  0009               	retfie
   734     00A4                     __end_of_ISR:
   735     007E                     btemp	set	126	;btemp
   736     007E                     wtemp0	set	126
   737                           
   738                           	psect	intentry
   739     0004                     __pintentry:	
   740                           ;incstack = 0
   741                           ; Regs used in _ISR: [wreg]
   742                           
   743     0004                     interrupt_function:
   744     007E                     saved_w	set	btemp
   745     0004  00FE               	movwf	btemp
   746     0005  0E03               	swapf	3,w
   747     0006  00F0               	movwf	??_ISR
   748     0007  080A               	movf	10,w
   749     0008  00F1               	movwf	??_ISR+1
   750     0009  120A  118A  2890   	ljmp	_ISR
   751                           
   752                           	psect	config
   753                           
   754                           ;Config register CONFIG @ 0x2007
   755                           ;	Oscillator Selection bits
   756                           ;	FOSC = XT, XT oscillator
   757                           ;	Watchdog Timer Enable bit
   758                           ;	WDTE = OFF, WDT disabled
   759                           ;	Power-up Timer Enable bit
   760                           ;	PWRTE = ON, PWRT enabled
   761                           ;	Brown-out Reset Enable bit
   762                           ;	BOREN = ON, BOR enabled
   763                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   764                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   765                           ;	Data EEPROM Memory Code Protection bit
   766                           ;	CPD = OFF, Data EEPROM code protection off
   767                           ;	Flash Program Memory Write Enable bits
   768                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   769                           ;	In-Circuit Debugger Mode bit
   770                           ;	DEBUG = 0x1, unprogrammed default
   771                           ;	Flash Program Memory Code Protection bit
   772                           ;	CP = OFF, Code protection off
   773     2007                     	org	8199
   774     2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_PWM_duty_cycle
    _CCP_PWM->_PWM_duty_cycle

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     451
                                              6 COMMON     1     1      0
                           _ADC_Init
                           _ADC_Read
                            _CCP_PWM
                     _PWM_duty_cycle
 ---------------------------------------------------------------------------------
 (1) _CCP_PWM                                              0     0      0     218
                     _PWM_duty_cycle
 ---------------------------------------------------------------------------------
 (1) _PWM_duty_cycle                                       4     2      2     218
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             2     2      0      15
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _CCP_PWM
     _PWM_duty_cycle
   _PWM_duty_cycle

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       9       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       9      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sun May 19 18:29:05 2024

                     l41 008F                       l44 00B4                       l61 0076  
                     l56 0059                       u60 0042                       u45 0064  
                     u61 0041                       u70 0049                       u71 0045  
                     u84 004C                       u97 0030                      l631 00AC  
                    l633 00AF                      l641 006E                      l635 00B2  
                    l643 0073                      l637 00B3                      l629 00A4  
                    l661 0039                      l639 005B                      l663 0042  
                    l671 007F                      l665 004D                      l673 0085  
                    l681 001A                      l675 0086                      l667 0077  
                    l683 001F                      l677 0087                      l669 007B  
                    l685 002E                      l679 0015                      _GIE 005F  
                    u107 0070                      _PR2 0092                      _ISR 0090  
        __end_of_CCP_PWM 0090                     ?_ISR 0070                     _ADIE 0466  
                   _ADIF 0066                     _PEIE 005E                     i1l67 009D  
                   u5_20 0096                     u5_21 0095                     _main 0015  
                   btemp 007E         __end_of_ADC_Init 00B5         __end_of_ADC_Read 0077  
                   start 000C                    ??_ISR 0070         PWM_duty_cycle@DC 0072  
                  ?_main 0070                    _CCP1X 00BD                    _CCP1Y 00BC  
                  _T2CON 0012                    i1l655 0090                    i1l657 0096  
                  i1l659 0097                    _TRISC 0087                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 000F  
           __end_of_main 0039                ??_CCP_PWM 0076                   ??_main 0076  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 _ADRESL 009E                   _CCPR1L 0015                   _result 0077  
              ?_ADC_Init 0070                ?_ADC_Read 0070                   saved_w 007E  
__end_of__initialization 0011           __pcstackCOMMON 0070               ??_ADC_Init 0072  
             ??_ADC_Read 0072               __pmaintext 0015               __pintentry 0004  
                _CCP1CON 0017               ADC_Read@AN 0073                  _CCP_PWM 0077  
                __ptext1 0077                  __ptext2 0039                  __ptext3 005A  
                __ptext4 00A4                  __ptext5 0090     end_of_initialization 0011  
         _PWM_duty_cycle 0039   __end_of_PWM_duty_cycle 005A      start_initialization 000F  
            __end_of_ISR 00A4          ?_PWM_duty_cycle 0072                 ?_CCP_PWM 0070  
            __pbssCOMMON 0077                ___latbits 0002                 _ADC_Init 00A4  
               _ADC_Read 005A        interrupt_function 0004         ??_PWM_duty_cycle 0074  
               intlevel1 0000  
