

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sun May 19 16:42:50 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,merge=1,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13     0000                     
    14                           ; Generated 12/10/2023 GMT
    15                           ; 
    16                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution. Publication is not required when
    30                           ;        this file is used in an embedded application.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48     0000                     	;# 
    49     0001                     	;# 
    50     0002                     	;# 
    51     0003                     	;# 
    52     0004                     	;# 
    53     0005                     	;# 
    54     0006                     	;# 
    55     0007                     	;# 
    56     0008                     	;# 
    57     0009                     	;# 
    58     000A                     	;# 
    59     000B                     	;# 
    60     000C                     	;# 
    61     000D                     	;# 
    62     000E                     	;# 
    63     000E                     	;# 
    64     000F                     	;# 
    65     0010                     	;# 
    66     0011                     	;# 
    67     0012                     	;# 
    68     0013                     	;# 
    69     0014                     	;# 
    70     0015                     	;# 
    71     0015                     	;# 
    72     0016                     	;# 
    73     0017                     	;# 
    74     0018                     	;# 
    75     0019                     	;# 
    76     001A                     	;# 
    77     001B                     	;# 
    78     001B                     	;# 
    79     001C                     	;# 
    80     001D                     	;# 
    81     001E                     	;# 
    82     001F                     	;# 
    83     0081                     	;# 
    84     0085                     	;# 
    85     0086                     	;# 
    86     0087                     	;# 
    87     0088                     	;# 
    88     0089                     	;# 
    89     008C                     	;# 
    90     008D                     	;# 
    91     008E                     	;# 
    92     0091                     	;# 
    93     0092                     	;# 
    94     0093                     	;# 
    95     0094                     	;# 
    96     0098                     	;# 
    97     0099                     	;# 
    98     009C                     	;# 
    99     009D                     	;# 
   100     009E                     	;# 
   101     009F                     	;# 
   102     010C                     	;# 
   103     010D                     	;# 
   104     010E                     	;# 
   105     010F                     	;# 
   106     018C                     	;# 
   107     018D                     	;# 
   108     0000                     	;# 
   109     0001                     	;# 
   110     0002                     	;# 
   111     0003                     	;# 
   112     0004                     	;# 
   113     0005                     	;# 
   114     0006                     	;# 
   115     0007                     	;# 
   116     0008                     	;# 
   117     0009                     	;# 
   118     000A                     	;# 
   119     000B                     	;# 
   120     000C                     	;# 
   121     000D                     	;# 
   122     000E                     	;# 
   123     000E                     	;# 
   124     000F                     	;# 
   125     0010                     	;# 
   126     0011                     	;# 
   127     0012                     	;# 
   128     0013                     	;# 
   129     0014                     	;# 
   130     0015                     	;# 
   131     0015                     	;# 
   132     0016                     	;# 
   133     0017                     	;# 
   134     0018                     	;# 
   135     0019                     	;# 
   136     001A                     	;# 
   137     001B                     	;# 
   138     001B                     	;# 
   139     001C                     	;# 
   140     001D                     	;# 
   141     001E                     	;# 
   142     001F                     	;# 
   143     0081                     	;# 
   144     0085                     	;# 
   145     0086                     	;# 
   146     0087                     	;# 
   147     0088                     	;# 
   148     0089                     	;# 
   149     008C                     	;# 
   150     008D                     	;# 
   151     008E                     	;# 
   152     0091                     	;# 
   153     0092                     	;# 
   154     0093                     	;# 
   155     0094                     	;# 
   156     0098                     	;# 
   157     0099                     	;# 
   158     009C                     	;# 
   159     009D                     	;# 
   160     009E                     	;# 
   161     009F                     	;# 
   162     010C                     	;# 
   163     010D                     	;# 
   164     010E                     	;# 
   165     010F                     	;# 
   166     018C                     	;# 
   167     018D                     	;# 
   168     001E                     _ADRESH	set	30
   169     0015                     _CCPR1L	set	21
   170     001F                     _ADCON0	set	31
   171     0012                     _T2CON	set	18
   172     0017                     _CCP1CON	set	23
   173     00BD                     _CCP1X	set	189
   174     00BC                     _CCP1Y	set	188
   175     009E                     _ADRESL	set	158
   176     009F                     _ADCON1	set	159
   177     0087                     _TRISC	set	135
   178     0092                     _PR2	set	146
   179                           
   180                           	psect	cinit
   181     07FC                     start_initialization:	
   182                           ; #config settings
   183                           
   184     07FC                     __initialization:
   185     07FC                     end_of_initialization:	
   186                           ;End of C runtime variable initialization code
   187                           
   188     07FC                     __end_of__initialization:
   189     07FC  0183               	clrf	3
   190     07FD  120A  118A  2FA4   	ljmp	_main	;jump to C main() function
   191                           
   192                           	psect	cstackCOMMON
   193     0070                     __pcstackCOMMON:
   194     0070                     ?_CCP_PWM:
   195     0070                     ?_ADC_Init:	
   196                           ; 1 bytes @ 0x0
   197                           
   198     0070                     ??_ADC_Init:	
   199                           ; 1 bytes @ 0x0
   200                           
   201     0070                     ?_main:	
   202                           ; 1 bytes @ 0x0
   203                           
   204     0070                     ?_ADC_Read:	
   205                           ; 1 bytes @ 0x0
   206                           
   207                           
   208                           ; 2 bytes @ 0x0
   209     0070                     	ds	2
   210     0072                     ??_ADC_Read:
   211                           
   212                           ; 1 bytes @ 0x2
   213     0072                     	ds	1
   214     0073                     ADC_Read@result:
   215                           
   216                           ; 2 bytes @ 0x3
   217     0073                     	ds	2
   218     0075                     ADC_Read@AN:
   219                           
   220                           ; 1 bytes @ 0x5
   221     0075                     	ds	1
   222     0076                     ?_PWM_duty_cycle:
   223     0076                     PWM_duty_cycle@DC:	
   224                           ; 1 bytes @ 0x6
   225                           
   226                           
   227                           ; 2 bytes @ 0x6
   228     0076                     	ds	2
   229     0078                     ??_PWM_duty_cycle:
   230                           
   231                           ; 1 bytes @ 0x8
   232     0078                     	ds	2
   233     007A                     ??_CCP_PWM:
   234     007A                     ??_main:	
   235                           ; 1 bytes @ 0xA
   236                           
   237                           
   238                           ; 1 bytes @ 0xA
   239     007A                     	ds	1
   240                           
   241                           	psect	maintext
   242     07A4                     __pmaintext:	
   243 ;;
   244 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   245 ;;
   246 ;; *************** function _main *****************
   247 ;; Defined at:
   248 ;;		line 36 in file "main.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;		None
   251 ;; Auto vars:     Size  Location     Type
   252 ;;		None
   253 ;; Return value:  Size  Location     Type
   254 ;;                  1    wreg      void 
   255 ;; Registers used:
   256 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   257 ;; Tracked objects:
   258 ;;		On entry : B00/0
   259 ;;		On exit  : 0/0
   260 ;;		Unchanged: 0/0
   261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   262 ;;      Params:         0       0       0       0       0
   263 ;;      Locals:         0       0       0       0       0
   264 ;;      Temps:          1       0       0       0       0
   265 ;;      Totals:         1       0       0       0       0
   266 ;;Total ram usage:        1 bytes
   267 ;; Hardware stack levels required when called: 2
   268 ;; This function calls:
   269 ;;		_ADC_Init
   270 ;;		_ADC_Read
   271 ;;		_CCP_PWM
   272 ;;		_PWM_duty_cycle
   273 ;; This function is called by:
   274 ;;		Startup code after reset
   275 ;; This function uses a non-reentrant model
   276 ;;
   277                           
   278     07A4                     _main:	
   279                           ;psect for function _main
   280                           
   281     07A4                     l675:	
   282                           ;incstack = 0
   283                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   284                           
   285                           
   286                           ;main.c: 37: CCP_PWM();
   287     07A4  120A  118A  276A  120A  118A  	fcall	_CCP_PWM
   288     07A9                     l677:
   289                           
   290                           ;main.c: 38: ADC_Init();
   291     07A9  120A  118A  2761  120A  118A  	fcall	_ADC_Init
   292     07AE                     l679:
   293                           
   294                           ;main.c: 40: PWM_duty_cycle(ADC_Read(0));
   295     07AE  3000               	movlw	0
   296     07AF  120A  118A  27C8  120A  118A  	fcall	_ADC_Read
   297     07B4  0871               	movf	?_ADC_Read+1,w
   298     07B5  00F7               	movwf	PWM_duty_cycle@DC+1
   299     07B6  0870               	movf	?_ADC_Read,w
   300     07B7  00F6               	movwf	PWM_duty_cycle@DC
   301     07B8  120A  118A  2783  120A  118A  	fcall	_PWM_duty_cycle
   302     07BD                     l681:
   303                           
   304                           ;main.c: 41: _delay((unsigned long)((1)*(4000000/4000.0)));
   305     07BD  30C7               	movlw	199
   306     07BE  00FA               	movwf	??_main
   307     07BF                     u137:
   308     07BF  2FC0               	nop2
   309     07C0  0BFA               	decfsz	??_main,f
   310     07C1  2FBF               	goto	u137
   311     07C2  2FC3               	nop2
   312     07C3  2FC4               	nop2
   313     07C4  2FAE               	goto	l679
   314     07C5  120A  118A  2800   	ljmp	start
   315     07C8                     __end_of_main:
   316                           
   317                           	psect	text1
   318     076A                     __ptext1:	
   319 ;; *************** function _CCP_PWM *****************
   320 ;; Defined at:
   321 ;;		line 21 in file "main.c"
   322 ;; Parameters:    Size  Location     Type
   323 ;;		None
   324 ;; Auto vars:     Size  Location     Type
   325 ;;		None
   326 ;; Return value:  Size  Location     Type
   327 ;;                  1    wreg      void 
   328 ;; Registers used:
   329 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   330 ;; Tracked objects:
   331 ;;		On entry : 0/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   335 ;;      Params:         0       0       0       0       0
   336 ;;      Locals:         0       0       0       0       0
   337 ;;      Temps:          0       0       0       0       0
   338 ;;      Totals:         0       0       0       0       0
   339 ;;Total ram usage:        0 bytes
   340 ;; Hardware stack levels used: 1
   341 ;; Hardware stack levels required when called: 1
   342 ;; This function calls:
   343 ;;		_PWM_duty_cycle
   344 ;; This function is called by:
   345 ;;		_main
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349     076A                     _CCP_PWM:	
   350                           ;psect for function _CCP_PWM
   351                           
   352     076A                     l647:	
   353                           ;incstack = 0
   354                           ; Regs used in _CCP_PWM: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   355                           
   356                           
   357                           ;main.c: 22: PR2=255;
   358     076A  30FF               	movlw	255
   359     076B  1683               	bsf	3,5	;RP0=1, select bank1
   360     076C  1303               	bcf	3,6	;RP1=0, select bank1
   361     076D  0092               	movwf	18	;volatile
   362     076E                     l649:
   363                           
   364                           ;main.c: 23: TRISC&=~0x04;
   365     076E  30FB               	movlw	251
   366     076F  00FF               	movwf	btemp+1
   367     0770  087F               	movf	btemp+1,w
   368     0771  0587               	andwf	7,f	;volatile
   369     0772                     l651:
   370                           
   371                           ;main.c: 24: CCP1CON|=0x0C;
   372     0772  300C               	movlw	12
   373     0773  00FF               	movwf	btemp+1
   374     0774  087F               	movf	btemp+1,w
   375     0775  1283               	bcf	3,5	;RP0=0, select bank0
   376     0776  1303               	bcf	3,6	;RP1=0, select bank0
   377     0777  0497               	iorwf	23,f	;volatile
   378     0778                     l653:
   379                           
   380                           ;main.c: 25: T2CON|=0x01;
   381     0778  1412               	bsf	18,0	;volatile
   382     0779                     l655:
   383                           
   384                           ;main.c: 26: T2CON|=0x04;
   385     0779  1512               	bsf	18,2	;volatile
   386     077A                     l657:
   387                           
   388                           ;main.c: 27: PWM_duty_cycle(0);
   389     077A  3000               	movlw	0
   390     077B  00F6               	movwf	PWM_duty_cycle@DC
   391     077C  00F7               	movwf	PWM_duty_cycle@DC+1
   392     077D  120A  118A  2783  120A  118A  	fcall	_PWM_duty_cycle
   393     0782                     l31:
   394     0782  0008               	return
   395     0783                     __end_of_CCP_PWM:
   396                           
   397                           	psect	text2
   398     0783                     __ptext2:	
   399 ;; *************** function _PWM_duty_cycle *****************
   400 ;; Defined at:
   401 ;;		line 47 in file "main.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;  DC              2    6[COMMON] unsigned short 
   404 ;; Auto vars:     Size  Location     Type
   405 ;;		None
   406 ;; Return value:  Size  Location     Type
   407 ;;                  1    wreg      void 
   408 ;; Registers used:
   409 ;;		wreg, status,2, status,0
   410 ;; Tracked objects:
   411 ;;		On entry : 0/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   415 ;;      Params:         2       0       0       0       0
   416 ;;      Locals:         0       0       0       0       0
   417 ;;      Temps:          2       0       0       0       0
   418 ;;      Totals:         4       0       0       0       0
   419 ;;Total ram usage:        4 bytes
   420 ;; Hardware stack levels used: 1
   421 ;; This function calls:
   422 ;;		Nothing
   423 ;; This function is called by:
   424 ;;		_CCP_PWM
   425 ;;		_main
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429     0783                     _PWM_duty_cycle:	
   430                           ;psect for function _PWM_duty_cycle
   431                           
   432     0783                     l641:	
   433                           ;incstack = 0
   434                           ; Regs used in _PWM_duty_cycle: [wreg+status,2+status,0]
   435                           
   436                           
   437                           ;main.c: 48:     if(DC<1024){
   438     0783  3004               	movlw	4
   439     0784  0277               	subwf	PWM_duty_cycle@DC+1,w
   440     0785  3000               	movlw	0
   441     0786  1903               	skipnz
   442     0787  0276               	subwf	PWM_duty_cycle@DC,w
   443     0788  1803               	skipnc
   444     0789  2F8B               	goto	u71
   445     078A  2F8C               	goto	u70
   446     078B                     u71:
   447     078B  2FA3               	goto	l46
   448     078C                     u70:
   449     078C                     l643:
   450                           
   451                           ;main.c: 49:     CCP1Y = DC & 1;
   452     078C  1876               	btfsc	PWM_duty_cycle@DC,0
   453     078D  2F8F               	goto	u81
   454     078E  2F93               	goto	u80
   455     078F                     u81:
   456     078F  1283               	bcf	3,5	;RP0=0, select bank0
   457     0790  1303               	bcf	3,6	;RP1=0, select bank0
   458     0791  1617               	bsf	23,4	;volatile
   459     0792  2F96               	goto	u94
   460     0793                     u80:
   461     0793  1283               	bcf	3,5	;RP0=0, select bank0
   462     0794  1303               	bcf	3,6	;RP1=0, select bank0
   463     0795  1217               	bcf	23,4	;volatile
   464     0796                     u94:
   465                           
   466                           ;main.c: 50:     CCP1X = DC & 2;
   467     0796  1297               	bcf	23,5	;volatile
   468     0797                     l645:
   469                           
   470                           ;main.c: 51:     CCPR1L = DC >> 2;
   471     0797  0877               	movf	PWM_duty_cycle@DC+1,w
   472     0798  00F9               	movwf	??_PWM_duty_cycle+1
   473     0799  0876               	movf	PWM_duty_cycle@DC,w
   474     079A  00F8               	movwf	??_PWM_duty_cycle
   475     079B  1003               	clrc
   476     079C  0CF9               	rrf	??_PWM_duty_cycle+1,f
   477     079D  0CF8               	rrf	??_PWM_duty_cycle,f
   478     079E  1003               	clrc
   479     079F  0CF9               	rrf	??_PWM_duty_cycle+1,f
   480     07A0  0CF8               	rrf	??_PWM_duty_cycle,f
   481     07A1  0878               	movf	??_PWM_duty_cycle,w
   482     07A2  0095               	movwf	21	;volatile
   483     07A3                     l46:
   484     07A3  0008               	return
   485     07A4                     __end_of_PWM_duty_cycle:
   486                           
   487                           	psect	text3
   488     07C8                     __ptext3:	
   489 ;; *************** function _ADC_Read *****************
   490 ;; Defined at:
   491 ;;		line 57 in file "main.c"
   492 ;; Parameters:    Size  Location     Type
   493 ;;  AN              1    wreg     unsigned char 
   494 ;; Auto vars:     Size  Location     Type
   495 ;;  AN              1    5[COMMON] unsigned char 
   496 ;;  result          2    3[COMMON] unsigned short 
   497 ;; Return value:  Size  Location     Type
   498 ;;                  2    0[COMMON] unsigned short 
   499 ;; Registers used:
   500 ;;		wreg, status,2, status,0, btemp+1
   501 ;; Tracked objects:
   502 ;;		On entry : 0/0
   503 ;;		On exit  : 0/0
   504 ;;		Unchanged: 0/0
   505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   506 ;;      Params:         2       0       0       0       0
   507 ;;      Locals:         3       0       0       0       0
   508 ;;      Temps:          1       0       0       0       0
   509 ;;      Totals:         6       0       0       0       0
   510 ;;Total ram usage:        6 bytes
   511 ;; Hardware stack levels used: 1
   512 ;; This function calls:
   513 ;;		Nothing
   514 ;; This function is called by:
   515 ;;		_main
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519     07C8                     _ADC_Read:	
   520                           ;psect for function _ADC_Read
   521                           
   522                           
   523                           ;incstack = 0
   524                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+btemp+1]
   525                           ;ADC_Read@AN stored from wreg
   526     07C8  00F5               	movwf	ADC_Read@AN
   527     07C9                     l659:
   528                           
   529                           ;main.c: 58: uint16_t result;;main.c: 59: if(AN<0 || AN>7){
   530     07C9  3008               	movlw	8
   531     07CA  0275               	subwf	ADC_Read@AN,w
   532     07CB  1C03               	skipc
   533     07CC  2FCE               	goto	u101
   534     07CD  2FCF               	goto	u100
   535     07CE                     u101:
   536     07CE  2FD2               	goto	l665
   537     07CF                     u100:
   538     07CF                     l661:
   539                           
   540                           ;main.c: 60:      return 0;}
   541     07CF  01F0               	clrf	?_ADC_Read
   542     07D0  01F1               	clrf	?_ADC_Read+1
   543     07D1  2FFB               	goto	l50
   544     07D2                     l665:
   545                           
   546                           ;main.c: 61: ADCON0&=~0x38;
   547     07D2  30C7               	movlw	199
   548     07D3  00FF               	movwf	btemp+1
   549     07D4  087F               	movf	btemp+1,w
   550     07D5  1283               	bcf	3,5	;RP0=0, select bank0
   551     07D6  1303               	bcf	3,6	;RP1=0, select bank0
   552     07D7  059F               	andwf	31,f	;volatile
   553                           
   554                           ;main.c: 62: ADCON0|=AN<<3;
   555     07D8  0875               	movf	ADC_Read@AN,w	;volatile
   556     07D9  00F2               	movwf	??_ADC_Read
   557     07DA  3002               	movlw	2
   558     07DB                     u115:
   559     07DB  1003               	clrc
   560     07DC  0DF2               	rlf	??_ADC_Read,f
   561     07DD  3EFF               	addlw	-1
   562     07DE  1D03               	skipz
   563     07DF  2FDB               	goto	u115
   564     07E0  1003               	clrc
   565     07E1  0D72               	rlf	??_ADC_Read,w
   566     07E2  00FF               	movwf	btemp+1
   567     07E3  087F               	movf	btemp+1,w
   568     07E4  049F               	iorwf	31,f	;volatile
   569     07E5                     l667:
   570                           
   571                           ;main.c: 63: _delay((unsigned long)((30)*(4000000/4000000.0)));
   572     07E5  3009               	movlw	9
   573     07E6  00F2               	movwf	??_ADC_Read
   574     07E7                     u147:
   575     07E7  0BF2               	decfsz	??_ADC_Read,f
   576     07E8  2FE7               	goto	u147
   577     07E9  2FEA               	nop2
   578     07EA                     l669:
   579                           
   580                           ;main.c: 64: ADCON0|=0x04;
   581     07EA  1283               	bcf	3,5	;RP0=0, select bank0
   582     07EB  1303               	bcf	3,6	;RP1=0, select bank0
   583     07EC  151F               	bsf	31,2	;volatile
   584     07ED                     l51:	
   585                           ;main.c: 65: while(ADCON0&0x04);
   586                           
   587     07ED  191F               	btfsc	31,2	;volatile
   588     07EE  2FF0               	goto	u121
   589     07EF  2FF1               	goto	u120
   590     07F0                     u121:
   591     07F0  2FED               	goto	l51
   592     07F1                     u120:
   593     07F1                     l671:
   594                           
   595                           ;main.c: 66: result=(ADRESH<<8)+ADRESL;
   596     07F1  081E               	movf	30,w	;volatile
   597     07F2  00F4               	movwf	ADC_Read@result+1
   598     07F3  1683               	bsf	3,5	;RP0=1, select bank1
   599     07F4  1303               	bcf	3,6	;RP1=0, select bank1
   600     07F5  081E               	movf	30,w	;volatile
   601     07F6  00F3               	movwf	ADC_Read@result
   602                           
   603                           ;main.c: 67: return result;
   604     07F7  0874               	movf	ADC_Read@result+1,w
   605     07F8  00F1               	movwf	?_ADC_Read+1
   606     07F9  0873               	movf	ADC_Read@result,w
   607     07FA  00F0               	movwf	?_ADC_Read
   608     07FB                     l50:
   609     07FB  0008               	return
   610     07FC                     __end_of_ADC_Read:
   611                           
   612                           	psect	text4
   613     0761                     __ptext4:	
   614 ;; *************** function _ADC_Init *****************
   615 ;; Defined at:
   616 ;;		line 30 in file "main.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;		None
   619 ;; Auto vars:     Size  Location     Type
   620 ;;		None
   621 ;; Return value:  Size  Location     Type
   622 ;;                  1    wreg      void 
   623 ;; Registers used:
   624 ;;		wreg
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   630 ;;      Params:         0       0       0       0       0
   631 ;;      Locals:         0       0       0       0       0
   632 ;;      Temps:          0       0       0       0       0
   633 ;;      Totals:         0       0       0       0       0
   634 ;;Total ram usage:        0 bytes
   635 ;; Hardware stack levels used: 1
   636 ;; This function calls:
   637 ;;		Nothing
   638 ;; This function is called by:
   639 ;;		_main
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643     0761                     _ADC_Init:	
   644                           ;psect for function _ADC_Init
   645                           
   646     0761                     l615:	
   647                           ;incstack = 0
   648                           ; Regs used in _ADC_Init: [wreg]
   649                           
   650                           
   651                           ;main.c: 31:     ADCON0 = 0x41;
   652     0761  3041               	movlw	65
   653     0762  1283               	bcf	3,5	;RP0=0, select bank0
   654     0763  1303               	bcf	3,6	;RP1=0, select bank0
   655     0764  009F               	movwf	31	;volatile
   656                           
   657                           ;main.c: 32:     ADCON1 = 0x80;
   658     0765  3080               	movlw	128
   659     0766  1683               	bsf	3,5	;RP0=1, select bank1
   660     0767  1303               	bcf	3,6	;RP1=0, select bank1
   661     0768  009F               	movwf	31	;volatile
   662     0769                     l34:
   663     0769  0008               	return
   664     076A                     __end_of_ADC_Init:
   665     007E                     btemp	set	126	;btemp
   666     007E                     wtemp0	set	126
   667                           
   668                           	psect	config
   669                           
   670                           ;Config register CONFIG @ 0x2007
   671                           ;	Oscillator Selection bits
   672                           ;	FOSC = XT, XT oscillator
   673                           ;	Watchdog Timer Enable bit
   674                           ;	WDTE = OFF, WDT disabled
   675                           ;	Power-up Timer Enable bit
   676                           ;	PWRTE = ON, PWRT enabled
   677                           ;	Brown-out Reset Enable bit
   678                           ;	BOREN = ON, BOR enabled
   679                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   680                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   681                           ;	Data EEPROM Memory Code Protection bit
   682                           ;	CPD = OFF, Data EEPROM code protection off
   683                           ;	Flash Program Memory Write Enable bits
   684                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   685                           ;	In-Circuit Debugger Mode bit
   686                           ;	DEBUG = 0x1, unprogrammed default
   687                           ;	Flash Program Memory Code Protection bit
   688                           ;	CP = OFF, Code protection off
   689     2007                     	org	8199
   690     2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_PWM_duty_cycle
    _CCP_PWM->_PWM_duty_cycle
    _PWM_duty_cycle->_ADC_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     503
                                             10 COMMON     1     1      0
                           _ADC_Init
                           _ADC_Read
                            _CCP_PWM
                     _PWM_duty_cycle
 ---------------------------------------------------------------------------------
 (1) _CCP_PWM                                              0     0      0     218
                     _PWM_duty_cycle
 ---------------------------------------------------------------------------------
 (1) _PWM_duty_cycle                                       4     2      2     218
                                              6 COMMON     4     2      2
                           _ADC_Read (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             6     4      2      67
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _CCP_PWM
     _PWM_duty_cycle
       _ADC_Read (ARG)
   _PWM_duty_cycle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sun May 19 16:42:50 2024

                     l31 0782                       l34 0769                       l50 07FB  
                     l51 07ED                       l46 07A3                       u70 078C  
                     u71 078B                       u80 0793                       u81 078F  
                     u94 0796                      l615 0761                      l641 0783  
                    l643 078C                      l651 0772                      l661 07CF  
                    l645 0797                      l653 0778                      l671 07F1  
                    l655 0779                      l647 076A                      l665 07D2  
                    l657 077A                      l649 076E                      l681 07BD  
                    l667 07E5                      l659 07C9                      l675 07A4  
                    l669 07EA                      l677 07A9                      l679 07AE  
                    u100 07CF                      u101 07CE                      u120 07F1  
                    u121 07F0                      u115 07DB                      u137 07BF  
                    u147 07E7                      _PR2 0092          __end_of_CCP_PWM 0783  
                   _main 07A4                     btemp 007E         __end_of_ADC_Init 076A  
       __end_of_ADC_Read 07FC                     start 0000         PWM_duty_cycle@DC 0076  
                  ?_main 0070                    _CCP1X 00BD                    _CCP1Y 00BC  
                  _T2CON 0012                    _TRISC 0087                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07C8  
              ??_CCP_PWM 007A                   ??_main 007A                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
                 _CCPR1L 0015                ?_ADC_Init 0070                ?_ADC_Read 0070  
__end_of__initialization 07FC           __pcstackCOMMON 0070               ??_ADC_Init 0070  
             ??_ADC_Read 0072               __pmaintext 07A4                  _CCP1CON 0017  
             ADC_Read@AN 0075                  _CCP_PWM 076A                  __ptext1 076A  
                __ptext2 0783                  __ptext3 07C8                  __ptext4 0761  
   end_of_initialization 07FC           _PWM_duty_cycle 0783   __end_of_PWM_duty_cycle 07A4  
    start_initialization 07FC           ADC_Read@result 0073          ?_PWM_duty_cycle 0076  
               ?_CCP_PWM 0070                ___latbits 0002                 _ADC_Init 0761  
               _ADC_Read 07C8         ??_PWM_duty_cycle 0078  
